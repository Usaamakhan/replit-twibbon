we are currently using fcm for notifications but I want to convert to use in app notifications , so kindly make a plan and write it in tasks.md . even though I get an idea from chatgpt and here is his answer but make sure you should make a plan based on our actual codebase , but you can get an idea from chatgpt's answer if you think that his plan is ok.
chatgpt's answer:
ü™Ñ Goal:

Replace Firebase Cloud Messaging (push) notifications with in-app (Firestore-based) notifications that appear inside the website only.

‚öôÔ∏è Short Implementation Plan for Replit
1. Remove FCM dependencies

Delete or disable all FCM setup:

Remove firebase-messaging-sw.js

Remove getToken(), onMessage() from frontend

Remove messaging imports and initialization

Delete any code related to service worker registration

‚úÖ After this, your app will no longer request browser permission.

2. Create Firestore notifications collection

Structure:

notifications/
  {userId}/
    {notificationId}/
      title: string
      body: string
      timestamp: number
      read: boolean

3. Update backend/admin code

Wherever you used admin.messaging().send(...) ‚Üí
replace it with writing to Firestore:

import { doc, setDoc } from "firebase/firestore";
import { db } from "./firebase"; // already in your project

await setDoc(doc(db, "notifications", userId, Date.now().toString()), {
  title: "New update!",
  body: "Your post was approved üéâ",
  timestamp: Date.now(),
  read: false,
});


‚úÖ This stores the notification instead of sending a push.

4. Add real-time listener in frontend

In your React/Next.js component (where you want to show notifications):

import { collection, onSnapshot } from "firebase/firestore";

useEffect(() => {
  const ref = collection(db, "notifications", user.uid);
  const unsub = onSnapshot(ref, (snap) => {
    const data = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    setNotifications(data.sort((a, b) => b.timestamp - a.timestamp));
  });
  return () => unsub();
}, [user.uid]);


‚úÖ This listens live for new notifications ‚Äî no FCM required.

5. Build simple notifications tab or dropdown

Show notifications in the UI:

<div className="notifications-tab">
  {notifications.map(n => (
    <div key={n.id} className={`notif ${n.read ? '' : 'unread'}`}>
      <h4>{n.title}</h4>
      <p>{n.body}</p>
    </div>
  ))}
</div>


Optional: Add unread count

const unread = notifications.filter(n => !n.read).length;

6. Add ‚ÄúMark as read‚Äù option

When user opens the tab:

import { updateDoc, doc } from "firebase/firestore";
await updateDoc(doc(db, "notifications", user.uid, notif.id), { read: true });