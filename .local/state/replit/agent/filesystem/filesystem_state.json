{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1458},"replit.md":{"content":"# Twibbonize App - Next.js Project\n\n## Overview\nThis is a Next.js 15 application with React 19 and Tailwind CSS, designed to work in the Replit environment. The project was successfully imported from GitHub and configured for optimal performance in Replit's proxy environment.\n\n## Project Architecture\n- **Framework**: Next.js 15.5.2 with App Router\n- **UI**: React 19.1.0 with Tailwind CSS 4\n- **Build Tool**: Next.js built-in bundler (Turbopack disabled for compatibility)\n- **Development Server**: Running on port 5000 with host 0.0.0.0\n- **Deployment**: Configured for Replit's autoscale deployment\n\n## Configuration\n- **Host Configuration**: Set to 0.0.0.0:5000 for Replit proxy compatibility\n- **CORS Headers**: Configured to allow cross-origin requests\n- **Cache Control**: Disabled caching for development\n- **Turbopack**: Disabled due to compatibility issues with Replit environment\n\n## Recent Changes (September 16, 2025)\n1. Successfully imported project from GitHub and installed all dependencies\n2. Configured Next.js to work with Replit's proxy environment \n3. Set up development workflow on port 5000 with proper host configuration (0.0.0.0)\n4. Updated CORS and domain configuration with current Replit domain (b9f7cf9a-a349-4272-8c8b-7b3ae0d2daf5-00-yzdm3ga91f1x.pike.replit.dev)\n5. Configured allowedDevOrigins to handle Replit's proxy environment with current domain\n6. Set up Firebase authentication with Google provider and environment variables (NEXT_PUBLIC_* format)\n7. Fixed production build configuration by removing --turbopack flag for stability\n8. Verified AuthProvider is properly wrapped around the app in layout.js\n9. Set up autoscale deployment configuration for production\n10. Application is running successfully and serving content with 200 responses\n11. **Project Import Complete**: All dependencies installed, Firebase credentials configured, development server running successfully on port 5000 with proper Replit proxy configuration\n\n## Firebase Setup Status\n- Environment variables configured: NEXT_PUBLIC_FIREBASE_API_KEY, NEXT_PUBLIC_FIREBASE_PROJECT_ID, NEXT_PUBLIC_FIREBASE_APP_ID\n- Authentication provider properly configured with Google sign-in redirect flow\n- User needs to add Replit dev domain and production domain to Firebase Console authorized domains\n- AuthProvider correctly wraps the entire application in layout.js\n\n## Development Workflow\n- **Start Development**: `npm run dev` (automatically configured in workflow)\n- **Build**: `npm run build`\n- **Production**: `npm run start`\n- **Linting**: `npm run lint`\n\n## User Preferences\n- Prefer stability over experimental features\n- Focus on compatibility with Replit environment\n- Maintain clean, working codebase structure","size_bytes":2724},"src/app/globals.css":{"content":"@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n/* Custom hover effects for buttons - Tailwind CSS 4 transform compatibility fix */\n.hover-zoom {\n  transform: scale(1);\n  transition: transform 0.2s ease-in-out;\n}\n\n.hover-zoom:hover {\n  transform: scale(1.1);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n","size_bytes":702},"src/app/layout.js":{"content":"import { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata = {\n  title: \"Frame Your Voice - Twibbonize App\",\n  description: \"Create and share frames that amplify your message, celebrate your cause, and inspire others to join in.\",\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n","size_bytes":687},"src/app/page.js":{"content":"// Server Component - renders instantly!\nimport Hero from \"../components/Hero\";\nimport Footer from \"../components/Footer\";\nimport InteractiveClient from \"../components/InteractiveClient\";\nimport AuthGate from \"../components/AuthGate\";\nimport ClientAuthProvider from \"../components/ClientAuthProvider\";\n\nexport default function Home() {\n  return (\n    <ClientAuthProvider>\n      <AuthGate>\n        <InteractiveClient>\n          <Hero />\n          <Footer />\n        </InteractiveClient>\n      </AuthGate>\n    </ClientAuthProvider>\n  );\n}\n","size_bytes":537},"src/components/Footer.js":{"content":"\"use client\";\n\nimport { Caveat } from \"next/font/google\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nconst countries = [\n  \"Afghanistan\", \"Albania\", \"Algeria\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\",\n  \"Bahrain\", \"Bangladesh\", \"Belarus\", \"Belgium\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Brazil\", \"Bulgaria\",\n  \"Cambodia\", \"Canada\", \"Chile\", \"China\", \"Colombia\", \"Croatia\", \"Czech Republic\",\n  \"Denmark\", \"Ecuador\", \"Egypt\", \"Estonia\", \"Ethiopia\",\n  \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\",\n  \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\",\n  \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kuwait\",\n  \"Latvia\", \"Lebanon\", \"Lithuania\", \"Malaysia\", \"Mexico\", \"Morocco\",\n  \"Netherlands\", \"New Zealand\", \"Nigeria\", \"Norway\",\n  \"Pakistan\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\",\n  \"Romania\", \"Russia\", \"Saudi Arabia\", \"Serbia\", \"Singapore\", \"Slovakia\", \"Slovenia\", \n  \"South Africa\", \"South Korea\", \"Spain\", \"Sri Lanka\", \"Sweden\", \"Switzerland\",\n  \"Thailand\", \"Turkey\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\",\n  \"Uruguay\", \"Venezuela\", \"Vietnam\"\n];\n\nexport default function Footer() {\n  const [selectedCountry, setSelectedCountry] = useState(\"United States\");\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const dropdownRef = useRef(null);\n\n  const filteredCountries = countries.filter(country => \n    country.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Move selected country to top of filtered list\n  const sortedCountries = [\n    ...filteredCountries.filter(country => country === selectedCountry),\n    ...filteredCountries.filter(country => country !== selectedCountry)\n  ];\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsDropdownOpen(false);\n        setSearchTerm(\"\");\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleCountrySelect = (country) => {\n    setSelectedCountry(country);\n    setIsDropdownOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <footer className=\"bg-white text-black\">\n      {/* Main Footer Section */}\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8\">\n          \n          {/* Brand and App Downloads */}\n          <div className=\"lg:col-span-2\">\n            <div className={`${caveat.className} text-3xl font-bold text-emerald-700 mb-6`}>\n              Frame\n            </div>\n            \n            {/* App Download Buttons */}\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600 mb-3\">Download our app:</p>\n              <div className=\"flex flex-row gap-2\">\n                <button className=\"flex items-center px-2 py-1.5 bg-black text-white rounded-md hover:bg-gray-800 transition-colors duration-200 flex-1\">\n                  <svg className=\"w-4 h-4 mr-1.5 flex-shrink-0\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.61 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                  </svg>\n                  <div className=\"text-left min-w-0\">\n                    <div className=\"text-xs text-gray-300\">GET IT ON</div>\n                    <div className=\"text-xs font-semibold truncate\">Google Play</div>\n                  </div>\n                </button>\n                \n                <button className=\"flex items-center px-2 py-1.5 bg-black text-white rounded-md hover:bg-gray-800 transition-colors duration-200 flex-1\">\n                  <svg className=\"w-4 h-4 mr-1.5 flex-shrink-0\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M18.71,19.5C17.88,20.74 17,21.95 15.66,21.97C14.32,22 13.89,21.18 12.37,21.18C10.84,21.18 10.37,21.95 9.1,22C7.79,22.05 6.8,20.68 5.96,19.47C4.25,17 2.94,12.45 4.7,9.39C5.57,7.87 7.13,6.91 8.82,6.88C10.1,6.86 11.32,7.75 12.11,7.75C12.89,7.75 14.37,6.68 15.92,6.84C16.57,6.87 18.39,7.1 19.56,8.82C19.47,8.88 17.39,10.1 17.41,12.63C17.44,15.65 20.06,16.66 20.09,16.67C20.06,16.74 19.67,18.11 18.71,19.5M13,3.5C13.73,2.67 14.94,2.04 15.94,2C16.07,3.17 15.6,4.35 14.9,5.19C14.21,6.04 13.07,6.7 11.95,6.61C11.8,5.46 12.36,4.26 13,3.5Z\"/>\n                  </svg>\n                  <div className=\"text-left min-w-0\">\n                    <div className=\"text-xs text-gray-300\">Download on the</div>\n                    <div className=\"text-xs font-semibold truncate\">App Store</div>\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            {/* Custom Country Dropdown */}\n            <div className=\"w-full sm:w-auto relative\" ref={dropdownRef}>\n              <button\n                onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n                className=\"w-full sm:w-64 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-black text-sm cursor-pointer bg-white text-left flex justify-between items-center\"\n              >\n                <span className=\"truncate\">\n                  {selectedCountry || \"Choose country (or region)\"}\n                </span>\n                <svg \n                  className={`w-4 h-4 transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`} \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </button>\n\n              {isDropdownOpen && (\n                <div className=\"absolute top-full left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-50 max-h-64 overflow-hidden\">\n                  {/* Search Input */}\n                  <div className=\"p-2 border-b border-gray-200\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search countries...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black focus:border-black\"\n                    />\n                  </div>\n                  \n                  {/* Country List */}\n                  <div className=\"max-h-48 overflow-y-auto\">\n                    {sortedCountries.length === 0 ? (\n                      <div className=\"px-3 py-2 text-sm text-gray-500\">No countries found</div>\n                    ) : (\n                      sortedCountries.map((country) => (\n                        <button\n                          key={country}\n                          onClick={() => handleCountrySelect(country)}\n                          className={`w-full px-3 py-2 text-left text-sm hover:bg-gray-50 transition-colors duration-150 ${\n                            country === selectedCountry \n                              ? 'bg-yellow-400 text-black font-medium' \n                              : 'text-gray-700'\n                          }`}\n                        >\n                          {country}\n                        </button>\n                      ))\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Discover Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Discover</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Explore</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Leaderboard</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Pricing</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Help Center</a></li>\n            </ul>\n          </div>\n\n          {/* Resources Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Resources</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">For Creators</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">What is a Twibbon?</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Use Cases</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Testimonials</a></li>\n            </ul>\n          </div>\n\n          {/* Company Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Company</h4>\n            <ul className=\"space-y-2 mb-6\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">About</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Blog</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Media Assets</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Contact Us</a></li>\n            </ul>\n\n            {/* Join Us - Social Media */}\n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-4\">Join Us</h4>\n              <div className=\"flex gap-3\">\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.097.118.112.22.083.402-.09.353-.293 1.178-.334 1.345-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.75-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24.009c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001 12.017.001z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                  </svg>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trademark/Legal Section */}\n      <div className=\"border-t border-gray-200\">\n        <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-sm text-gray-600 mb-4 md:mb-0\">\n              © 2024 Frame. All rights reserved.\n            </div>\n            <div className=\"flex flex-wrap gap-6 text-sm\">\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Privacy Policy</a>\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Terms & Conditions</a>\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Cookie Policy</a>\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Site Map</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":14717},"src/components/Header.js":{"content":"\"use client\";\n\nimport { Caveat } from \"next/font/google\";\nimport { useState } from \"react\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function Header({ isMenuOpen, setIsMenuOpen }) {\n  const handleSearch = () => {\n    // Search functionality can be implemented here\n    console.log('Search clicked');\n  };\n\n  return (\n    <header className=\"bg-yellow-400 text-black py-4 sm:py-5 md:py-6 border-0 shadow-none relative z-40\">\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 flex items-center justify-between\">\n        <a \n          href=\"/\" \n          className={`${caveat.className} text-2xl sm:text-3xl md:text-4xl font-bold text-emerald-700 hover:text-emerald-800 transition-colors duration-200`}\n        >\n          Frame\n        </a>\n        <div className=\"flex-1 max-w-xs mx-4 relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"w-full px-4 py-3 pr-12 rounded-full bg-white text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-700 text-base\"\n          />\n          <button \n            onClick={handleSearch}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 cursor-pointer hover:text-emerald-700 transition-colors duration-200\"\n          >\n            <svg \n              className=\"w-5 h-5 text-gray-500\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" \n              />\n            </svg>\n          </button>\n        </div>\n        <div className=\"relative\">\n          <button\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            className=\"p-2 rounded-full bg-white hover:bg-gray-100 transition-colors duration-200 relative z-50\"\n          >\n            <svg \n              className=\"w-6 h-6 text-black\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d={isMenuOpen ? \"M6 18L18 6M6 6l12 12\" : \"M4 6h16M4 12h16M4 18h16\"}\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2500},"src/components/Hero.js":{"content":"import { Caveat } from \"next/font/google\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function Hero() {\n  return (\n    <section className=\"bg-yellow-400 text-black py-12 sm:py-16 md:py-24 border-0 shadow-none -mt-px\">\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 text-center\">\n        <h1 className={`${caveat.className} text-6xl sm:text-7xl md:text-8xl font-bold text-emerald-700`}>\n          Frame Your Voice\n        </h1>\n        <p className=\"mt-3 sm:mt-4 md:mt-6 text-sm sm:text-base md:text-lg opacity-90\">\n          Create and share frames that amplify your message, celebrate your cause, and inspire others to join in.\n        </p>\n        <div className=\"mt-6 sm:mt-8 flex flex-row items-center justify-center gap-4 sm:gap-5 flex-nowrap\">\n          <a\n            href=\"#\"\n            className=\"inline-flex items-center justify-center rounded-full bg-emerald-700 px-7 py-4 text-white text-base sm:text-lg font-semibold whitespace-nowrap hover-zoom\"\n          >\n            Create Frame\n          </a>\n          <a\n            href=\"#\"\n            className=\"inline-flex items-center justify-center rounded-full border-2 border-emerald-700 px-7 py-4 text-emerald-800 text-base sm:text-lg font-semibold whitespace-nowrap hover-zoom\"\n          >\n            Use Frame\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":1406},"src/hooks/useAuth.js":{"content":"\"use client\";\n\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { \n  signInWithPopup, \n  GoogleAuthProvider, \n  signOut,\n  onAuthStateChanged,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  updateProfile,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  reload\n} from 'firebase/auth';\nimport { auth } from '../lib/firebase';\nimport { createUserProfile } from '../lib/firestore';\n\n// Create Auth Context\nconst AuthContext = createContext(null);\n\n// Google Auth Provider\nconst googleProvider = new GoogleAuthProvider();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    // Set mounted to true to prevent hydration mismatches\n    setMounted(true);\n    \n    // Listen for authentication state changes\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Auth state changed:', user ? user.email : 'No user');\n      }\n      if (user) {\n        if (process.env.NODE_ENV === 'development') {\n          console.log('Email verified:', user.emailVerified);\n        }\n        // Create user profile in Firestore if it doesn't exist\n        try {\n          await createUserProfile(user);\n        } catch (error) {\n          if (process.env.NODE_ENV === 'development') {\n            console.error('Error creating user profile:', error);\n          }\n        }\n      }\n      setUser(user);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // Don't block rendering with loading screen - let components handle their own loading states\n\n  const signInWithGoogle = async () => {\n    try {\n      setLoading(true);\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Starting Google sign in...');\n      }\n      \n      const result = await signInWithPopup(auth, googleProvider);\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Google sign in successful:', result.user.email);\n      }\n      \n      // User state will be automatically updated via onAuthStateChanged\n      setLoading(false);\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Google sign in error:', error.code, error.message);\n      }\n      alert(`Authentication error: ${error.code} - ${error.message}`);\n      setLoading(false);\n    }\n  };\n\n  const signUpWithEmail = async (email, password, fullName) => {\n    try {\n      setLoading(true);\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Update user profile with full name\n      if (fullName) {\n        await updateProfile(result.user, {\n          displayName: fullName\n        });\n      }\n      \n      // Send email verification\n      await sendEmailVerification(result.user);\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Email sign up successful, verification email sent to:', result.user.email);\n      }\n      \n      setLoading(false);\n      return { success: true, requiresVerification: true };\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Email sign up error:', error.code, error.message);\n      }\n      setLoading(false);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const signInWithEmail = async (email, password) => {\n    try {\n      setLoading(true);\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Email sign in successful:', result.user.email);\n      }\n      setLoading(false);\n      return { success: true };\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Email sign in error:', error.code, error.message);\n      }\n      setLoading(false);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Sign-out error:', error);\n    }\n  };\n\n  // Send email verification\n  const sendVerificationEmail = async () => {\n    try {\n      if (auth.currentUser) {\n        await sendEmailVerification(auth.currentUser);\n        console.log('Verification email sent');\n        return { success: true };\n      }\n      return { success: false, error: 'No user signed in' };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Check email verification status (reload user)\n  const checkEmailVerification = async () => {\n    try {\n      if (auth.currentUser) {\n        await reload(auth.currentUser);\n        console.log('User reloaded, verification status:', auth.currentUser.emailVerified);\n        return { verified: auth.currentUser.emailVerified };\n      }\n      return { verified: false };\n    } catch (error) {\n      console.error('Error checking verification status:', error);\n      return { verified: false };\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      setLoading(true);\n      \n      // Only log in development environment\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Attempting password reset');\n      }\n      \n      await sendPasswordResetEmail(auth, email);\n      setLoading(false);\n      \n      // Always return success message for security (prevents user enumeration)\n      return { \n        success: true, \n        type: 'success',\n        message: 'If an account exists with this email address, we\\'ve sent you a password reset link. Please check your inbox and follow the instructions.' \n      };\n    } catch (error) {\n      // Log detailed errors only in development\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Password reset error:', error.code);\n      }\n      \n      let errorMessage = 'Something went wrong. Please try again.';\n      \n      // Only show specific error for client-side validation issues\n      if (error.code === 'auth/invalid-email') {\n        errorMessage = 'Please enter a valid email address.';\n      } else if (error.code === 'auth/too-many-requests') {\n        errorMessage = 'Too many requests. Please wait a moment before trying again.';\n      }\n      // Note: Don't reveal 'user-not-found' to prevent user enumeration\n      \n      setLoading(false);\n      return { success: false, type: 'error', error: errorMessage };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    mounted,\n    signInWithGoogle,\n    signUpWithEmail,\n    signInWithEmail,\n    sendVerificationEmail,\n    checkEmailVerification,\n    forgotPassword,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","size_bytes":7106},"src/lib/firebase.js":{"content":"// Firebase configuration based on firebase_barebones_javascript integration\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: `${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: `${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}.appspot.com`,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase - prevent duplicate initialization during HMR\nconst app = getApps().length ? getApp() : initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\nexport default app;","size_bytes":954},"src/lib/firestore.js":{"content":"// Firestore database operations for the Twibbonize app\nimport { \n  doc, \n  setDoc, \n  getDoc, \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  where, \n  orderBy, \n  limit,\n  serverTimestamp \n} from 'firebase/firestore';\nimport { db } from './firebase';\n\n// User Profile operations\nexport const createUserProfile = async (user) => {\n  if (!user) return;\n  \n  const userDocRef = doc(db, 'users', user.uid);\n  const userDoc = await getDoc(userDocRef);\n  \n  if (!userDoc.exists()) {\n    const { displayName, email, photoURL } = user;\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        photoURL,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        framesCreated: 0,\n        framesUsed: 0,\n      });\n    } catch (error) {\n      console.error('Error creating user profile:', error);\n    }\n  }\n  \n  return userDocRef;\n};\n\nexport const getUserProfile = async (userId) => {\n  if (!userId) return null;\n  \n  try {\n    const userDocRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userDocRef);\n    \n    if (userDoc.exists()) {\n      return { id: userDoc.id, ...userDoc.data() };\n    } else {\n      console.log('No user profile found');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error getting user profile:', error);\n    return null;\n  }\n};\n\n// Frame operations\nexport const createFrame = async (frameData, userId) => {\n  if (!userId) return null;\n  \n  try {\n    const frameRef = await addDoc(collection(db, 'frames'), {\n      ...frameData,\n      createdBy: userId,\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n      usageCount: 0,\n      isPublic: frameData?.isPublic ?? true,\n    });\n    \n    return frameRef.id;\n  } catch (error) {\n    console.error('Error creating frame:', error);\n    return null;\n  }\n};\n\nexport const getPublicFrames = async (limitCount = 10) => {\n  try {\n    const q = query(\n      collection(db, 'frames'),\n      where('isPublic', '==', true),\n      orderBy('createdAt', 'desc'),\n      limit(limitCount)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const frames = [];\n    \n    querySnapshot.forEach((doc) => {\n      frames.push({ id: doc.id, ...doc.data() });\n    });\n    \n    return frames;\n  } catch (error) {\n    console.error('Error getting public frames:', error);\n    return [];\n  }\n};\n\nexport const getUserFrames = async (userId) => {\n  if (!userId) return [];\n  \n  try {\n    const q = query(\n      collection(db, 'frames'),\n      where('createdBy', '==', userId),\n      orderBy('createdAt', 'desc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const frames = [];\n    \n    querySnapshot.forEach((doc) => {\n      frames.push({ id: doc.id, ...doc.data() });\n    });\n    \n    return frames;\n  } catch (error) {\n    console.error('Error getting user frames:', error);\n    return [];\n  }\n};","size_bytes":2869},"src/components/AuthGate.js":{"content":"'use client';\n\nimport { useAuth } from '../hooks/useAuth';\nimport EmailVerification from './EmailVerification';\n\nexport default function AuthGate({ children }) {\n  const { user, loading } = useAuth();\n\n  // Show email verification screen for unverified users\n  if (user && !loading && !user.emailVerified) {\n    return <EmailVerification />;\n  }\n\n  return children;\n}","size_bytes":367},"src/components/AuthModal.js":{"content":"\"use client\";\n\nimport { useAuth } from \"../hooks/useAuth\";\n\nexport default function AuthModal({ \n  activeModal, \n  closeModal, \n  authError,\n  authStatus, \n  setActiveModal, \n  handleEmailSignIn, \n  handleEmailSignUp, \n  handleGoogleSignIn,\n  handleForgotPassword \n}) {\n  const { loading } = useAuth();\n\n  if (!activeModal) return null;\n\n  return (\n    <>\n      {/* Sign In Modal */}\n      {activeModal === 'signin' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Welcome Back!</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">Sign in to your account</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Email Sign In Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleEmailSignIn}>\n                    {authError && (\n                      <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\">\n                        {authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Password</label>\n                      <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                      <div className=\"text-right mt-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setActiveModal('forgotpassword')}\n                          className=\"text-sm text-emerald-700 hover:text-emerald-800 font-medium\"\n                        >\n                          Forgot Password?\n                        </button>\n                      </div>\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Signing In...' : 'Sign In'}\n                    </button>\n                  </form>\n\n                  {/* Divider */}\n                  <div className=\"relative mb-6\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-200\"></div>\n                    </div>\n                    <div className=\"relative flex justify-center text-sm\">\n                      <span className=\"bg-white px-4 text-gray-500\">or</span>\n                    </div>\n                  </div>\n\n                  {/* Google Sign In */}\n                  <div className=\"text-center mb-6\">\n                    <button\n                      onClick={handleGoogleSignIn}\n                      disabled={loading}\n                      className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 text-gray-700 text-sm sm:text-base\"\n                    >\n                      <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      {loading ? 'Signing In...' : 'Continue with Google'}\n                    </button>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Don't have an account? \n                      <button \n                        onClick={() => setActiveModal('signup')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign Up\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Sign Up Modal */}\n      {activeModal === 'signup' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Join Frame!</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">Create your account to get started</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Email Sign Up Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleEmailSignUp}>\n                    {authError && (\n                      <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\">\n                        {authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Name</label>\n                      <input\n                        type=\"text\"\n                        name=\"fullName\"\n                        required\n                        placeholder=\"Enter your name\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Password</label>\n                      <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        placeholder=\"Create a password\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Creating Account...' : 'Create Account'}\n                    </button>\n                  </form>\n\n                  {/* Divider */}\n                  <div className=\"relative mb-6\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-200\"></div>\n                    </div>\n                    <div className=\"relative flex justify-center text-sm\">\n                      <span className=\"bg-white px-4 text-gray-500\">or</span>\n                    </div>\n                  </div>\n\n                  {/* Google Sign Up */}\n                  <div className=\"text-center mb-4\">\n                    <button\n                      onClick={handleGoogleSignIn}\n                      disabled={loading}\n                      className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 text-gray-700 text-sm sm:text-base\"\n                    >\n                      <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      {loading ? 'Creating Account...' : 'Continue with Google'}\n                    </button>\n                  </div>\n\n                  <div className=\"text-center mb-4\">\n                    <p className=\"text-xs text-gray-500 leading-relaxed\">\n                      By signing up, you agree to our Terms of Service and Privacy Policy\n                    </p>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Already have an account? \n                      <button \n                        onClick={() => setActiveModal('signin')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign In\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Forgot Password Modal */}\n      {activeModal === 'forgotpassword' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Reset Password</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">We'll send you a reset link</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Forgot Password Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleForgotPassword}>\n                    {(authError || authStatus) && (\n                      <div className={`text-sm text-center p-2 rounded-lg ${\n                        authStatus?.type === 'success' \n                          ? 'text-green-700 bg-green-50' \n                          : 'text-red-600 bg-red-50'\n                      }`}>\n                        {authStatus?.message || authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email Address</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email address\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Sending...' : 'Send Reset Link'}\n                    </button>\n                  </form>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Remember your password? \n                      <button \n                        onClick={() => setActiveModal('signin')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign In\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}","size_bytes":17112},"src/components/ClientAuthProvider.js":{"content":"'use client';\n\nimport { AuthProvider } from '../hooks/useAuth';\n\nexport default function ClientAuthProvider({ children }) {\n  return (\n    <AuthProvider>\n      {children}\n    </AuthProvider>\n  );\n}","size_bytes":197},"src/components/EmailVerification.js":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\nexport default function EmailVerification() {\n  const { user, sendVerificationEmail, checkEmailVerification } = useAuth();\n  const [isResending, setIsResending] = useState(false);\n  const [isChecking, setIsChecking] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const handleResendVerification = async () => {\n    setIsResending(true);\n    setMessage('');\n    \n    const result = await sendVerificationEmail();\n    if (result.success) {\n      setMessage('Verification email sent! Please check your inbox.');\n    } else {\n      setMessage(`Error: ${result.error}`);\n    }\n    \n    setIsResending(false);\n  };\n\n  const handleCheckVerification = async () => {\n    setIsChecking(true);\n    setMessage('');\n    \n    const result = await checkEmailVerification();\n    if (result.verified) {\n      setMessage('Email verified! The page will refresh automatically.');\n      // The auth state will update automatically and component will re-render\n      setTimeout(() => {\n        window.location.reload();\n      }, 1500);\n    } else {\n      setMessage('Email not yet verified. Please check your email and click the verification link.');\n    }\n    \n    setIsChecking(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-yellow-50 to-emerald-50 p-4\">\n      <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600\">\n        {/* Header */}\n        <div className=\"bg-yellow-400 rounded-t-xl p-6 text-center\">\n          <div className=\"w-16 h-16 bg-emerald-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Verify Your Email</h2>\n          <p className=\"text-sm sm:text-base text-gray-700 mt-2\">\n            Almost there! Check your email to complete registration.\n          </p>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <p className=\"text-gray-700 mb-2\">\n              We sent a verification email to:\n            </p>\n            <p className=\"font-medium text-emerald-700 text-lg\">\n              {user?.email}\n            </p>\n          </div>\n\n          <div className=\"bg-emerald-50 rounded-lg p-4 mb-6\">\n            <h3 className=\"font-medium text-emerald-800 mb-2\">Next steps:</h3>\n            <ol className=\"text-sm text-emerald-700 space-y-1\">\n              <li>1. Check your email inbox (and spam folder)</li>\n              <li>2. Click the verification link in the email</li>\n              <li>3. Return here and click \"I've Verified My Email\"</li>\n            </ol>\n          </div>\n\n          {/* Message Display */}\n          {message && (\n            <div className={`text-sm text-center p-3 rounded-lg mb-4 ${\n              message.includes('Error') \n                ? 'bg-red-50 text-red-700' \n                : 'bg-emerald-50 text-emerald-700'\n            }`}>\n              {message}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <button\n              onClick={handleCheckVerification}\n              disabled={isChecking}\n              className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-3 px-4 font-medium transition-all duration-200 hover-zoom disabled:opacity-50\"\n            >\n              {isChecking ? 'Checking...' : \"I've Verified My Email\"}\n            </button>\n\n            <button\n              onClick={handleResendVerification}\n              disabled={isResending}\n              className=\"w-full bg-white border-2 border-emerald-600 text-emerald-700 hover:bg-emerald-50 rounded-full py-3 px-4 font-medium transition-all duration-200 hover-zoom disabled:opacity-50\"\n            >\n              {isResending ? 'Sending...' : 'Resend Verification Email'}\n            </button>\n          </div>\n\n          <div className=\"text-center mt-6\">\n            <p className=\"text-xs text-gray-500\">\n              Didn't receive the email? Check your spam folder or try resending.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4589},"src/components/InteractiveClient.js":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { getFirebaseErrorMessage } from '../utils/validation';\nimport { signInSchema, signUpSchema, forgotPasswordSchema, getValidationError } from '../utils/schemas';\nimport Header from './Header';\nimport MobileMenu from './MobileMenu';\nimport SignInModal from './auth/SignInModal';\nimport SignUpModal from './auth/SignUpModal';\nimport ForgotPasswordModal from './auth/ForgotPasswordModal';\n\nexport default function InteractiveClient({ children }) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [activeModal, setActiveModal] = useState(null); // 'signin', 'signup', or 'forgotpassword'\n  const [authError, setAuthError] = useState('');\n  const [authSuccessMessage, setAuthSuccessMessage] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { user, loading, signInWithGoogle, signUpWithEmail, signInWithEmail, forgotPassword, logout } = useAuth();\n\n  const openSignInModal = () => {\n    setActiveModal('signin');\n    clearAuthMessages();\n  };\n  \n  const openSignUpModal = () => {\n    setActiveModal('signup');\n    clearAuthMessages();\n  };\n  \n  const openForgotPasswordModal = () => {\n    setActiveModal('forgotpassword');\n    clearAuthMessages();\n  };\n  \n  const closeModal = () => {\n    setActiveModal(null);\n    clearAuthMessages();\n    setIsSubmitting(false);\n  };\n\n  const clearAuthMessages = () => {\n    setAuthError('');\n    setAuthSuccessMessage('');\n  };\n\n  const handleGoogleSignIn = async () => {\n    if (isSubmitting) return;\n    \n    try {\n      setIsSubmitting(true);\n      clearAuthMessages();\n      await signInWithGoogle();\n      closeModal();\n    } catch (error) {\n      setAuthError(getFirebaseErrorMessage(error.code) || 'Something went wrong. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleEmailSignIn = async (e) => {\n    e.preventDefault();\n    if (isSubmitting) return;\n    \n    try {\n      setIsSubmitting(true);\n      clearAuthMessages();\n      \n      const formData = new FormData(e.target);\n      const rawData = {\n        email: formData.get('email'),\n        password: formData.get('password')\n      };\n      \n      // Client-side validation with Zod\n      const validationResult = signInSchema.safeParse(rawData);\n      if (!validationResult.success) {\n        setAuthError(getValidationError(validationResult));\n        return;\n      }\n      \n      const { email, password } = validationResult.data;\n      \n      const result = await signInWithEmail(email, password);\n      if (result.success) {\n        closeModal();\n      } else {\n        setAuthError(getFirebaseErrorMessage(result.error) || 'Something went wrong. Please try again.');\n      }\n    } catch (error) {\n      setAuthError(getFirebaseErrorMessage(error.code) || 'An unexpected error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleEmailSignUp = async (e) => {\n    e.preventDefault();\n    if (isSubmitting) return;\n    \n    try {\n      setIsSubmitting(true);\n      clearAuthMessages();\n      \n      const formData = new FormData(e.target);\n      const rawData = {\n        fullName: formData.get('fullName'),\n        email: formData.get('email'),\n        password: formData.get('password')\n      };\n      \n      // Client-side validation with Zod\n      const validationResult = signUpSchema.safeParse(rawData);\n      if (!validationResult.success) {\n        setAuthError(getValidationError(validationResult));\n        return;\n      }\n      \n      const { fullName, email, password } = validationResult.data;\n      \n      const result = await signUpWithEmail(email, password, fullName);\n      if (result.success) {\n        if (result.requiresVerification) {\n          setAuthSuccessMessage('Account created successfully! Please check your email and click the verification link to complete your registration.');\n          setTimeout(() => {\n            closeModal();\n          }, 4000);\n        } else {\n          closeModal();\n        }\n      } else {\n        setAuthError(getFirebaseErrorMessage(result.error) || 'Something went wrong. Please try again.');\n      }\n    } catch (error) {\n      setAuthError(getFirebaseErrorMessage(error.code) || 'An unexpected error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleForgotPassword = async (e) => {\n    e.preventDefault();\n    if (isSubmitting) return;\n    \n    try {\n      setIsSubmitting(true);\n      clearAuthMessages();\n      \n      const formData = new FormData(e.target);\n      const rawData = {\n        email: formData.get('email')\n      };\n      \n      // Client-side validation with Zod\n      const validationResult = forgotPasswordSchema.safeParse(rawData);\n      if (!validationResult.success) {\n        setAuthError(getValidationError(validationResult));\n        return;\n      }\n      \n      const { email } = validationResult.data;\n      \n      const result = await forgotPassword(email);\n      if (result.success) {\n        setAuthSuccessMessage(result.message);\n        setTimeout(() => {\n          closeModal();\n        }, 5000);\n      } else {\n        setAuthError(getFirebaseErrorMessage(result.error) || 'Something went wrong. Please try again.');\n      }\n    } catch (error) {\n      setAuthError(getFirebaseErrorMessage(error.code) || 'An unexpected error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      {/* Main Content with blur effect */}\n      <div className={`min-h-screen flex flex-col transition-all duration-300 ${\n        isMenuOpen ? 'blur-sm' : ''\n      }`}>\n        <Header isMenuOpen={isMenuOpen} setIsMenuOpen={setIsMenuOpen} />\n        <main className=\"flex-1\">\n          {children}\n        </main>\n      </div>\n\n      {/* Mobile Menu Component */}\n      <MobileMenu \n        isMenuOpen={isMenuOpen}\n        setIsMenuOpen={setIsMenuOpen}\n        openSignInModal={openSignInModal}\n        openSignUpModal={openSignUpModal}\n      />\n\n      {/* Auth Modal Components */}\n      <SignInModal \n        isOpen={activeModal === 'signin'}\n        onClose={closeModal}\n        error={authError}\n        loading={isSubmitting || loading}\n        onEmailSignIn={handleEmailSignIn}\n        onGoogleSignIn={handleGoogleSignIn}\n        onSwitchToSignUp={openSignUpModal}\n        onSwitchToForgotPassword={openForgotPasswordModal}\n      />\n      \n      <SignUpModal \n        isOpen={activeModal === 'signup'}\n        onClose={closeModal}\n        error={authError || (!authError && authSuccessMessage ? '' : authError)}\n        loading={isSubmitting || loading}\n        onEmailSignUp={handleEmailSignUp}\n        onGoogleSignIn={handleGoogleSignIn}\n        onSwitchToSignIn={openSignInModal}\n      />\n      \n      <ForgotPasswordModal \n        isOpen={activeModal === 'forgotpassword'}\n        onClose={closeModal}\n        error={authError}\n        successMessage={authSuccessMessage}\n        loading={isSubmitting || loading}\n        onForgotPassword={handleForgotPassword}\n        onSwitchToSignIn={openSignInModal}\n      />\n    </div>\n  );\n}","size_bytes":7160},"src/components/MobileMenu.js":{"content":"\"use client\";\n\nimport { useAuth } from \"../hooks/useAuth\";\n\nexport default function MobileMenu({ \n  isMenuOpen, \n  setIsMenuOpen, \n  openSignInModal, \n  openSignUpModal \n}) {\n  const { user, loading, logout } = useAuth();\n\n  return (\n    <>\n      {/* Invisible Overlay for click-outside to close menu */}\n      {isMenuOpen && (\n        <div \n          className=\"fixed inset-0 z-30\"\n          onClick={() => setIsMenuOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`fixed top-0 right-0 h-full w-80 bg-white shadow-2xl transform transition-transform duration-300 ease-in-out z-40 ${\n        isMenuOpen ? 'translate-x-0' : 'translate-x-full'\n      }`}>\n        {/* Close button */}\n        <div className=\"absolute top-4 right-4\">\n          <button\n            onClick={() => setIsMenuOpen(false)}\n            className=\"p-2 rounded-full hover:bg-gray-100 transition-colors duration-200 cursor-pointer\"\n          >\n            <svg \n              className=\"w-6 h-6 text-gray-600\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        <div className=\"p-6 pt-20\">\n          {/* Welcome message for authenticated users */}\n          {user && (\n            <div className=\"mb-6 pb-4 border-b border-gray-100\">\n              <div className=\"text-lg font-medium text-gray-800\">\n                Welcome {user.displayName || user.email}\n              </div>\n            </div>\n          )}\n          <nav className=\"space-y-0\">\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Create Frame\n            </a>\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Use Frame\n            </a>\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Explore\n            </a>\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Leaderboard\n            </a>\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Remove Ads\n            </a>\n            <a \n              href=\"#\" \n              className=\"block py-3 px-4 text-lg font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n            >\n              Help Center\n            </a>\n          </nav>\n          \n          {/* Authentication buttons */}\n          <div className=\"flex gap-3 mt-6\">\n            {user ? (\n              <>\n                <button \n                  onClick={logout}\n                  className=\"w-full py-2 px-4 text-sm font-medium text-emerald-700 border border-emerald-700 rounded-full hover:bg-emerald-50 transition-colors duration-200 cursor-pointer hover-zoom\"\n                >\n                  Sign Out\n                </button>\n              </>\n            ) : (\n              <>\n                <button \n                  onClick={openSignInModal}\n                  disabled={loading}\n                  className=\"flex-1 py-2 px-4 text-sm font-medium text-emerald-700 border border-emerald-700 rounded-full hover:bg-emerald-50 transition-colors duration-200 cursor-pointer hover-zoom disabled:opacity-50\"\n                >\n                  {loading ? 'Loading...' : 'Sign In'}\n                </button>\n                <button \n                  onClick={openSignUpModal}\n                  disabled={loading}\n                  className=\"flex-1 py-2 px-4 text-sm font-medium text-white bg-emerald-700 rounded-full hover:bg-emerald-800 transition-colors duration-200 cursor-pointer hover-zoom disabled:opacity-50\"\n                >\n                  {loading ? 'Loading...' : 'Sign Up'}\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":4765},"src/hooks/useFocusTrap.js":{"content":"// Custom hook for managing focus trap in modals\n\nimport { useEffect, useRef } from 'react';\n\nexport const useFocusTrap = (isOpen) => {\n  const modalRef = useRef(null);\n  const previousActiveElementRef = useRef(null);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Store the currently focused element\n    previousActiveElementRef.current = document.activeElement;\n\n    // Find all focusable elements in the modal\n    const getFocusableElements = () => {\n      if (!modalRef.current) return [];\n      \n      const focusableSelectors = [\n        'button:not([disabled])',\n        'input:not([disabled])',\n        'textarea:not([disabled])',\n        'select:not([disabled])',\n        'a[href]',\n        '[tabindex]:not([tabindex=\"-1\"])'\n      ].join(', ');\n      \n      return Array.from(modalRef.current.querySelectorAll(focusableSelectors));\n    };\n\n    // Focus the first focusable element\n    const focusFirstElement = () => {\n      const focusableElements = getFocusableElements();\n      if (focusableElements.length > 0) {\n        focusableElements[0].focus();\n      }\n    };\n\n    // Handle tab key navigation\n    const handleKeyDown = (event) => {\n      if (event.key === 'Tab') {\n        const focusableElements = getFocusableElements();\n        if (focusableElements.length === 0) return;\n\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        if (event.shiftKey) {\n          // Shift + Tab: move focus to last element if currently on first\n          if (document.activeElement === firstElement) {\n            event.preventDefault();\n            lastElement.focus();\n          }\n        } else {\n          // Tab: move focus to first element if currently on last\n          if (document.activeElement === lastElement) {\n            event.preventDefault();\n            firstElement.focus();\n          }\n        }\n      }\n    };\n\n    // Set initial focus after a brief delay to ensure DOM is ready\n    const timeoutId = setTimeout(focusFirstElement, 100);\n\n    // Add event listener for tab navigation\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Disable body scroll\n    document.body.style.overflow = 'hidden';\n\n    // Cleanup function\n    return () => {\n      clearTimeout(timeoutId);\n      document.removeEventListener('keydown', handleKeyDown);\n      \n      // Restore body scroll\n      document.body.style.overflow = '';\n      \n      // Restore focus to previous element\n      if (previousActiveElementRef.current && typeof previousActiveElementRef.current.focus === 'function') {\n        previousActiveElementRef.current.focus();\n      }\n    };\n  }, [isOpen]);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeKey = (event) => {\n      if (event.key === 'Escape') {\n        // This should be handled by the parent component\n        // We'll dispatch a custom event that the modal can listen to\n        const escapeEvent = new CustomEvent('modal-escape');\n        document.dispatchEvent(escapeEvent);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscapeKey);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isOpen]);\n\n  return modalRef;\n};","size_bytes":3265},"src/utils/schemas.js":{"content":"// Zod validation schemas for authentication forms\n\nimport { z } from 'zod';\n\n// Common email schema with normalization\nexport const emailSchema = z\n  .string()\n  .email('Please enter a valid email address')\n  .transform((email) => email.toLowerCase().trim());\n\n// Strong password schema for sign-up\nexport const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters long')\n  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n  .regex(/\\d/, 'Password must contain at least one number')\n  .regex(/[^A-Za-z0-9]/, 'Password must contain at least one special character')\n  .refine(\n    (password) => {\n      // Check for common weak patterns\n      const commonPatterns = [\n        /(.)\\1{2,}/, // Repeated characters (aaa, 111, etc.)\n        /123456|654321|qwerty|password|admin/i, // Common sequences\n        /^[0-9]+$/, // Only numbers\n        /^[a-zA-Z]+$/, // Only letters\n      ];\n      return !commonPatterns.some(pattern => pattern.test(password));\n    },\n    'Password contains common patterns. Please choose a more secure password'\n  );\n\n// Simplified password schema for sign-in (just check if not empty)\nexport const signInPasswordSchema = z\n  .string()\n  .min(1, 'Password is required');\n\n// Full name schema\nexport const fullNameSchema = z\n  .string()\n  .min(2, 'Full name must be at least 2 characters long')\n  .max(50, 'Full name must be less than 50 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Full name can only contain letters, spaces, hyphens, and apostrophes')\n  .transform((name) => name.trim());\n\n// Sign In Form Schema\nexport const signInSchema = z.object({\n  email: emailSchema,\n  password: signInPasswordSchema,\n});\n\n// Sign Up Form Schema\nexport const signUpSchema = z.object({\n  fullName: fullNameSchema,\n  email: emailSchema,\n  password: passwordSchema,\n});\n\n// Forgot Password Form Schema\nexport const forgotPasswordSchema = z.object({\n  email: emailSchema,\n});\n\n// Helper function to extract first validation error message\nexport const getValidationError = (result) => {\n  if (result.success) return null;\n  \n  const firstError = result.error.errors[0];\n  return firstError?.message || 'Validation failed';\n};","size_bytes":2254},"src/utils/validation.js":{"content":"// Validation utilities for authentication forms\n\nexport const validateEmail = (email) => {\n  if (!email) return 'Email is required';\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) return 'Please enter a valid email address';\n  return null;\n};\n\nexport const validatePassword = (password, isSignUp = false) => {\n  if (!password) return 'Password is required';\n  if (isSignUp && password.length < 8) return 'Password must be at least 8 characters long';\n  if (isSignUp && !/(?=.*[a-z])(?=.*[A-Z])/.test(password)) {\n    return 'Password must contain at least one uppercase and one lowercase letter';\n  }\n  return null;\n};\n\nexport const validateFullName = (fullName) => {\n  if (!fullName) return 'Full name is required';\n  if (fullName.trim().length < 2) return 'Full name must be at least 2 characters long';\n  if (fullName.length > 50) return 'Full name must be less than 50 characters';\n  return null;\n};\n\nexport const normalizeEmail = (email) => {\n  return email ? email.toLowerCase().trim() : '';\n};\n\n// Firebase error code to user-friendly message mapping (cleaned up duplicates)\nexport const getFirebaseErrorMessage = (errorCode) => {\n  const errorMessages = {\n    'auth/user-not-found': 'No account found with this email address',\n    'auth/wrong-password': 'Incorrect password',\n    'auth/invalid-email': 'Please enter a valid email address',\n    'auth/user-disabled': 'This account has been disabled',\n    'auth/email-already-in-use': 'An account with this email already exists',\n    'auth/operation-not-allowed': 'This sign-in method is not enabled',\n    'auth/weak-password': 'Password is too weak. Please choose a stronger password',\n    'auth/too-many-requests': 'Too many unsuccessful attempts. Please try again later',\n    'auth/network-request-failed': 'Network error. Please check your connection and try again',\n    'auth/invalid-credential': 'Invalid email or password',\n    'auth/account-exists-with-different-credential': 'An account already exists with this email but different sign-in method',\n    'auth/popup-closed-by-user': 'Sign-in cancelled',\n    'auth/popup-blocked': 'Sign-in popup blocked. Please allow popups and try again',\n    'auth/invalid-verification-code': 'Invalid verification code',\n    'auth/invalid-verification-id': 'Invalid verification ID',\n    'auth/code-expired': 'Verification code expired. Please request a new one',\n    'auth/missing-verification-code': 'Please enter the verification code',\n    'auth/missing-verification-id': 'Verification ID is missing',\n    'auth/captcha-check-failed': 'Security verification failed. Please try again',\n    'auth/invalid-phone-number': 'Invalid phone number format',\n    'auth/missing-phone-number': 'Phone number is required',\n    'auth/quota-exceeded': 'Service quota exceeded. Please try again later',\n    'auth/app-deleted': 'This app has been deleted',\n    'auth/app-not-authorized': 'App is not authorized for this operation',\n    'auth/argument-error': 'Invalid arguments provided',\n    'auth/invalid-api-key': 'Invalid API key',\n    'auth/invalid-user-token': 'Your session has expired. Please sign in again',\n    'auth/invalid-tenant-id': 'Invalid tenant ID',\n    'auth/multi-factor-info-not-found': 'Multi-factor info not found',\n    'auth/multi-factor-auth-required': 'Multi-factor authentication required',\n    'auth/maximum-second-factor-count-exceeded': 'Maximum second factor count exceeded',\n    'auth/second-factor-already-in-use': 'Second factor already in use',\n    'auth/unsupported-first-factor': 'Unsupported first factor',\n    'auth/unverified-email': 'Email address not verified',\n    'auth/user-mismatch': 'User account mismatch',\n    'auth/requires-recent-login': 'This operation requires recent login. Please sign in again',\n    'auth/provider-already-linked': 'Provider already linked to this account',\n    'auth/no-auth-event': 'No authentication event found',\n    'auth/invalid-continue-uri': 'Invalid continue URL',\n    'auth/missing-continue-uri': 'Continue URL is required',\n    'auth/missing-ios-bundle-id': 'iOS bundle ID is required',\n    'auth/missing-android-pkg-name': 'Android package name is required',\n    'auth/unauthorized-continue-uri': 'Continue URL is not authorized',\n    'auth/invalid-dynamic-link-domain': 'Invalid dynamic link domain',\n    'auth/admin-restricted-operation': 'This operation is restricted to administrators',\n    'auth/already-initialized': 'Firebase already initialized',\n    'auth/app-not-installed': 'App is not installed',\n    'auth/cordova-not-ready': 'Cordova framework not ready',\n    'auth/cors-unsupported': 'CORS is not supported',\n    'auth/credential-already-in-use': 'Credential is already in use',\n    'auth/custom-token-mismatch': 'Custom token mismatch',\n    'auth/dependent-sdk-initialized-before-auth': 'SDK initialization error',\n    'auth/dynamic-link-not-activated': 'Dynamic link not activated',\n    'auth/email-change-needs-verification': 'Email change needs verification',\n    'auth/expired-action-code': 'Action code expired',\n    'auth/cancelled-popup-request': 'Sign-in cancelled',\n    'auth/internal-error': 'An internal error occurred. Please try again',\n    'auth/invalid-app-credential': 'Invalid app credential',\n    'auth/invalid-app-id': 'Invalid app ID',\n    'auth/invalid-auth-event': 'Invalid authentication event',\n    'auth/invalid-cert-hash': 'Invalid certificate hash',\n    'auth/invalid-message-payload': 'Invalid message payload',\n    'auth/invalid-multi-factor-session': 'Invalid multi-factor session',\n    'auth/invalid-oauth-client-id': 'Invalid OAuth client ID',\n    'auth/invalid-oauth-provider': 'Invalid OAuth provider',\n    'auth/invalid-action-code': 'Invalid action code',\n    'auth/unauthorized-domain': 'Domain is not authorized',\n    'auth/invalid-persistence-type': 'Invalid persistence type',\n    'auth/invalid-provider-id': 'Invalid provider ID',\n    'auth/invalid-recipient-email': 'Invalid recipient email',\n    'auth/invalid-sender': 'Invalid sender',\n    'auth/missing-app-credential': 'App credential missing',\n    'auth/auth-domain-config-required': 'Auth domain configuration required',\n    'auth/missing-iframe-start': 'Missing iframe start',\n    'auth/missing-or-invalid-nonce': 'Missing or invalid nonce',\n    'auth/null-user': 'User is null',\n    'auth/operation-not-supported-in-this-environment': 'Operation not supported in this environment',\n    'auth/redirect-cancelled-by-user': 'Redirect cancelled by user',\n    'auth/redirect-operation-pending': 'Redirect operation pending',\n    'auth/rejected-credential': 'Credential rejected',\n    'auth/second-factor-limit-exceeded': 'Second factor limit exceeded',\n    'auth/tenant-id-mismatch': 'Tenant ID mismatch',\n    'auth/timeout': 'Operation timed out',\n    'auth/user-token-expired': 'User token expired',\n    'auth/web-storage-unsupported': 'Web storage not supported'\n  };\n  \n  // Ensure we always return a user-friendly message\n  const message = errorMessages[errorCode];\n  if (message) {\n    return message;\n  }\n  \n  // For unknown error codes, provide a generic message without exposing technical details\n  console.warn(`Unknown Firebase error code: ${errorCode}`);\n  return 'An unexpected error occurred. Please try again.';\n};\n\n// Check password strength and return feedback\nexport const getPasswordStrength = (password) => {\n  if (!password) return { strength: 'none', message: '' };\n  \n  let score = 0;\n  const feedback = [];\n  \n  // Length check\n  if (password.length >= 8) score++;\n  else feedback.push('Use at least 8 characters');\n  \n  // Lowercase check\n  if (/[a-z]/.test(password)) score++;\n  else feedback.push('Add lowercase letters');\n  \n  // Uppercase check\n  if (/[A-Z]/.test(password)) score++;\n  else feedback.push('Add uppercase letters');\n  \n  // Number check\n  if (/\\d/.test(password)) score++;\n  else feedback.push('Add numbers');\n  \n  // Special character check\n  if (/[^A-Za-z0-9]/.test(password)) score++;\n  else feedback.push('Add special characters');\n  \n  // Common patterns check\n  const commonPatterns = [\n    /(.)\\1{2,}/, // Repeated characters\n    /123456|654321|qwerty|password/i // Common sequences\n  ];\n  \n  const hasCommonPattern = commonPatterns.some(pattern => pattern.test(password));\n  if (hasCommonPattern) {\n    feedback.push('Avoid common patterns');\n    score = Math.max(0, score - 1);\n  }\n  \n  const strengthLevels = {\n    0: 'very-weak',\n    1: 'weak', \n    2: 'fair',\n    3: 'good',\n    4: 'strong',\n    5: 'very-strong'\n  };\n  \n  const strengthMessages = {\n    'very-weak': 'Very weak password',\n    'weak': 'Weak password',\n    'fair': 'Fair password',\n    'good': 'Good password',\n    'strong': 'Strong password',\n    'very-strong': 'Very strong password'\n  };\n  \n  const strength = strengthLevels[score];\n  \n  return {\n    strength,\n    score,\n    message: strengthMessages[strength],\n    feedback: feedback,\n    isStrong: score >= 3\n  };\n};","size_bytes":8911},"src/components/auth/ForgotPasswordModal.js":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\nimport { useFocusTrap } from '../../hooks/useFocusTrap';\n\nexport default function ForgotPasswordModal({ \n  isOpen,\n  onClose, \n  error,\n  successMessage,\n  loading,\n  onForgotPassword,\n  onSwitchToSignIn\n}) {\n  const modalRef = useFocusTrap(isOpen);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeEvent = () => {\n      onClose();\n    };\n\n    document.addEventListener('modal-escape', handleEscapeEvent);\n    return () => {\n      document.removeEventListener('modal-escape', handleEscapeEvent);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 backdrop-blur-sm z-40\" \n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n      \n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n          <div \n            ref={modalRef}\n            className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"forgot-password-title\"\n            aria-describedby=\"forgot-password-description\"\n          >\n            {/* Header */}\n            <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n              <button\n                onClick={onClose}\n                className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                aria-label=\"Close forgot password modal\"\n              >\n                <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <h2 id=\"forgot-password-title\" className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Reset Password</h2>\n              <p id=\"forgot-password-description\" className=\"text-sm sm:text-base text-gray-700 mt-2\">We'll send you a reset link</p>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-4 sm:p-6\">\n              {/* Forgot Password Form */}\n              <form className=\"space-y-4 mb-6\" onSubmit={onForgotPassword} noValidate>\n                {(error || successMessage) && (\n                  <div \n                    id=\"forgot-password-alert\"\n                    className={`text-sm text-center p-2 rounded-lg ${\n                      successMessage\n                        ? 'text-green-700 bg-green-50' \n                        : 'text-red-600 bg-red-50'\n                    }`}\n                    role=\"alert\"\n                  >\n                    {successMessage || error}\n                  </div>\n                )}\n                <div>\n                  <label htmlFor=\"forgot-password-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Email Address\n                  </label>\n                  <input\n                    id=\"forgot-password-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email address\"\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={(error || successMessage) ? \"forgot-password-alert\" : \"forgot-password-help\"}\n                  />\n                  <div id=\"forgot-password-help\" className=\"text-xs text-gray-500 mt-1\">\n                    Enter the email address associated with your account\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed\"\n                  aria-describedby={loading ? \"forgot-password-loading\" : undefined}\n                >\n                  {loading ? (\n                    <>\n                      <span className=\"sr-only\" id=\"forgot-password-loading\">Sending reset link, please wait</span>\n                      Sending...\n                    </>\n                  ) : (\n                    'Send Reset Link'\n                  )}\n                </button>\n              </form>\n\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-500\">\n                  Remember your password? \n                  <button \n                    onClick={onSwitchToSignIn}\n                    className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                  >\n                    Sign In\n                  </button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":5248},"src/components/auth/SignInModal.js":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\nimport { useFocusTrap } from '../../hooks/useFocusTrap';\n\nexport default function SignInModal({ \n  isOpen,\n  onClose, \n  error,\n  loading,\n  onEmailSignIn, \n  onGoogleSignIn,\n  onSwitchToSignUp,\n  onSwitchToForgotPassword\n}) {\n  const modalRef = useFocusTrap(isOpen);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeEvent = () => {\n      onClose();\n    };\n\n    document.addEventListener('modal-escape', handleEscapeEvent);\n    return () => {\n      document.removeEventListener('modal-escape', handleEscapeEvent);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 backdrop-blur-sm z-40\" \n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n      \n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n          <div \n            ref={modalRef}\n            className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"signin-title\"\n            aria-describedby=\"signin-description\"\n          >\n            {/* Header */}\n            <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n              <button\n                onClick={onClose}\n                className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                aria-label=\"Close sign in modal\"\n              >\n                <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <h2 id=\"signin-title\" className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Welcome Back!</h2>\n              <p id=\"signin-description\" className=\"text-sm sm:text-base text-gray-700 mt-2\">Sign in to your account</p>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-4 sm:p-6\">\n              {/* Email Sign In Form */}\n              <form className=\"space-y-4 mb-6\" onSubmit={onEmailSignIn} noValidate>\n                {error && (\n                  <div id=\"signin-error\" className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\" role=\"alert\">\n                    {error}\n                  </div>\n                )}\n                <div>\n                  <label htmlFor=\"signin-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Email\n                  </label>\n                  <input\n                    id=\"signin-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email\"\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={error ? \"signin-error\" : undefined}\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"signin-password\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Password\n                  </label>\n                  <input\n                    id=\"signin-password\"\n                    type=\"password\"\n                    name=\"password\"\n                    required\n                    placeholder=\"Enter your password\"\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={error ? \"signin-error\" : undefined}\n                  />\n                  <div className=\"text-right mt-2\">\n                    <button\n                      type=\"button\"\n                      onClick={onSwitchToForgotPassword}\n                      className=\"text-sm text-emerald-700 hover:text-emerald-800 font-medium\"\n                    >\n                      Forgot Password?\n                    </button>\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed\"\n                  aria-describedby={loading ? \"signin-loading\" : undefined}\n                >\n                  {loading ? (\n                    <>\n                      <span className=\"sr-only\" id=\"signin-loading\">Signing in, please wait</span>\n                      Signing In...\n                    </>\n                  ) : (\n                    'Sign In'\n                  )}\n                </button>\n              </form>\n\n              {/* Divider */}\n              <div className=\"relative mb-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-200\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-white px-4 text-gray-500\">or</span>\n                </div>\n              </div>\n\n              {/* Google Sign In */}\n              <div className=\"text-center mb-6\">\n                <button\n                  onClick={onGoogleSignIn}\n                  disabled={loading}\n                  className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 text-sm sm:text-base\"\n                >\n                  <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                    <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  {loading ? 'Signing In...' : 'Continue with Google'}\n                </button>\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-500\">\n                  Don't have an account? \n                  <button \n                    onClick={onSwitchToSignUp}\n                    className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                  >\n                    Sign Up\n                  </button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":7660},"src/components/auth/SignUpModal.js":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\nimport { useFocusTrap } from '../../hooks/useFocusTrap';\n\nexport default function SignUpModal({ \n  isOpen,\n  onClose, \n  error,\n  loading,\n  onEmailSignUp, \n  onGoogleSignIn,\n  onSwitchToSignIn\n}) {\n  const modalRef = useFocusTrap(isOpen);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeEvent = () => {\n      onClose();\n    };\n\n    document.addEventListener('modal-escape', handleEscapeEvent);\n    return () => {\n      document.removeEventListener('modal-escape', handleEscapeEvent);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 backdrop-blur-sm z-40\" \n        onClick={onClose}\n        aria-hidden=\"true\"\n      />\n      \n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n          <div \n            ref={modalRef}\n            className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"signup-title\"\n            aria-describedby=\"signup-description\"\n          >\n            {/* Header */}\n            <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n              <button\n                onClick={onClose}\n                className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                aria-label=\"Close sign up modal\"\n              >\n                <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <h2 id=\"signup-title\" className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Join Frame!</h2>\n              <p id=\"signup-description\" className=\"text-sm sm:text-base text-gray-700 mt-2\">Create your account to get started</p>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-4 sm:p-6\">\n              {/* Email Sign Up Form */}\n              <form className=\"space-y-4 mb-6\" onSubmit={onEmailSignUp} noValidate>\n                {error && (\n                  <div id=\"signup-error\" className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\" role=\"alert\">\n                    {error}\n                  </div>\n                )}\n                <div>\n                  <label htmlFor=\"signup-fullname\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Name\n                  </label>\n                  <input\n                    id=\"signup-fullname\"\n                    type=\"text\"\n                    name=\"fullName\"\n                    required\n                    placeholder=\"Enter your name\"\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={error ? \"signup-error\" : undefined}\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"signup-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Email\n                  </label>\n                  <input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email\"\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={error ? \"signup-error\" : undefined}\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"signup-password\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                    Password\n                  </label>\n                  <input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    name=\"password\"\n                    required\n                    placeholder=\"Create a password (min 8 characters)\"\n                    minLength={8}\n                    className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                    aria-describedby={error ? \"signup-error\" : \"password-requirements\"}\n                  />\n                  <div id=\"password-requirements\" className=\"text-xs text-gray-500 mt-1\">\n                    Password must be at least 8 characters long\n                  </div>\n                </div>\n                <button\n                  type=\"submit\"\n                  disabled={loading}\n                  className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed\"\n                  aria-describedby={loading ? \"signup-loading\" : undefined}\n                >\n                  {loading ? (\n                    <>\n                      <span className=\"sr-only\" id=\"signup-loading\">Creating account, please wait</span>\n                      Creating Account...\n                    </>\n                  ) : (\n                    'Create Account'\n                  )}\n                </button>\n              </form>\n\n              {/* Divider */}\n              <div className=\"relative mb-6\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-gray-200\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-white px-4 text-gray-500\">or</span>\n                </div>\n              </div>\n\n              {/* Google Sign Up */}\n              <div className=\"text-center mb-4\">\n                <button\n                  onClick={onGoogleSignIn}\n                  disabled={loading}\n                  className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 disabled:cursor-not-allowed text-gray-700 text-sm sm:text-base\"\n                >\n                  <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                    <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  {loading ? 'Creating Account...' : 'Continue with Google'}\n                </button>\n              </div>\n\n              <div className=\"text-center mb-4\">\n                <p className=\"text-xs text-gray-500 leading-relaxed\">\n                  By signing up, you agree to our Terms of Service and Privacy Policy\n                </p>\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-500\">\n                  Already have an account? \n                  <button \n                    onClick={onSwitchToSignIn}\n                    className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                  >\n                    Sign In\n                  </button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":8529}},"version":1}