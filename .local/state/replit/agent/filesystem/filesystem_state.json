{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1458},"replit.md":{"content":"# Twibbonize App - Next.js Project\n\n### Overview\nThis is a Next.js 15 application with React 19 and Tailwind CSS, designed for creating and sharing \"Twibbons\" (frames for photos). The core purpose is to provide a seamless experience for visitors to discover, use, and download framed photos without requiring account creation. For creators, it offers tools to upload, manage, and track the performance of their custom frames. The project prioritizes accessibility and public transparency, making frame usage and analytics available to all users.\n\n### User Preferences\n- Prefer stability over experimental features\n- Focus on compatibility with Replit environment\n- Maintain clean, working codebase structure\n\n### System Architecture\nThe application is built with Next.js 15.5.2 (App Router) and React 19.1.0, styled using Tailwind CSS 4. It's configured for optimal performance within the Replit environment, including specific host and CORS settings.\n\n**Core Features (Implementation Priority):**\n1.  **Public Gallery:** Displays all publicly available frames, serving as the primary visitor interaction point. All content and analytics are publicly accessible.\n2.  **Frame Analytics:** Provides public usage statistics (uses, downloads, popularity over time, country-based metrics) for transparency and community engagement.\n3.  **Trending & Top Creators:** Highlights popular frames and successful creators based on actual usage data.\n4.  **User Accounts (Creators Only):** Streamlined system for frame upload and management.\n\n**Development Guidelines:**\n- Prioritize the visitor experience; features must work for non-authenticated users first.\n- Account requirements are minimal, only for frame uploads.\n- Public-first design for all discovery and analytics features.\n- Seamless frame usage: frictionless photo upload, frame overlay, and download for visitors.\n\n**Technical Implementations:**\n- Centralized Firebase error handling for consistent, secure, and user-friendly error messages.\n- Simple global loading states using `loading.js` for consistent user feedback.\n- Authentication flows utilize dedicated pages (`/signin`, `/signup`, `/forgot-password`) rather than modals.\n- User onboarding (e.g., profile setup) is managed via a dedicated `/onboarding` page, accessible after authentication.\n\n### Current Setup Status (2025-09-28)\n✅ **Replit Environment Configuration Complete**\n- Next.js development server running on port 5000 with host 0.0.0.0\n- Proxy configuration properly set up for Replit's iframe preview\n- Dependencies installed and working\n- Deployment configuration set for autoscale with build and start commands\n- Application loads successfully (shows loading screen when Firebase/Supabase not configured)\n\n✅ **Project Import Completed Successfully**\n- GitHub import has been successfully configured for Replit environment\n- Route group structure implemented for proper header/footer management\n- 404 pages now correctly display without header/footer (fixed layout issue)\n- Application architecture properly separated with (chrome) route group for pages needing header/footer\n\n⚠️ **Required for Full Functionality:**\n- Firebase environment variables (NEXT_PUBLIC_FIREBASE_API_KEY, NEXT_PUBLIC_FIREBASE_PROJECT_ID, NEXT_PUBLIC_FIREBASE_APP_ID)\n- Supabase environment variables (configured through API routes)\n- The app gracefully handles missing configurations and remains functional\n\n### External Dependencies\n- **Firebase:** Used for authentication (Google sign-in, email/password) and backend services.\n- **Supabase:** Integrated for database functionalities.\n- **Next.js:** Web framework.\n- **React:** UI library.\n- **Tailwind CSS:** For styling and UI development.","size_bytes":3701},"src/app/globals.css":{"content":"@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n/* Global Button Standardization - Consistent styling for all buttons */\n\n/* Base button class - Applied to ALL buttons for consistency */\n.btn-base {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0.5rem; /* rounded-lg - 8px */\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  transform: scale(1);\n  outline: none;\n}\n\n.btn-base:hover {\n  transform: scale(1.03);\n}\n\n.btn-base:focus {\n  outline: 2px solid #3b82f6; /* blue-500 for universal focus visibility */\n  outline-offset: 2px;\n}\n\n/* Primary button styling */\n.btn-primary {\n  background: linear-gradient(to right, #059669, #047857); /* emerald-600 to emerald-700 */\n  color: white;\n  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n}\n\n.btn-primary:hover {\n  background: linear-gradient(to right, #047857, #065f46); /* emerald-700 to emerald-800 */\n  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);\n}\n\n.btn-primary:focus {\n  outline: 2px solid #10b981; /* emerald-500 focus ring for primary buttons */\n  outline-offset: 2px;\n}\n\n/* Secondary button styling */\n.btn-secondary {\n  background: white;\n  border: 1px solid #d1d5db; /* gray-300 */\n  color: #374151; /* gray-700 */\n}\n\n.btn-secondary:hover {\n  background: #f9fafb; /* gray-50 */\n  border-color: #9ca3af; /* gray-400 */\n}\n\n.btn-secondary:focus {\n  outline: 2px solid #6b7280; /* gray-500 focus ring for secondary buttons */\n  outline-offset: 2px;\n}\n\n/* Danger button styling */\n.btn-danger {\n  background: #dc2626; /* red-600 */\n  color: white;\n}\n\n.btn-danger:hover {\n  background: #b91c1c; /* red-700 */\n}\n\n.btn-danger:focus {\n  outline: 2px solid #ef4444; /* red-500 focus ring for danger buttons */\n  outline-offset: 2px;\n}\n\n/* Warning button styling */\n.btn-warning {\n  background: #eab308; /* yellow-500 */\n  color: white;\n}\n\n.btn-warning:hover {\n  background: #ca8a04; /* yellow-600 */\n}\n\n.btn-warning:focus {\n  outline: 2px solid #facc15; /* yellow-400 focus ring for warning buttons */\n  outline-offset: 2px;\n}\n\n/* Google/Social button styling */\n.btn-google {\n  background: white;\n  border: 1px solid #d1d5db; /* gray-300 */\n  color: #374151; /* gray-700 */\n  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n}\n\n.btn-google:hover {\n  background: #fef3c7; /* yellow-50 */\n  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1);\n}\n\n/* Link button styling (text buttons) */\n.btn-link {\n  background: transparent;\n  color: #059669; /* emerald-600 */\n  text-decoration: none;\n  border: none;\n  padding: 0;\n}\n\n.btn-link:hover {\n  color: #047857; /* emerald-700 */\n  text-decoration: underline;\n  transform: scale(1.02); /* Subtle zoom for text buttons */\n}\n\n/* Disabled state for all buttons */\n.btn-base:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n  transform: scale(1);\n}\n\n.btn-base:disabled:hover {\n  transform: scale(1);\n}\n\n/* Legacy hover-zoom class - kept for backward compatibility but enhanced */\n.hover-zoom {\n  transform: scale(1);\n  transition: transform 0.2s ease-in-out;\n  cursor: pointer;\n}\n\n.hover-zoom:hover {\n  transform: scale(1.03);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n","size_bytes":3521},"src/app/layout.js":{"content":"import { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport ClientAuthProvider from \"../components/ClientAuthProvider\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport TimeoutWrapper from \"../components/TimeoutWrapper\";\nimport AuthenticatedLayout from \"../components/AuthenticatedLayout\";\nimport AuthGate from \"../components/AuthGate\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata = {\n  title: \"Frame Your Voice - Twibbonize App\",\n  description: \"Create and share frames that amplify your message, celebrate your cause, and inspire others to join in.\",\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning={true}>\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n        suppressHydrationWarning={true}\n      >\n        <ErrorBoundary>\n          <TimeoutWrapper timeout={15000}>\n            <ClientAuthProvider>\n              <AuthenticatedLayout>\n                <AuthGate>\n                  {children}\n                </AuthGate>\n              </AuthenticatedLayout>\n            </ClientAuthProvider>\n          </TimeoutWrapper>\n        </ErrorBoundary>\n      </body>\n    </html>\n  );\n}\n","size_bytes":1383},"src/components/Footer.js":{"content":"\"use client\";\n\nimport { Caveat } from \"next/font/google\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nconst countries = [\n  \"Afghanistan\", \"Albania\", \"Algeria\", \"Argentina\", \"Armenia\", \"Australia\", \"Austria\", \"Azerbaijan\",\n  \"Bahrain\", \"Bangladesh\", \"Belarus\", \"Belgium\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Brazil\", \"Bulgaria\",\n  \"Cambodia\", \"Canada\", \"Chile\", \"China\", \"Colombia\", \"Croatia\", \"Czech Republic\",\n  \"Denmark\", \"Ecuador\", \"Egypt\", \"Estonia\", \"Ethiopia\",\n  \"Finland\", \"France\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\",\n  \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\",\n  \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kuwait\",\n  \"Latvia\", \"Lebanon\", \"Lithuania\", \"Malaysia\", \"Mexico\", \"Morocco\",\n  \"Netherlands\", \"New Zealand\", \"Nigeria\", \"Norway\",\n  \"Pakistan\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\",\n  \"Romania\", \"Russia\", \"Saudi Arabia\", \"Serbia\", \"Singapore\", \"Slovakia\", \"Slovenia\", \n  \"South Africa\", \"South Korea\", \"Spain\", \"Sri Lanka\", \"Sweden\", \"Switzerland\",\n  \"Thailand\", \"Turkey\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \"United States\",\n  \"Uruguay\", \"Venezuela\", \"Vietnam\"\n];\n\nexport default function Footer() {\n  const [selectedCountry, setSelectedCountry] = useState(\"United States\");\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const dropdownRef = useRef(null);\n\n  const filteredCountries = countries.filter(country => \n    country.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Move selected country to top of filtered list\n  const sortedCountries = [\n    ...filteredCountries.filter(country => country === selectedCountry),\n    ...filteredCountries.filter(country => country !== selectedCountry)\n  ];\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsDropdownOpen(false);\n        setSearchTerm(\"\");\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleCountrySelect = (country) => {\n    setSelectedCountry(country);\n    setIsDropdownOpen(false);\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <footer className=\"bg-white text-black\">\n      {/* Main Footer Section */}\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8\">\n          \n          {/* Brand and App Downloads */}\n          <div className=\"lg:col-span-2\">\n            <div className={`${caveat.className} text-3xl font-bold text-emerald-700 mb-6`}>\n              Frame\n            </div>\n            \n            {/* App Download Buttons */}\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600 mb-3\">Download our app:</p>\n              <div className=\"flex flex-row gap-2\">\n                <button className=\"btn-base bg-black text-white hover:bg-gray-800 py-2 px-3 flex-1 gap-1.5\">\n                  <svg className=\"w-4 h-4 flex-shrink-0\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.61 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                  </svg>\n                  <div className=\"text-left min-w-0\">\n                    <div className=\"text-xs text-gray-300\">GET IT ON</div>\n                    <div className=\"text-xs font-semibold truncate\">Google Play</div>\n                  </div>\n                </button>\n                \n                <button className=\"btn-base bg-black text-white hover:bg-gray-800 py-2 px-3 flex-1 gap-1.5\">\n                  <svg className=\"w-4 h-4 flex-shrink-0\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M18.71,19.5C17.88,20.74 17,21.95 15.66,21.97C14.32,22 13.89,21.18 12.37,21.18C10.84,21.18 10.37,21.95 9.1,22C7.79,22.05 6.8,20.68 5.96,19.47C4.25,17 2.94,12.45 4.7,9.39C5.57,7.87 7.13,6.91 8.82,6.88C10.1,6.86 11.32,7.75 12.11,7.75C12.89,7.75 14.37,6.68 15.92,6.84C16.57,6.87 18.39,7.1 19.56,8.82C19.47,8.88 17.39,10.1 17.41,12.63C17.44,15.65 20.06,16.66 20.09,16.67C20.06,16.74 19.67,18.11 18.71,19.5M13,3.5C13.73,2.67 14.94,2.04 15.94,2C16.07,3.17 15.6,4.35 14.9,5.19C14.21,6.04 13.07,6.7 11.95,6.61C11.8,5.46 12.36,4.26 13,3.5Z\"/>\n                  </svg>\n                  <div className=\"text-left min-w-0\">\n                    <div className=\"text-xs text-gray-300\">Download on the</div>\n                    <div className=\"text-xs font-semibold truncate\">App Store</div>\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            {/* Custom Country Dropdown */}\n            <div className=\"w-full sm:w-auto relative\" ref={dropdownRef}>\n              <button\n                onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n                className=\"btn-base btn-secondary w-full sm:w-64 px-3 py-2 text-sm text-left\"\n              >\n                <span className=\"truncate\">\n                  {selectedCountry || \"Choose country (or region)\"}\n                </span>\n                <svg \n                  className={`w-4 h-4 transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`} \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </button>\n\n              {isDropdownOpen && (\n                <div className=\"absolute top-full left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-50 max-h-64 overflow-hidden\">\n                  {/* Search Input */}\n                  <div className=\"p-2 border-b border-gray-200\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Search countries...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-black focus:border-black\"\n                    />\n                  </div>\n                  \n                  {/* Country List */}\n                  <div className=\"max-h-48 overflow-y-auto\">\n                    {sortedCountries.length === 0 ? (\n                      <div className=\"px-3 py-2 text-sm text-gray-500\">No countries found</div>\n                    ) : (\n                      sortedCountries.map((country) => (\n                        <button\n                          key={country}\n                          onClick={() => handleCountrySelect(country)}\n                          className={`btn-base w-full px-3 py-2 text-left text-sm hover:bg-gray-50 ${\n                            country === selectedCountry \n                              ? 'bg-yellow-400 text-black font-medium' \n                              : 'text-gray-700'\n                          }`}\n                        >\n                          {country}\n                        </button>\n                      ))\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Discover Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Discover</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Explore</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Leaderboard</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Pricing</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Help Center</a></li>\n            </ul>\n          </div>\n\n          {/* Resources Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Resources</h4>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">For Creators</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">What is a Twibbon?</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Use Cases</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Testimonials</a></li>\n            </ul>\n          </div>\n\n          {/* Company Column */}\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-4\">Company</h4>\n            <ul className=\"space-y-2 mb-6\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">About</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Blog</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Media Assets</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Contact Us</a></li>\n            </ul>\n\n            {/* Join Us - Social Media */}\n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-4\">Join Us</h4>\n              <div className=\"flex gap-3\">\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.097.118.112.22.083.402-.09.353-.293 1.178-.334 1.345-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.75-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24.009c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001 12.017.001z\"/>\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-gray-100 hover:bg-emerald-100 rounded-full flex items-center justify-center transition-colors duration-200\">\n                  <svg className=\"w-4 h-4 text-gray-600 hover:text-emerald-700\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                  </svg>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trademark/Legal Section */}\n      <div className=\"border-t border-gray-200\">\n        <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-sm text-gray-600 mb-4 md:mb-0\">\n              © 2024 Frame. All rights reserved.\n            </div>\n            <div className=\"flex flex-wrap gap-6 text-sm\">\n              <a href=\"/privacy\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Privacy Policy</a>\n              <a href=\"/terms\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Terms & Conditions</a>\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Cookie Policy</a>\n              <a href=\"#\" className=\"text-gray-600 hover:text-emerald-700 transition-colors duration-200\">Site Map</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":14466},"src/components/Header.js":{"content":"\"use client\";\n\nimport { Caveat } from \"next/font/google\";\nimport { useState } from \"react\";\nimport Link from \"next/link\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function Header({ isMenuOpen, setIsMenuOpen }) {\n  const handleSearch = () => {\n    // Search functionality can be implemented here\n  };\n\n  return (\n    <header className=\"bg-yellow-400 text-black py-4 sm:py-5 md:py-6 border-0 shadow-none relative z-40\">\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 flex items-center justify-between\">\n        <Link \n          href=\"/\" \n          className={`${caveat.className} text-2xl sm:text-3xl md:text-4xl font-bold text-emerald-700 hover:text-emerald-800 transition-colors duration-200`}\n        >\n          Frame\n        </Link>\n        <div className=\"w-48 sm:w-64 md:w-80 lg:w-96 mx-4 relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"w-full px-3 py-2 pr-8 rounded-full bg-white text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-700 text-sm\"\n          />\n          <button \n            onClick={handleSearch}\n            className=\"btn-base absolute right-2 top-1/2 transform -translate-y-1/2 p-1 rounded hover:text-emerald-700\"\n          >\n            <svg \n              className=\"w-4 h-4 text-gray-500\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" \n              />\n            </svg>\n          </button>\n        </div>\n        <div className=\"relative\">\n          <button\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            className=\"btn-base btn-secondary p-2 rounded-full relative z-50\"\n          >\n            <svg \n              className=\"w-6 h-6 text-black\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d={isMenuOpen ? \"M6 18L18 6M6 6l12 12\" : \"M4 6h16M4 12h16M4 18h16\"}\n              />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2451},"src/components/Hero.js":{"content":"import { Caveat } from \"next/font/google\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function Hero() {\n  return (\n    <section className=\"bg-yellow-400 text-black py-12 sm:py-16 md:py-24 border-0 shadow-none -mt-px\">\n      <div className=\"mx-auto w-full max-w-screen-xl px-3 sm:px-4 md:px-6 text-center\">\n        <h1 className={`${caveat.className} text-6xl sm:text-7xl md:text-8xl font-bold text-emerald-700`}>\n          Frame Your Voice\n        </h1>\n        <p className=\"mt-3 sm:mt-4 md:mt-6 text-sm sm:text-base md:text-lg opacity-90\">\n          Create and share frames that amplify your message, celebrate your cause, and inspire others to join in.\n        </p>\n        <div className=\"mt-6 sm:mt-8 flex flex-row items-center justify-center gap-4 sm:gap-5 flex-nowrap\">\n          <a\n            href=\"#\"\n            className=\"btn-base btn-primary px-7 py-4 text-base sm:text-lg font-semibold whitespace-nowrap\"\n          >\n            Create Frame\n          </a>\n          <a\n            href=\"#\"\n            className=\"btn-base btn-secondary border-2 border-emerald-700 px-7 py-4 text-emerald-800 text-base sm:text-lg font-semibold whitespace-nowrap\"\n          >\n            Use Frame\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":1296},"src/hooks/useAuth.js":{"content":"\"use client\";\n\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { \n  onAuthStateChanged, \n  signInWithPopup, \n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  updateProfile,\n  sendEmailVerification,\n  signInWithEmailAndPassword,\n  signOut,\n  reload,\n  sendPasswordResetEmail\n} from 'firebase/auth';\nimport { useFirebaseOptimized as useFirebase } from '../lib/firebase-optimized';\nimport { createUserProfile } from '../lib/firestore';\nimport { \n  handleSignInError, \n  handleSignUpError, \n  handlePasswordResetError, \n  handleEmailVerificationError,\n  handleGoogleSignInError,\n  getPasswordResetSuccessMessage \n} from '../utils/firebaseErrorHandler';\n\n// Create Auth Context\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [pendingSignupUserId, setPendingSignupUserId] = useState(null);\n  const [logoutInProgress, setLogoutInProgress] = useState(false);\n  const firebase = useFirebase();\n  const router = useRouter();\n\n  useEffect(() => {\n    // Don't set up auth listener until Firebase is loaded\n    if (firebase.isLoading) return;\n    \n    // If Firebase is not configured, set loading to false and return\n    if (!firebase.isConfigured || !firebase.auth) {\n      setLoading(false);\n      return;\n    }\n    \n    // Set up auth listener with proper cleanup\n    let unsubscribe = null;\n    \n    const setupAuthListener = async () => {\n      try {\n        // Listen for authentication state changes\n        unsubscribe = onAuthStateChanged(firebase.auth, async (user) => {\n          if (user) {\n            // Create user profile in Firestore if it doesn't exist\n            try {\n              await createUserProfile(user);\n            } catch (error) {\n              if (process.env.NODE_ENV === 'development') {\n                console.error('Error creating user profile:', error);\n              }\n            }\n            \n            // Clear pending signup flag if this user was pending (using functional update to always see latest value)\n            setPendingSignupUserId(current => current === user.uid ? null : current);\n          }\n          \n          // Clear logout in progress flag on any auth state change\n          setLogoutInProgress(false);\n          setUser(user);\n          setLoading(false);\n        });\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Failed to set up auth listener:', error);\n        }\n        setLoading(false);\n      }\n    };\n\n    setupAuthListener();\n\n    // Return cleanup function\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, [firebase.isLoading, firebase.isConfigured, firebase.auth]);\n\n  // Show loading state while Firebase is initializing only\n  if (firebase.isLoading) {\n    const noopAsync = async () => ({ success: false });\n    const noop = () => {};\n    \n    return (\n      <AuthContext.Provider value={{ \n        user: null, \n        loading: true, \n        mounted: true,\n        logoutInProgress: false,\n        signInWithGoogle: noopAsync, \n        signUpWithEmail: noopAsync, \n        signInWithEmail: noopAsync, \n        sendVerificationEmail: noopAsync,\n        checkEmailVerification: async () => ({ verified: false }),\n        forgotPassword: noopAsync,\n        logout: noop\n      }}>\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n\n  const signInWithGoogle = async () => {\n    if (!firebase.isConfigured || !firebase.auth) {\n      return { success: false, error: 'Authentication is not properly configured.' };\n    }\n    \n    try {\n      const googleProvider = new GoogleAuthProvider();\n      const result = await signInWithPopup(firebase.auth, googleProvider);\n      \n      // User state will be automatically updated via onAuthStateChanged\n      return { success: true };\n    } catch (error) {\n      // Use centralized error handling for Google sign-in\n      return await handleGoogleSignInError(error);\n    }\n  };\n\n  const signUpWithEmail = async (email, password, name) => {\n    if (!firebase.isConfigured || !firebase.auth) {\n      return { success: false, error: 'Authentication is not properly configured.' };\n    }\n    \n    try {\n      const result = await createUserWithEmailAndPassword(firebase.auth, email, password);\n      \n      // Set pending signup flag to prevent race condition in verify-email page\n      setPendingSignupUserId(result.user.uid);\n      \n      // Update user profile with name\n      if (name) {\n        await updateProfile(result.user, {\n          displayName: name\n        });\n      }\n      \n      // Send email verification\n      await sendEmailVerification(result.user);\n\n      return { success: true, requiresVerification: true };\n    } catch (error) {\n      // Clear pending signup flag on error\n      setPendingSignupUserId(null);\n      // Use centralized error handling for sign-up\n      return await handleSignUpError(error);\n    }\n  };\n\n  const signInWithEmail = async (email, password) => {\n    if (!firebase.isConfigured || !firebase.auth) {\n      return { success: false, error: 'Authentication is not properly configured.' };\n    }\n    \n    try {\n      const result = await signInWithEmailAndPassword(firebase.auth, email, password);\n      return { success: true };\n    } catch (error) {\n      // Use centralized error handling for sign-in\n      return await handleSignInError(error);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Set logout in progress flag to prevent redirects\n      setLogoutInProgress(true);\n      // Clear any pending signup state before signing out\n      setPendingSignupUserId(null);\n      await signOut(firebase.auth);\n      // Use replace instead of push to prevent back button issues\n      router.replace('/');\n    } catch (error) {\n      console.error('Sign-out error:', error);\n      // Clear logout flag on error\n      setLogoutInProgress(false);\n    }\n  };\n\n  // Send email verification\n  const sendVerificationEmail = async () => {\n    try {\n      if (firebase.auth?.currentUser) {\n        await sendEmailVerification(firebase.auth.currentUser);\n        return { success: true };\n      }\n      return { success: false, error: 'No user signed in' };\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      \n      // Use centralized error handling for email verification\n      return await handleEmailVerificationError(error);\n    }\n  };\n\n  // Check email verification status (reload user)\n  const checkEmailVerification = async () => {\n    try {\n      if (firebase.auth?.currentUser) {\n        await reload(firebase.auth.currentUser);\n        // Update the user state so components re-render with new verification status\n        setUser(firebase.auth.currentUser);\n        return { verified: firebase.auth.currentUser.emailVerified };\n      }\n      return { verified: false };\n    } catch (error) {\n      console.error('Error checking verification status:', error);\n      return { verified: false };\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    if (!firebase.isConfigured || !firebase.auth) {\n      return { success: false, error: 'Authentication is not properly configured.' };\n    }\n    \n    try {\n      await sendPasswordResetEmail(firebase.auth, email);\n      \n      // Return success with appropriate message\n      return { \n        success: true, \n        type: 'success',\n        message: getPasswordResetSuccessMessage()\n      };\n      \n    } catch (error) {\n      // Use centralized error handling for password reset\n      const result = await handlePasswordResetError(error);\n      \n      // If centralized handler treats this as success (security mode), return it\n      if (result.success) {\n        return result;\n      }\n      \n      // Otherwise return the error\n      return result;\n    }\n  };\n\n  // Note: Using centralized Firebase error handling from utils/firebaseErrorHandler.js\n\n  const value = {\n    user,\n    loading,\n    pendingSignupUserId,\n    logoutInProgress,\n    mounted: true,\n    signInWithGoogle,\n    signUpWithEmail,\n    signInWithEmail,\n    sendVerificationEmail,\n    checkEmailVerification,\n    forgotPassword,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Optional auth hook that doesn't crash if no provider\nexport const useOptionalAuth = () => {\n  const context = useContext(AuthContext);\n  return context;\n};","size_bytes":8752},"src/lib/firestore.js":{"content":"\"use client\";\n\n// Firestore database operations for the Twibbonize app\nimport { db } from './firebase-optimized';\nimport { handleFirebaseError } from '../utils/firebaseErrorHandler';\nimport { \n  doc, \n  setDoc, \n  getDoc, \n  collection, \n  addDoc, \n  getDocs, \n  query, \n  where, \n  orderBy, \n  limit,\n  serverTimestamp,\n  updateDoc,\n  increment,\n  runTransaction \n} from 'firebase/firestore';\n\n\n// Get database instance - simplified since we have direct db import\nconst getDatabase = () => {\n  return db;\n};\n\n// Generate unique username with max attempts to prevent infinite loops\nexport const generateUniqueUsername = async (baseUsername, maxAttempts = 100) => {\n  let username = baseUsername.toLowerCase().replace(/[^a-z0-9]/g, '');\n  \n  // Ensure username is at least 3 characters\n  if (username.length < 3) {\n    username = username + '123';\n  }\n  \n  // Check if username exists with attempt limit\n  let counter = 0;\n  let finalUsername = username;\n  let attempts = 0;\n  \n  while (await checkUsernameExists(finalUsername) && attempts < maxAttempts) {\n    counter++;\n    finalUsername = `${username}${counter}`;\n    attempts++;\n  }\n  \n  if (attempts >= maxAttempts) {\n    // Fallback: use timestamp-based unique identifier\n    finalUsername = `${username}${Date.now().toString().slice(-6)}`;\n\n  }\n  \n  return finalUsername;\n};\n\n// Check if username already exists\nexport const checkUsernameExists = async (username) => {\n  const normalizedUsername = username.toLowerCase().trim();\n  \n  // Check if database is initialized\n  if (!db) {\n    return true; // Assume exists on error to be safe\n  }\n  \n  \n  try {\n    \n    // Check the usernames collection directly - more efficient and consistent\n    const usernameDocRef = doc(db, 'usernames', normalizedUsername);\n    \n    const usernameDoc = await getDoc(usernameDocRef);\n    \n    const exists = usernameDoc.exists();\n    \n    \n    return exists;\n  } catch (error) {\n    return true; // Assume exists on error to be safe\n  }\n};\n\n// Atomic username reservation using usernames collection to prevent race conditions\nconst reserveUsernameAtomically = async (baseUsername, userUid, userProfile) => {\n  const maxAttempts = 100;\n  let username = baseUsername.toLowerCase().replace(/[^a-z0-9]/g, '');\n  \n  // Ensure username is at least 3 characters\n  if (username.length < 3) {\n    username = username + '123';\n  }\n\n  return await runTransaction(db, async (transaction) => {\n    let counter = 0;\n    let finalUsername = username;\n    let attempts = 0;\n    \n    // Try to find available username atomically using usernames collection\n    while (attempts < maxAttempts) {\n      const usernameDocRef = doc(db, 'usernames', finalUsername);\n      const usernameDoc = await transaction.get(usernameDocRef);\n      \n      if (!usernameDoc.exists()) {\n        // Username is available, reserve it atomically\n        transaction.set(usernameDocRef, {\n          userId: userUid,\n          createdAt: serverTimestamp(),\n        });\n        \n        const userDocRef = doc(db, 'users', userUid);\n        transaction.set(userDocRef, {\n          ...userProfile,\n          username: finalUsername,\n        });\n        return { success: true, username: finalUsername, docRef: userDocRef };\n      }\n      \n      // Username taken, try next variation\n      counter++;\n      finalUsername = `${username}${counter}`;\n      attempts++;\n    }\n    \n    // Fallback: use timestamp-based unique identifier\n    finalUsername = `${username}${Date.now().toString().slice(-6)}`;\n\n    \n    const usernameDocRef = doc(db, 'usernames', finalUsername);\n    transaction.set(usernameDocRef, {\n      userId: userUid,\n      createdAt: serverTimestamp(),\n    });\n    \n    const userDocRef = doc(db, 'users', userUid);\n    transaction.set(userDocRef, {\n      ...userProfile,\n      username: finalUsername,\n    });\n    return { success: true, username: finalUsername, docRef: userDocRef };\n  });\n};\n\n// User Profile operations with atomic username reservation\nexport const createUserProfile = async (user) => {\n  if (!user) return { success: false, error: 'No user provided' };\n  \n  const database = getDatabase();\n  // Check if Firebase is configured\n  if (!database) {\n\n    return { success: false, error: 'Database not available' };\n  }\n  \n  try {\n      const userDocRef = doc(database, 'users', user.uid);\n    const userDoc = await getDoc(userDocRef);\n    \n    if (!userDoc.exists()) {\n      const { displayName, email, photoURL } = user;\n      \n      // Prepare user profile data\n      const userProfile = {\n        displayName,\n        email,\n        photoURL,\n        bio: '',\n        country: '',\n        bannerImage: '',\n        profileImage: photoURL || '',\n        supportersCount: 0,\n        campaignsCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        framesCreated: 0,\n        framesUsed: 0,\n        profileCompleted: false, // Track if user has completed welcome popup\n      };\n      \n      // Generate base username and reserve atomically\n      const baseUsername = displayName || email?.split('@')[0] || 'user';\n      const result = await reserveUsernameAtomically(baseUsername, user.uid, userProfile);\n      \n      if (result.success) {\n        return { success: true, docRef: result.docRef, username: result.username };\n      } else {\n        return { success: false, error: 'Failed to reserve username' };\n      }\n    }\n    \n    return { success: true, docRef: userDocRef, existing: true };\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error creating user profile:', error);\n    }\n    const errorResponse = await handleFirebaseError(error, 'firestore', { returnType: 'string' });\n    return { success: false, error: errorResponse || 'Failed to complete operation. Please try again.' };\n  }\n};\n\nexport const getUserProfile = async (userId) => {\n  if (!userId) {\n    return null;\n  }\n  \n  const database = getDatabase();\n  // Check if Firebase is configured\n  if (!database) {\n\n    return null;\n  }\n  \n  try {\n    const userDocRef = doc(database, 'users', userId);\n    const userDoc = await getDoc(userDocRef);\n    \n    if (userDoc.exists()) {\n      const userData = userDoc.data();\n      // Ensure required fields exist with fallbacks\n      return { \n        id: userDoc.id, \n        ...userData,\n        supportersCount: userData.supportersCount || 0,\n        campaignsCount: userData.campaignsCount || 0,\n        framesCreated: userData.framesCreated || 0,\n        framesUsed: userData.framesUsed || 0,\n        bio: userData.bio || '',\n        profileImage: userData.profileImage || '',\n        bannerImage: userData.bannerImage || ''\n      };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    return null;\n  }\n};\n\n// Get user profile by username (for /[username] route) - uses usernames collection for consistency\nexport const getUserProfileByUsername = async (username) => {\n  if (!username || typeof username !== 'string') {\n    return null;\n  }\n  \n  // Normalize username\n  const normalizedUsername = username.toLowerCase().trim();\n  if (!normalizedUsername) {\n    return null;\n  }\n  \n  try {\n    // Check if database is available\n    if (!db) {\n      return null;\n    }\n\n    // First, resolve username to userId using usernames collection\n    const usernameDocRef = doc(db, 'usernames', normalizedUsername);\n    const usernameDoc = await getDoc(usernameDocRef);\n    \n    if (!usernameDoc.exists()) {\n      return null;\n    }\n    \n    const { userId } = usernameDoc.data();\n    \n    // Then fetch user profile using the userId\n    const userDocRef = doc(db, 'users', userId);\n    const userDoc = await getDoc(userDocRef);\n    \n    if (!userDoc.exists()) {\n      return null;\n    }\n    \n    const userData = userDoc.data();\n    \n    // Ensure required fields exist with fallbacks\n    return { \n      id: userDoc.id, \n      ...userData,\n      supportersCount: userData.supportersCount || 0,\n      campaignsCount: userData.campaignsCount || 0,\n      framesCreated: userData.framesCreated || 0,\n      framesUsed: userData.framesUsed || 0,\n      bio: userData.bio || '',\n      profileImage: userData.profileImage || '',\n      bannerImage: userData.bannerImage || ''\n    };\n  } catch (error) {\n    return null;\n  }\n};\n\n// Update user profile with atomic username reservation\nexport const updateUserProfile = async (userId, updates) => {\n  if (!userId) return { success: false, error: 'No user ID provided' };\n  \n  // Check if Firebase is configured\n  if (!db) {\n\n    return { success: false, error: 'Database not available' };\n  }\n  \n  // Whitelist of safe fields that users can update\n  const allowedFields = ['bio', 'bannerImage', 'profileImage', 'displayName', 'country', 'username', 'profileCompleted'];\n  \n  // Filter updates to only include allowed fields\n  const filteredUpdates = {};\n  for (const field of allowedFields) {\n    if (updates.hasOwnProperty(field)) {\n      filteredUpdates[field] = updates[field];\n    }\n  }\n  \n  // If no valid fields to update, return early\n  if (Object.keys(filteredUpdates).length === 0) {\n    return { success: false, error: 'No valid fields to update' };\n  }\n\n  try {\n    return await runTransaction(db, async (transaction) => {\n      const userDocRef = doc(db, 'users', userId);\n      const userDoc = await transaction.get(userDocRef);\n      \n      if (!userDoc.exists()) {\n        throw new Error('User profile not found');\n      }\n\n      const currentData = userDoc.data();\n      \n      // If username is being changed, normalize and ensure it's unique using atomic reservation\n      if (filteredUpdates.username && filteredUpdates.username !== currentData.username) {\n        // Normalize username to ensure consistency\n        const normalizedUsername = filteredUpdates.username.toLowerCase().replace(/[^a-z0-9]/g, '');\n        \n        // Validate normalized username\n        if (normalizedUsername.length < 3) {\n          throw new Error('Username must be at least 3 characters long');\n        }\n        \n        // If normalization changed the username, reject to avoid confusion\n        if (normalizedUsername !== filteredUpdates.username) {\n          throw new Error('Username can only contain lowercase letters and numbers');\n        }\n        \n        // Reserve the new username atomically using usernames collection\n        const usernameDocRef = doc(db, 'usernames', normalizedUsername);\n        const usernameDoc = await transaction.get(usernameDocRef);\n        \n        if (usernameDoc.exists()) {\n          throw new Error('Username already taken');\n        }\n        \n        // Reserve the new username\n        transaction.set(usernameDocRef, {\n          userId: userId,\n          createdAt: serverTimestamp(),\n        });\n        \n        // Remove old username reservation if it exists\n        if (currentData.username) {\n          const oldUsernameDocRef = doc(db, 'usernames', currentData.username);\n          transaction.delete(oldUsernameDocRef);\n        }\n        \n        // Update the filtered updates with normalized username\n        filteredUpdates.username = normalizedUsername;\n      }\n\n      // Update the user profile\n      transaction.update(userDocRef, {\n        ...filteredUpdates,\n        updatedAt: serverTimestamp(),\n      });\n      \n      return { success: true, username: filteredUpdates.username || currentData.username };\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error updating user profile:', error);\n    }\n    const errorResponse = await handleFirebaseError(error, 'firestore', { returnType: 'string' });\n    return { success: false, error: errorResponse || 'Failed to complete operation. Please try again.' };\n  }\n};\n\n// Get user statistics (returns stored counters for consistency and performance)\nexport const getUserStats = async (userId) => {\n  if (!userId) return { supportersCount: 0, campaignsCount: 0, framesCreated: 0, framesUsed: 0 };\n  \n  try {\n    // Get stored counters from user profile for consistency\n    const userProfile = await getUserProfile(userId);\n    if (userProfile) {\n      return {\n        supportersCount: userProfile.supportersCount || 0,\n        campaignsCount: userProfile.campaignsCount || 0,\n        framesCreated: userProfile.framesCreated || 0,\n        framesUsed: userProfile.framesUsed || 0,\n      };\n    } else {\n      return { supportersCount: 0, campaignsCount: 0, framesCreated: 0, framesUsed: 0 };\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error getting user stats:', error);\n    }\n    return { supportersCount: 0, campaignsCount: 0, framesCreated: 0, framesUsed: 0 };\n  }\n};\n\n// Frame operations with comprehensive error handling\nexport const createFrame = async (frameData, userId) => {\n  if (!userId) {\n    return { success: false, error: 'User ID is required' };\n  }\n  \n  if (!frameData || typeof frameData !== 'object') {\n    return { success: false, error: 'Frame data is required' };\n  }\n  \n  try {\n    return await runTransaction(db, async (transaction) => {\n      // Create the frame with proper defaults\n      const frameRef = doc(collection(db, 'frames'));\n      const frameDoc = {\n        ...frameData,\n        createdBy: userId,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        usageCount: 0,\n        supporters: {},\n        isPublic: frameData?.isPublic ?? true,\n      };\n      \n      transaction.set(frameRef, frameDoc);\n      \n      // Update user's frame counters atomically\n      const userDocRef = doc(db, 'users', userId);\n      transaction.update(userDocRef, {\n        campaignsCount: increment(1),\n        framesCreated: increment(1),\n        updatedAt: serverTimestamp(),\n      });\n      \n      return { success: true, frameId: frameRef.id };\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error creating frame:', error, { userId, frameData: { ...frameData, imageData: '[redacted]' } });\n    }\n    const errorResponse = await handleFirebaseError(error, 'firestore', { returnType: 'string' });\n    return { success: false, error: errorResponse || 'Failed to create frame. Please try again.' };\n  }\n};\n\nexport const getPublicFrames = async (limitCount = 10) => {\n  try {\n    const q = query(\n      collection(db, 'frames'),\n      where('isPublic', '==', true),\n      orderBy('createdAt', 'desc'),\n      limit(limitCount)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const frames = [];\n    \n    querySnapshot.forEach((doc) => {\n      frames.push({ id: doc.id, ...doc.data() });\n    });\n    \n    return frames;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const getUserFrames = async (userId) => {\n  if (!userId) return [];\n  \n  // Check if database is initialized\n  if (!db) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Database not initialized - cannot get user frames');\n    }\n    return [];\n  }\n  \n  try {\n    const q = query(\n      collection(db, 'frames'),\n      where('createdBy', '==', userId),\n      orderBy('createdAt', 'desc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    const frames = [];\n    \n    querySnapshot.forEach((doc) => {\n      frames.push({ id: doc.id, ...doc.data() });\n    });\n    \n    return frames;\n  } catch (error) {\n    // Return empty array on permissions error or any other error\n    return [];\n  }\n};\n\n// Complete user profile setup after welcome popup\nexport const completeUserProfile = async (userId, profileData) => {\n  if (!userId || !profileData) return { success: false, error: 'Missing required data' };\n\n  try {\n    return await runTransaction(db, async (transaction) => {\n      const userDocRef = doc(db, 'users', userId);\n      const userDoc = await transaction.get(userDocRef);\n      \n      if (!userDoc.exists()) {\n        throw new Error('User profile not found');\n      }\n\n      const currentData = userDoc.data();\n      \n      // Check if username is being changed and ensure it's unique using atomic reservation\n      if (profileData.username && profileData.username !== currentData.username) {\n        // Normalize username to ensure consistency  \n        const normalizedUsername = profileData.username.toLowerCase().replace(/[^a-z0-9]/g, '');\n        \n        // Validate normalized username\n        if (normalizedUsername.length < 3) {\n          throw new Error('Username must be at least 3 characters long');\n        }\n        \n        // If normalization changed the username, reject to avoid confusion\n        if (normalizedUsername !== profileData.username) {\n          throw new Error('Username can only contain lowercase letters and numbers');\n        }\n        \n        const usernameDocRef = doc(db, 'usernames', normalizedUsername);\n        const usernameDoc = await transaction.get(usernameDocRef);\n        \n        if (usernameDoc.exists()) {\n          throw new Error('Username already taken');\n        }\n        \n        // Reserve the new username\n        transaction.set(usernameDocRef, {\n          userId: userId,\n          createdAt: serverTimestamp(),\n        });\n        \n        // Remove old username reservation if it exists\n        if (currentData.username) {\n          const oldUsernameDocRef = doc(db, 'usernames', currentData.username);\n          transaction.delete(oldUsernameDocRef);\n        }\n        \n        // Update profileData with normalized username\n        profileData.username = normalizedUsername;\n      }\n\n      // Prepare update data\n      const updateData = {\n        displayName: profileData.displayName || currentData.displayName,\n        username: profileData.username || currentData.username,\n        country: profileData.country || currentData.country,\n        bio: profileData.bio || currentData.bio || '',\n        profileCompleted: true,\n        updatedAt: serverTimestamp(),\n      };\n\n      // Handle profile image\n      if (profileData.profileImage) {\n        updateData.profileImage = profileData.profileImage;\n      }\n\n      // Handle banner image  \n      if (profileData.bannerImage) {\n        updateData.bannerImage = profileData.bannerImage;\n      }\n\n      transaction.update(userDocRef, updateData);\n      \n      return { success: true, username: updateData.username };\n    });\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error completing user profile:', error);\n    }\n    const errorResponse = await handleFirebaseError(error, 'firestore', { returnType: 'string' });\n    return { success: false, error: errorResponse || 'Failed to complete operation. Please try again.' };\n  }\n};\n\n// Track frame usage - increment usage count and update user counters with unique supporter tracking\nexport const trackFrameUsage = async (frameId, userId) => {\n  if (!frameId || !userId) return { success: false, error: 'Missing frameId or userId' };\n  \n  try {\n    return await runTransaction(db, async (transaction) => {\n      // Get frame details to find the creator\n      const frameDocRef = doc(db, 'frames', frameId);\n      const frameDoc = await transaction.get(frameDocRef);\n      \n      if (!frameDoc.exists()) {\n        throw new Error('Frame not found');\n      }\n      \n      const frameData = frameDoc.data();\n      const frameCreatorId = frameData.createdBy;\n      const currentSupporters = frameData.supporters || {};\n      const isNewSupporter = frameCreatorId !== userId && !currentSupporters[userId];\n      \n      // Update frame with usage count and supporter tracking\n      const frameUpdates = {\n        usageCount: increment(1),\n        updatedAt: serverTimestamp(),\n      };\n      \n      // Add user to supporters list if not already there and not the creator\n      if (frameCreatorId !== userId) {\n        frameUpdates[`supporters.${userId}`] = serverTimestamp();\n      }\n      \n      transaction.update(frameDocRef, frameUpdates);\n      \n      // Update user's framesUsed counter\n      const userDocRef = doc(db, 'users', userId);\n      transaction.update(userDocRef, {\n        framesUsed: increment(1),\n        updatedAt: serverTimestamp(),\n      });\n      \n      // Update frame creator's supportersCount only if this is a new unique supporter\n      if (isNewSupporter) {\n        const creatorDocRef = doc(db, 'users', frameCreatorId);\n        transaction.update(creatorDocRef, {\n          supportersCount: increment(1),\n          updatedAt: serverTimestamp(),\n        });\n      }\n      \n      return { \n        success: true, \n        isNewSupporter,\n        frameCreatorId: frameCreatorId !== userId ? frameCreatorId : null \n      };\n    });\n  } catch (error) {\n    const errorResponse = await handleFirebaseError(error, 'firestore', { returnType: 'string' });\n    return { success: false, error: errorResponse || 'Failed to complete operation. Please try again.' };\n  }\n};","size_bytes":20778},"src/components/AuthGate.js":{"content":"'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useOptionalAuth } from '../hooks/useAuth';\nimport PageLoader from './PageLoader';\n\nexport default function AuthGate({ children }) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const authContext = useOptionalAuth();\n  \n  // Extract auth data (safe to call even if authContext is null)\n  const user = authContext?.user;\n  const loading = authContext?.loading;\n  \n  // Redirect unverified users to /verify-email (except if already there)\n  // Must be called before any conditional returns\n  useEffect(() => {\n    if (authContext && user && !loading && !user.emailVerified && pathname !== '/verify-email') {\n      router.replace('/verify-email');\n    }\n  }, [authContext, user, loading, pathname, router]);\n  \n  // If no auth context, just render children\n  if (!authContext) {\n    return children;\n  }\n  \n  \n  // Show full-screen loader while auth is loading\n  if (loading) {\n    return <PageLoader message=\"Loading...\" />;\n  }\n\n  // Show loader while redirecting unverified users (except on verify-email page)\n  if (user && !user.emailVerified && pathname !== '/verify-email') {\n    return <PageLoader message=\"Redirecting to verification...\" />;\n  }\n\n  return children;\n}","size_bytes":1309},"src/components/AuthModal.js":{"content":"\"use client\";\n\nimport { useAuth } from \"../hooks/useAuth\";\n\nexport default function AuthModal({ \n  activeModal, \n  closeModal, \n  authError,\n  authStatus, \n  setActiveModal, \n  handleEmailSignIn, \n  handleEmailSignUp, \n  handleGoogleSignIn,\n  handleForgotPassword \n}) {\n  const { loading } = useAuth();\n\n  if (!activeModal) return null;\n\n  return (\n    <>\n      {/* Sign In Modal */}\n      {activeModal === 'signin' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Welcome Back!</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">Sign in to your account</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Email Sign In Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleEmailSignIn}>\n                    {authError && (\n                      <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\">\n                        {authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Password</label>\n                      <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        placeholder=\"Enter your password\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                      <div className=\"text-right mt-2\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setActiveModal('forgotpassword')}\n                          className=\"text-sm text-emerald-700 hover:text-emerald-800 font-medium\"\n                        >\n                          Forgot Password?\n                        </button>\n                      </div>\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Signing In...' : 'Sign In'}\n                    </button>\n                  </form>\n\n                  {/* Divider */}\n                  <div className=\"relative mb-6\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-200\"></div>\n                    </div>\n                    <div className=\"relative flex justify-center text-sm\">\n                      <span className=\"bg-white px-4 text-gray-500\">or</span>\n                    </div>\n                  </div>\n\n                  {/* Google Sign In */}\n                  <div className=\"text-center mb-6\">\n                    <button\n                      onClick={handleGoogleSignIn}\n                      disabled={loading}\n                      className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 text-gray-700 text-sm sm:text-base\"\n                    >\n                      <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      {loading ? 'Signing In...' : 'Continue with Google'}\n                    </button>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Don't have an account? \n                      <button \n                        onClick={() => setActiveModal('signup')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign Up\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Sign Up Modal */}\n      {activeModal === 'signup' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Join Frame!</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">Create your account to get started</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Email Sign Up Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleEmailSignUp}>\n                    {authError && (\n                      <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\">\n                        {authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Name</label>\n                      <input\n                        type=\"text\"\n                        name=\"fullName\"\n                        required\n                        placeholder=\"Enter your name\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Password</label>\n                      <input\n                        type=\"password\"\n                        name=\"password\"\n                        required\n                        placeholder=\"Create a password\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Creating Account...' : 'Create Account'}\n                    </button>\n                  </form>\n\n                  {/* Divider */}\n                  <div className=\"relative mb-6\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <div className=\"w-full border-t border-gray-200\"></div>\n                    </div>\n                    <div className=\"relative flex justify-center text-sm\">\n                      <span className=\"bg-white px-4 text-gray-500\">or</span>\n                    </div>\n                  </div>\n\n                  {/* Google Sign Up */}\n                  <div className=\"text-center mb-4\">\n                    <button\n                      onClick={handleGoogleSignIn}\n                      disabled={loading}\n                      className=\"w-full bg-white border-2 border-gray-200 hover:border-emerald-300 rounded-full py-2.5 sm:py-3 px-4 flex items-center justify-center gap-3 transition-all duration-200 hover-zoom disabled:opacity-50 text-gray-700 text-sm sm:text-base\"\n                    >\n                      <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\">\n                        <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                        <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                        <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                        <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                      </svg>\n                      {loading ? 'Creating Account...' : 'Continue with Google'}\n                    </button>\n                  </div>\n\n                  <div className=\"text-center mb-4\">\n                    <p className=\"text-xs text-gray-500 leading-relaxed\">\n                      By signing up, you agree to our Terms of Service and Privacy Policy\n                    </p>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Already have an account? \n                      <button \n                        onClick={() => setActiveModal('signin')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign In\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Forgot Password Modal */}\n      {activeModal === 'forgotpassword' && (\n        <>\n          <div className=\"fixed inset-0 backdrop-blur-sm z-40\"></div>\n          <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 sm:p-6 lg:p-8\">\n              <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600 my-8\">\n                {/* Header */}\n                <div className=\"bg-yellow-400 rounded-t-xl p-4 sm:p-6 text-center relative\">\n                  <button\n                    onClick={closeModal}\n                    className=\"absolute top-3 right-3 sm:top-4 sm:right-4 text-gray-700 hover:text-gray-900 transition-colors\"\n                  >\n                    <svg className=\"w-5 h-5 sm:w-6 sm:h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Reset Password</h2>\n                  <p className=\"text-sm sm:text-base text-gray-700 mt-2\">We'll send you a reset link</p>\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4 sm:p-6\">\n                  {/* Forgot Password Form */}\n                  <form className=\"space-y-4 mb-6\" onSubmit={handleForgotPassword}>\n                    {(authError || authStatus) && (\n                      <div className={`text-sm text-center p-2 rounded-lg ${\n                        authStatus?.type === 'success' \n                          ? 'text-green-700 bg-green-50' \n                          : 'text-red-600 bg-red-50'\n                      }`}>\n                        {authStatus?.message || authError}\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-800 mb-1\">Email Address</label>\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        placeholder=\"Enter your email address\"\n                        className=\"w-full px-3 sm:px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-sm sm:text-base text-gray-900 placeholder-gray-600\"\n                      />\n                    </div>\n                    <button\n                      type=\"submit\"\n                      disabled={loading}\n                      className=\"w-full bg-emerald-700 hover:bg-emerald-800 text-white rounded-full py-2.5 sm:py-3 px-4 font-medium transition-all duration-200 hover-zoom text-sm sm:text-base disabled:opacity-50\"\n                    >\n                      {loading ? 'Sending...' : 'Send Reset Link'}\n                    </button>\n                  </form>\n\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Remember your password? \n                      <button \n                        onClick={() => setActiveModal('signin')}\n                        className=\"text-emerald-700 hover:text-emerald-800 font-medium ml-1\"\n                      >\n                        Sign In\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}","size_bytes":17112},"src/components/ClientAuthProvider.js":{"content":"'use client';\n\nimport { AuthProvider } from '../hooks/useAuth';\n\nexport default function ClientAuthProvider({ children }) {\n  return (\n    <AuthProvider>\n      {children}\n    </AuthProvider>\n  );\n}","size_bytes":197},"src/components/EmailVerification.js":{"content":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../hooks/useAuth';\n\nexport default function EmailVerification() {\n  const { user, sendVerificationEmail, checkEmailVerification, logout } = useAuth();\n  const [isResending, setIsResending] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Auto-check email verification status every 5 seconds\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (user && !user.emailVerified) {\n        const result = await checkEmailVerification();\n        if (result.verified) {\n          // Page will refresh automatically when user is verified\n          window.location.reload();\n        }\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [user, checkEmailVerification]);\n\n  const handleResendVerification = async () => {\n    setIsResending(true);\n    setMessage('');\n    \n    const result = await sendVerificationEmail();\n    if (result.success) {\n      setMessage('Verification email sent!');\n    } else {\n      setMessage(`Error: ${result.error}`);\n    }\n    \n    setIsResending(false);\n    \n    // Clear message after 3 seconds\n    setTimeout(() => setMessage(''), 3000);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-yellow-50 to-emerald-50 p-4\">\n      <div className=\"bg-white rounded-2xl shadow-2xl w-full max-w-md mx-auto border-2 border-emerald-600\">\n        {/* Header */}\n        <div className=\"bg-yellow-400 rounded-t-xl p-6 text-center\">\n          <div className=\"w-16 h-16 bg-emerald-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2v10a2 2 0 002 2z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-emerald-700\">Verify Your Email</h2>\n          <p className=\"text-sm sm:text-base text-gray-700 mt-2\">\n            Almost there! Check your email to complete registration.\n          </p>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Main Text */}\n          <p className=\"text-lg text-gray-800 mb-4 text-center\">\n            We sent a verification email to <span className=\"font-medium text-emerald-700\">{user?.email}</span>, please verify yourself from there.\n          </p>\n\n          {/* Sub Text */}\n          <p className=\"text-sm text-gray-600 mb-6 text-center\">\n            If you don't receive it, check your spam folder or \n            <button\n              onClick={handleResendVerification}\n              disabled={isResending}\n              className=\"btn-base btn-link ml-1\"\n            >\n              {isResending ? 'sending...' : 'click to resend'}\n            </button>\n          </p>\n\n          {/* Message Display */}\n          {message && (\n            <div className={`text-sm text-center p-3 rounded-lg mb-4 ${\n              message.includes('Error') \n                ? 'bg-red-50 text-red-700' \n                : 'bg-emerald-50 text-emerald-700'\n            }`}>\n              {message}\n            </div>\n          )}\n\n          {/* Logout Option */}\n          <div className=\"pt-4 border-t border-gray-200\">\n            <p className=\"text-sm text-gray-500 text-center mb-3\">\n              Don't want to verify right now?\n            </p>\n            <p className=\"text-sm text-gray-600 text-center\">\n              <button\n                onClick={logout}\n                className=\"btn-base btn-link\"\n              >\n                Sign out\n              </button>\n              {\" \"}and continue without account\n            </p>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3902},"src/components/InteractiveClient.js":{"content":"'use client';\n\nimport { useState } from 'react';\nimport { useBodyScrollLock } from '../hooks/useBodyScrollLock';\nimport Header from './Header';\nimport Footer from './Footer';\nimport MobileMenu from './MobileMenu';\n\nexport default function InteractiveClient({ children }) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  // Prevent body scrolling when sidebar is open\n  useBodyScrollLock(isMenuOpen);\n\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      {/* Main Content with blur effect */}\n      <div className={`min-h-screen flex flex-col transition-all duration-300 ${\n        isMenuOpen ? 'blur-sm' : ''\n      }`}>\n        <Header isMenuOpen={isMenuOpen} setIsMenuOpen={setIsMenuOpen} />\n        <main className=\"flex-1\">\n          {children}\n        </main>\n        <Footer />\n      </div>\n\n    {/* Mobile Menu Component */}\n    <MobileMenu \n      isMenuOpen={isMenuOpen}\n      setIsMenuOpen={setIsMenuOpen}\n    />\n    </div>\n  );\n}","size_bytes":971},"src/components/MobileMenu.js":{"content":"\"use client\";\n\nimport { useOptionalAuth } from \"../hooks/useAuth\";\nimport { useOptionalUserProfile } from \"./UserProfileProvider\";\nimport { useRouter } from \"next/navigation\";\n\nexport default function MobileMenu({ \n  isMenuOpen, \n  setIsMenuOpen\n}) {\n  const authContext = useOptionalAuth();\n  const profileContext = useOptionalUserProfile();\n  \n  // Provide safe defaults if no auth context\n  const { user, loading, mounted, logout } = authContext || {\n    user: null,\n    loading: false,\n    mounted: true,\n    logout: async () => ({ success: false })\n  };\n\n  // Get user profile data\n  const { userProfile, loading: profileLoading } = profileContext || {\n    userProfile: null,\n    loading: false\n  };\n  const router = useRouter();\n\n\n  return (\n    <>\n      {/* Invisible Overlay for click-outside to close menu */}\n      {isMenuOpen && (\n        <div \n          className=\"fixed inset-0 z-30\"\n          onClick={() => setIsMenuOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`fixed top-0 right-0 h-full w-80 max-w-[90vw] bg-white shadow-2xl transform transition-transform duration-300 ease-in-out z-40 flex flex-col ${\n        isMenuOpen ? 'translate-x-0' : 'translate-x-full'\n      }`}>\n        {/* Close button - fixed at top */}\n        <div className=\"flex-shrink-0 flex justify-end p-4\">\n          <button\n            onClick={() => setIsMenuOpen(false)}\n            className=\"btn-base btn-secondary p-2 rounded-full\"\n          >\n            <svg \n              className=\"w-6 h-6 text-gray-600\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n        \n        {/* Scrollable content area */}\n        <div className=\"flex-1 overflow-y-auto min-h-0\">\n          <div className=\"px-6 pb-6\">\n            {/* Welcome message for authenticated users */}\n            {(!mounted || loading || profileLoading) ? (\n              /* Show loading skeleton during auth restoration */\n              <div className=\"mb-6 pb-4 border-b border-gray-100\">\n                <div className=\"h-7 bg-gray-200 rounded animate-pulse w-48\"></div>\n              </div>\n            ) : user ? (\n              <div className=\"mb-6 pb-4 border-b border-gray-100\">\n                <div className=\"text-lg font-medium text-gray-800\">\n                  Welcome {userProfile?.displayName || userProfile?.username || user.displayName || user.email}\n                </div>\n              </div>\n            ) : null}\n            <nav className=\"space-y-1\">\n              {/* Profile link - show when user is authenticated or during loading */}\n              {(!mounted || loading) ? (\n                /* Show loading skeleton for profile link during auth restoration */\n                <div className=\"py-2 px-4\">\n                  <div className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal rounded-lg\">\n                    <div className=\"w-5 h-5 bg-gray-200 rounded animate-pulse\"></div>\n                    <div className=\"h-5 bg-gray-200 rounded animate-pulse w-16\"></div>\n                  </div>\n                </div>\n              ) : user ? (\n                <div className=\"py-2 px-4\">\n                  <a \n                    href=\"/profile\"\n                    className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                  >\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                    </svg>\n                    Profile\n                  </a>\n                </div>\n              ) : null}\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n                  </svg>\n                  Create Frame\n                </a>\n              </div>\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                  </svg>\n                  Use Frame\n                </a>\n              </div>\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                  </svg>\n                  Explore\n                </a>\n              </div>\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                  </svg>\n                  Leaderboard\n                </a>\n              </div>\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L12 12m6.364 6.364L12 12m0 0L5.636 5.636M12 12l6.364 6.364M12 12L5.636 5.636\" />\n                  </svg>\n                  Remove Ads\n                </a>\n              </div>\n              \n              <div className=\"py-2 px-4\">\n                <a \n                  href=\"#\" \n                  className=\"inline-flex items-center gap-3 py-2 px-3 text-base font-normal text-gray-800 hover:bg-emerald-50 hover:text-emerald-700 rounded-lg transition-colors duration-200\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                  Help Center\n                </a>\n              </div>\n            </nav>\n            \n            {/* Authentication buttons - always accessible at bottom */}\n            <div className=\"mt-8 mb-4\">\n              <div className=\"flex gap-3\">\n                {!mounted || loading ? (\n                  // Show skeleton/placeholder during initial mount and auth restoration to prevent hydration issues and flicker\n                  <div className=\"flex gap-3 w-full\">\n                    <div className=\"flex-1 py-2 px-4 text-sm text-center text-gray-400 border border-gray-300 rounded-full\">\n                      Sign In\n                    </div>\n                    <div className=\"flex-1 py-2 px-4 text-sm text-center text-white bg-gray-400 rounded-full\">\n                      Sign Up\n                    </div>\n                  </div>\n                ) : user ? (\n                  <>\n                    <button \n                      onClick={logout}\n                      className=\"w-full btn-base btn-secondary py-3 px-4 text-sm font-medium\"\n                    >\n                      Sign Out\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    <button \n                      onClick={() => {\n                        router.push('/signin');\n                        setIsMenuOpen(false);\n                      }}\n                      className=\"flex-1 btn-base btn-secondary py-3 px-4 text-sm font-medium\"\n                    >\n                      Sign In\n                    </button>\n                    <button \n                      onClick={() => {\n                        router.push('/signup');\n                        setIsMenuOpen(false);\n                      }}\n                      className=\"flex-1 btn-base btn-primary py-3 px-4 text-sm font-medium\"\n                    >\n                      Sign Up\n                    </button>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":10555},"src/hooks/useFocusTrap.js":{"content":"// Custom hook for managing focus trap in modals\n\nimport { useEffect, useRef } from 'react';\n\nexport const useFocusTrap = (isOpen) => {\n  const modalRef = useRef(null);\n  const previousActiveElementRef = useRef(null);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Store the currently focused element\n    previousActiveElementRef.current = document.activeElement;\n\n    // Find all focusable elements in the modal\n    const getFocusableElements = () => {\n      if (!modalRef.current) return [];\n      \n      const focusableSelectors = [\n        'button:not([disabled])',\n        'input:not([disabled])',\n        'textarea:not([disabled])',\n        'select:not([disabled])',\n        'a[href]',\n        '[tabindex]:not([tabindex=\"-1\"])'\n      ].join(', ');\n      \n      return Array.from(modalRef.current.querySelectorAll(focusableSelectors));\n    };\n\n    // Focus the first focusable element\n    const focusFirstElement = () => {\n      const focusableElements = getFocusableElements();\n      if (focusableElements.length > 0) {\n        focusableElements[0].focus();\n      }\n    };\n\n    // Handle tab key navigation\n    const handleKeyDown = (event) => {\n      if (event.key === 'Tab') {\n        const focusableElements = getFocusableElements();\n        if (focusableElements.length === 0) return;\n\n        const firstElement = focusableElements[0];\n        const lastElement = focusableElements[focusableElements.length - 1];\n\n        if (event.shiftKey) {\n          // Shift + Tab: move focus to last element if currently on first\n          if (document.activeElement === firstElement) {\n            event.preventDefault();\n            lastElement.focus();\n          }\n        } else {\n          // Tab: move focus to first element if currently on last\n          if (document.activeElement === lastElement) {\n            event.preventDefault();\n            firstElement.focus();\n          }\n        }\n      }\n    };\n\n    // Set initial focus after a brief delay to ensure DOM is ready\n    const timeoutId = setTimeout(focusFirstElement, 100);\n\n    // Add event listener for tab navigation\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Disable body scroll\n    document.body.style.overflow = 'hidden';\n\n    // Cleanup function\n    return () => {\n      clearTimeout(timeoutId);\n      document.removeEventListener('keydown', handleKeyDown);\n      \n      // Restore body scroll\n      document.body.style.overflow = '';\n      \n      // Restore focus to previous element\n      if (previousActiveElementRef.current && typeof previousActiveElementRef.current.focus === 'function') {\n        previousActiveElementRef.current.focus();\n      }\n    };\n  }, [isOpen]);\n\n  // Handle Escape key\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleEscapeKey = (event) => {\n      if (event.key === 'Escape') {\n        // This should be handled by the parent component\n        // We'll dispatch a custom event that the modal can listen to\n        const escapeEvent = new CustomEvent('modal-escape');\n        document.dispatchEvent(escapeEvent);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscapeKey);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isOpen]);\n\n  return modalRef;\n};","size_bytes":3265},"src/utils/schemas.js":{"content":"// Zod validation schemas for authentication forms\n\nimport { z } from 'zod';\n\n// Common email schema with normalization\nexport const emailSchema = z\n  .string()\n  .min(1, 'Email is required')\n  .email('Please enter a valid email address')\n  .transform((email) => email.toLowerCase().trim());\n\n// Simple password schema for sign-up - just require 8 characters minimum\nexport const passwordSchema = z\n  .string()\n  .min(1, 'Password is required')\n  .min(8, 'Password must be at least 8 characters');\n\n// Simplified password schema for sign-in (just check if not empty)\nexport const signInPasswordSchema = z\n  .string()\n  .min(1, 'Password is required');\n\n// Name schema\nexport const nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .min(2, 'Name must be at least 2 characters long')\n  .max(50, 'Name must be less than 50 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Name can only contain letters, spaces, hyphens, and apostrophes')\n  .transform((name) => name.trim());\n\n// Sign In Form Schema\nexport const signInSchema = z.object({\n  email: emailSchema,\n  password: signInPasswordSchema,\n});\n\n// Sign Up Form Schema\nexport const signUpSchema = z.object({\n  name: nameSchema,\n  email: emailSchema,\n  password: passwordSchema,\n});\n\n// Forgot Password Form Schema\nexport const forgotPasswordSchema = z.object({\n  email: emailSchema,\n});\n\n// Helper function to extract first validation error message\nexport const getValidationError = (result) => {\n  if (result.success) return null;\n  \n  // Zod uses 'issues' not 'errors'\n  const firstIssue = result.error?.issues?.[0];\n  return firstIssue?.message || 'Validation failed';\n};","size_bytes":1626},"src/utils/validation.js":{"content":"// Validation utilities for authentication forms\n\nexport const validateEmail = (email) => {\n  if (!email) return 'Email is required';\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) return 'Please enter a valid email address';\n  return null;\n};\n\nexport const validatePassword = (password, isSignUp = false) => {\n  if (!password) return 'Password is required';\n  if (isSignUp && password.length < 8) return 'Password must be at least 8 characters';\n  return null;\n};\n\nexport const validateName = (name) => {\n  if (!name) return 'Name is required';\n  if (name.trim().length < 3) return 'Name must be at least 3 characters long';\n  if (name.length > 50) return 'Name must be less than 50 characters';\n  return null;\n};\n\nexport const normalizeEmail = (email) => {\n  return email ? email.toLowerCase().trim() : '';\n};\n\n// Shared form validation function for all authentication forms\nexport const validateForm = (formData, formType = 'signin') => {\n  const errors = {};\n  let firstErrorField = null;\n\n  // Name validation (signup only)\n  if (formType === 'signup') {\n    const name = formData.get('name')?.trim();\n    const nameError = validateName(name);\n    if (nameError) {\n      errors.name = nameError;\n      if (!firstErrorField) firstErrorField = 'name';\n    }\n  }\n\n  // Email validation (all forms)\n  const email = formData.get('email')?.trim();\n  const emailError = validateEmail(email);\n  if (emailError) {\n    errors.email = emailError;\n    if (!firstErrorField) firstErrorField = 'email';\n  }\n\n  // Password validation (signin and signup only)\n  if (formType !== 'forgot-password') {\n    const password = formData.get('password')?.trim();\n    const passwordError = validatePassword(password, formType === 'signup');\n    if (passwordError) {\n      errors.password = passwordError;\n      if (!firstErrorField) firstErrorField = 'password';\n    }\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n    firstErrorField\n  };\n};\n\n// Check password strength and return feedback\nexport const getPasswordStrength = (password) => {\n  if (!password) return { strength: 'none', message: '' };\n  \n  let score = 0;\n  const feedback = [];\n  \n  // Length check\n  if (password.length >= 8) score++;\n  else feedback.push('Use at least 8 characters');\n  \n  // Lowercase check\n  if (/[a-z]/.test(password)) score++;\n  else feedback.push('Add lowercase letters');\n  \n  // Uppercase check\n  if (/[A-Z]/.test(password)) score++;\n  else feedback.push('Add uppercase letters');\n  \n  // Number check\n  if (/\\d/.test(password)) score++;\n  else feedback.push('Add numbers');\n  \n  // Special character check\n  if (/[^A-Za-z0-9]/.test(password)) score++;\n  else feedback.push('Add special characters');\n  \n  // Common patterns check\n  const commonPatterns = [\n    /(.)\\1{2,}/, // Repeated characters\n    /123456|654321|qwerty|password/i // Common sequences\n  ];\n  \n  const hasCommonPattern = commonPatterns.some(pattern => pattern.test(password));\n  if (hasCommonPattern) {\n    feedback.push('Avoid common patterns');\n    score = Math.max(0, score - 1);\n  }\n  \n  const strengthLevels = {\n    0: 'very-weak',\n    1: 'weak', \n    2: 'fair',\n    3: 'good',\n    4: 'strong',\n    5: 'very-strong'\n  };\n  \n  const strengthMessages = {\n    'very-weak': 'Very weak password',\n    'weak': 'Weak password',\n    'fair': 'Fair password',\n    'good': 'Good password',\n    'strong': 'Strong password',\n    'very-strong': 'Very strong password'\n  };\n  \n  const strength = strengthLevels[score];\n  \n  return {\n    strength,\n    score,\n    message: strengthMessages[strength],\n    feedback: feedback,\n    isStrong: score >= 3\n  };\n};","size_bytes":3650},"src/middleware.js":{"content":"import { NextResponse } from 'next/server';\n\nexport function middleware(request) {\n  // Handle CORS for all routes\n  const origin = request.headers.get('origin');\n  const isDevEnvironment = process.env.NODE_ENV === 'development';\n  \n  // Define allowed origins\n  const allowedOrigins = [\n    // Development origins\n    ...(isDevEnvironment ? [\n      'https://*.replit.dev',\n      'https://*.repl.co',\n      'http://localhost:5000',\n      'http://127.0.0.1:5000',\n      'http://localhost',\n      'http://127.0.0.1'\n    ] : []),\n    // Production origins can be added here via environment variable\n    ...(process.env.ALLOWED_ORIGINS ? process.env.ALLOWED_ORIGINS.split(',') : [])\n  ];\n\n  // Check if origin is allowed\n  const isAllowed = allowedOrigins.some(allowedOrigin => {\n    if (allowedOrigin.includes('*')) {\n      // Handle wildcard patterns like https://*.replit.dev safely\n      try {\n        const allowedUrl = new URL(allowedOrigin.replace('*', 'placeholder'));\n        const originUrl = new URL(origin);\n        \n        // Protocol must match\n        if (allowedUrl.protocol !== originUrl.protocol) {\n          return false;\n        }\n        \n        // For wildcard subdomains, check if host ends with the domain\n        const wildcardDomain = allowedUrl.hostname.replace('placeholder', '');\n        if (wildcardDomain.startsWith('.')) {\n          // Pattern like https://*.replit.dev - require actual subdomain\n          const domain = wildcardDomain.substring(1); // Remove leading dot\n          return originUrl.hostname.endsWith('.' + domain);\n        }\n        \n        return false;\n      } catch (e) {\n        // Invalid URL format, no match\n        return false;\n      }\n    }\n    return origin === allowedOrigin;\n  });\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    const response = new NextResponse(null, { status: 200 });\n    \n    if (isAllowed && origin) {\n      response.headers.set('Access-Control-Allow-Origin', origin);\n    }\n    \n    // Echo requested method or use defaults\n    const requestedMethod = request.headers.get('access-control-request-method');\n    response.headers.set('Access-Control-Allow-Methods', \n      requestedMethod || 'GET, POST, PUT, DELETE, OPTIONS');\n    \n    // Echo requested headers or use defaults\n    const requestedHeaders = request.headers.get('access-control-request-headers');\n    response.headers.set('Access-Control-Allow-Headers', \n      requestedHeaders || 'Content-Type, Authorization, X-Requested-With');\n    \n    response.headers.set('Access-Control-Max-Age', '86400');\n    response.headers.set('Vary', 'Origin, Access-Control-Request-Headers');\n    \n    return response;\n  }\n\n  // Handle actual requests\n  const response = NextResponse.next();\n  \n  if (isAllowed && origin) {\n    response.headers.set('Access-Control-Allow-Origin', origin);\n    response.headers.set('Access-Control-Allow-Credentials', 'true');\n  }\n  \n  response.headers.set('Vary', 'Origin');\n\n  // Add cache control for non-static routes in development\n  if (isDevEnvironment && !request.nextUrl.pathname.startsWith('/_next/static')) {\n    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n  }\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Include API routes for proper CORS handling\n     */\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n};","size_bytes":3564},"src/components/ProfilePage.js":{"content":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRouter } from 'next/navigation';\nimport { \n  getUserProfile, \n  getUserProfileByUsername, \n  getUserStats,\n  getUserFrames \n} from '../lib/firestore';\n\nexport default function ProfilePage({ isOwnProfile = false, username = null }) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const [profileLoading, setProfileLoading] = useState(true);\n  const [userData, setUserData] = useState(null);\n  const [userStats, setUserStats] = useState({ supportersCount: 0, campaignsCount: 0 });\n  const [campaigns, setCampaigns] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // If viewing own profile, redirect to login if not authenticated\n    if (isOwnProfile && !loading && !user) {\n      router.push('/');\n      return;\n    }\n\n    const loadProfileData = async () => {\n      setProfileLoading(true);\n      setError(null);\n      \n      try {\n        let profileUser = null;\n        \n        if (isOwnProfile && user) {\n          // Load current user's profile\n          profileUser = await getUserProfile(user.uid);\n          if (!profileUser) {\n            // Create fallback profile data for new users\n            profileUser = {\n              id: user.uid,\n              displayName: user.displayName || user.email || 'User',\n              username: user.email?.split('@')[0] || 'user',\n              email: user.email,\n              photoURL: user.photoURL,\n              bio: '',\n              profileImage: user.photoURL || 'https://via.placeholder.com/120x120/059669/FFFFFF?text=U',\n              bannerImage: 'https://via.placeholder.com/1200x300/10B981/FFFFFF?text=Banner',\n              supportersCount: 0,\n              campaignsCount: 0,\n              createdAt: new Date()\n            };\n          }\n        } else if (username) {\n          // Load profile by username\n          profileUser = await getUserProfileByUsername(username);\n          if (!profileUser) {\n            setError('User not found');\n            setProfileLoading(false);\n            return;\n          }\n        }\n\n        if (profileUser) {\n          setUserData(profileUser);\n          \n          // Load user statistics with safe defaults\n          try {\n            const stats = await getUserStats(profileUser.id);\n            setUserStats({\n              supportersCount: stats?.supportersCount || 0,\n              campaignsCount: stats?.campaignsCount || 0\n            });\n          } catch (statError) {\n            console.error('Error loading user stats:', statError);\n            setUserStats({ supportersCount: 0, campaignsCount: 0 });\n          }\n          \n          // Load user's campaigns/frames with safe defaults\n          try {\n            const userFrames = await getUserFrames(profileUser.id);\n            if (Array.isArray(userFrames)) {\n              setCampaigns(userFrames.map(frame => ({\n                id: frame.id,\n                title: frame.title || 'Untitled Campaign',\n                thumbnail: frame.frameImageUrl || 'https://via.placeholder.com/300x200/059669/FFFFFF?text=Frame',\n                supportersCount: frame.usageCount || 0\n              })));\n            } else {\n              setCampaigns([]);\n            }\n          } catch (frameError) {\n            console.error('Error loading user frames:', frameError);\n            setCampaigns([]);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading profile data:', error);\n        setError('Failed to load profile data');\n      } finally {\n        setProfileLoading(false);\n      }\n    };\n\n    if (!loading) {\n      loadProfileData();\n    }\n  }, [user, loading, isOwnProfile, username, router]);\n\n  if (loading || profileLoading) {\n    return <ProfileSkeleton />;\n  }\n\n  if (isOwnProfile && !user) {\n    return null; // Will redirect\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mb-6\">\n            <svg className=\"w-12 h-12 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{error}</h3>\n          <p className=\"text-gray-600 mb-6\">The profile you're looking for could not be found.</p>\n          <button \n            onClick={() => router.push('/')}\n            className=\"btn-base btn-primary px-6 py-3 font-medium\"\n          >\n            Go Back Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!userData) {\n    return <ProfileSkeleton />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Banner Section */}\n      <div className=\"relative h-48 sm:h-56 md:h-64 lg:h-80 bg-gradient-to-r from-emerald-500 to-emerald-600 overflow-hidden\">\n        {userData.bannerImage && userData.bannerImage.trim() ? (\n          <img\n            src={userData.bannerImage}\n            alt=\"Profile Banner\"\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full bg-gradient-to-r from-emerald-500 to-emerald-600\"></div>\n        )}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\"></div>\n      </div>\n\n      {/* Profile Content */}\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"relative\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            \n            {/* Left Side - Profile Info */}\n            <div className=\"lg:w-1/3\">\n              <div className=\"bg-white rounded-2xl shadow-lg p-6 relative\">\n                {/* Profile Image */}\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"relative\">\n                    {userData.profileImage && userData.profileImage.trim() ? (\n                      <img\n                        src={userData.profileImage}\n                        alt={userData.displayName}\n                        className=\"w-32 h-32 rounded-full border-4 border-white shadow-xl object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-32 h-32 rounded-full border-4 border-white shadow-xl bg-gradient-to-br from-emerald-400 to-emerald-600 flex items-center justify-center\">\n                        <span className=\"text-white text-2xl font-bold\">\n                          {userData.displayName?.charAt(0)?.toUpperCase() || 'U'}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Name and Username */}\n                  <div className=\"text-center mt-4\">\n                    <h1 className={`font-bold text-gray-900 ${\n                      userData.displayName?.length <= 15 ? 'text-2xl' :\n                      userData.displayName?.length <= 25 ? 'text-xl' :\n                      userData.displayName?.length <= 35 ? 'text-lg' : 'text-base'\n                    } break-words max-w-full leading-tight`} title={userData.displayName}>\n                      {userData.displayName}\n                    </h1>\n                    <p className={`text-emerald-600 font-medium ${\n                      userData.username?.length <= 20 ? 'text-base' : 'text-sm'\n                    } break-words`}>@{userData.username}</p>\n                  </div>\n                  \n                  {/* Bio */}\n                  <div className=\"mt-4 w-full\">\n                    <p className=\"text-gray-600 text-center leading-relaxed whitespace-pre-wrap\">\n                      {userData.bio}\n                    </p>\n                  </div>\n                  \n                  {isOwnProfile && (\n                    <button \n                      onClick={() => router.push('/profile/edit')}\n                      className=\"btn-base btn-primary mt-4 w-full py-2 px-4 font-medium\"\n                    >\n                      Edit Profile\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side - Stats and Content */}\n            <div className=\"lg:w-2/3\">\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-3 gap-2 sm:gap-4 mb-8\">\n                <div className=\"bg-white rounded-xl shadow-lg p-3 sm:p-6 text-center\">\n                  <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-emerald-600\">{userStats.supportersCount}</div>\n                  <div className=\"text-xs sm:text-sm lg:text-base text-gray-600 font-medium\">Supporters</div>\n                </div>\n                \n                <div className=\"bg-white rounded-xl shadow-lg p-3 sm:p-6 text-center\">\n                  <div className=\"text-xl sm:text-2xl lg:text-3xl font-bold text-emerald-600\">{userStats.campaignsCount}</div>\n                  <div className=\"text-xs sm:text-sm lg:text-base text-gray-600 font-medium\">Campaigns</div>\n                </div>\n                \n                <div className=\"bg-white rounded-xl shadow-lg p-3 sm:p-6 text-center\">\n                  <div className=\"text-sm sm:text-lg lg:text-xl font-bold text-emerald-600\">\n                    {userData.createdAt ? \n                      new Date(userData.createdAt.seconds ? userData.createdAt.seconds * 1000 : userData.createdAt).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric',\n                        year: 'numeric' \n                      }) : \n                      'Recently'\n                    }\n                  </div>\n                  <div className=\"text-xs sm:text-sm lg:text-base text-gray-600 font-medium\">Joined since</div>\n                </div>\n              </div>\n\n              {/* Campaigns Section */}\n              <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h2 className=\"text-xl font-bold text-gray-900\">Campaigns</h2>\n                  {isOwnProfile && (\n                    <button className=\"btn-base btn-primary px-3 py-1.5 text-sm font-medium\">\n                      Create Campaign\n                    </button>\n                  )}\n                </div>\n\n                {/* Campaigns Grid or Empty State */}\n                {campaigns.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {campaigns.map((campaign) => (\n                      <div key={campaign.id} className=\"group cursor-pointer\">\n                        <div className=\"relative overflow-hidden rounded-xl bg-gray-100\">\n                          <img\n                            src={campaign.thumbnail}\n                            alt={campaign.title}\n                            className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200\"\n                          />\n                          <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200\"></div>\n                          <div className=\"absolute bottom-4 left-4 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                            <h3 className=\"font-bold text-lg\">{campaign.title}</h3>\n                            <p className=\"text-sm\">{campaign.supportersCount} supporters</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-16\">\n                    <div className=\"mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-6\">\n                      <svg className=\"w-12 h-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n                      </svg>\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">No Campaigns Yet</h3>\n                    <p className=\"text-gray-600 mb-6\">Create Campaigns, and share to Frame</p>\n                    {isOwnProfile && (\n                      <button className=\"btn-base btn-primary px-4 py-2 text-sm font-medium\">\n                        Create Your First Campaign\n                      </button>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\n// Loading skeleton component\nfunction ProfileSkeleton() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Banner Skeleton */}\n      <div className=\"h-48 sm:h-56 md:h-64 lg:h-80 bg-gray-300 animate-pulse\"></div>\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"relative\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            \n            {/* Left Side Skeleton */}\n            <div className=\"lg:w-1/3\">\n              <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-32 h-32 bg-gray-300 rounded-full animate-pulse\"></div>\n                  <div className=\"mt-4 space-y-2\">\n                    <div className=\"h-6 bg-gray-300 rounded w-32 animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-300 rounded w-24 animate-pulse\"></div>\n                  </div>\n                  <div className=\"mt-4 w-full space-y-2\">\n                    <div className=\"h-4 bg-gray-300 rounded w-full animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-300 rounded w-3/4 animate-pulse\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side Skeleton */}\n            <div className=\"lg:w-2/3\">\n              <div className=\"grid grid-cols-3 gap-2 sm:gap-4 mb-8\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-xl shadow-lg p-3 sm:p-6\">\n                    <div className=\"h-6 sm:h-8 bg-gray-300 rounded w-12 sm:w-16 mx-auto animate-pulse mb-2\"></div>\n                    <div className=\"h-3 sm:h-4 bg-gray-300 rounded w-16 sm:w-20 mx-auto animate-pulse\"></div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"bg-white rounded-2xl shadow-lg p-6\">\n                <div className=\"h-8 bg-gray-300 rounded w-32 animate-pulse mb-6\"></div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {[...Array(6)].map((_, i) => (\n                    <div key={i} className=\"h-48 bg-gray-300 rounded-xl animate-pulse\"></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15574},"src/hooks/useBodyScrollLock.js":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\n\n/**\n * Custom hook to prevent body scrolling when components like modals or sidebars are open\n * @param {boolean} isLocked - Whether to lock body scroll\n */\nexport function useBodyScrollLock(isLocked) {\n  useEffect(() => {\n    if (!isLocked) return;\n\n    // Save the original overflow value\n    const originalOverflow = document.body.style.overflow;\n    const originalPaddingRight = document.body.style.paddingRight;\n\n    // Get the scrollbar width to prevent layout shift\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n\n    // Apply scroll lock\n    document.body.style.overflow = 'hidden';\n    \n    // Add padding to compensate for scrollbar removal (prevents layout shift)\n    if (scrollbarWidth > 0) {\n      document.body.style.paddingRight = `${scrollbarWidth}px`;\n    }\n\n    // Cleanup function\n    return () => {\n      document.body.style.overflow = originalOverflow;\n      document.body.style.paddingRight = originalPaddingRight;\n    };\n  }, [isLocked]);\n}","size_bytes":1052},"src/app/[username]/page.js":{"content":"// Dynamic route for viewing other user profiles\nimport InteractiveClient from \"../../components/InteractiveClient\";\nimport ProfilePage from \"../../components/ProfilePage\";\n\nexport async function generateMetadata({ params }) {\n  const { username } = params;\n  return {\n    title: `@${username} - Frame Your Voice`,\n    description: `View ${username}'s profile and campaigns`,\n  };\n}\n\nexport default function UserProfile({ params }) {\n  const { username } = params;\n  \n  return (\n    <InteractiveClient>\n      <ProfilePage isOwnProfile={false} username={username} />\n    </InteractiveClient>\n  );\n}","size_bytes":597},"src/components/UserOnboardingWrapper.js":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '../hooks/useAuth';\nimport { getUserProfile } from '../lib/firestore';\n\nexport default function UserOnboardingWrapper({ children }) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const [checkingProfile, setCheckingProfile] = useState(false);\n\n  useEffect(() => {\n    const checkProfileStatus = async () => {\n      if (!user || loading) return;\n\n      // For email/password users, check if email is verified first\n      if (user.providerData[0]?.providerId === 'password' && !user.emailVerified) {\n        return;\n      }\n\n      setCheckingProfile(true);\n      \n      // Add a small delay to ensure Firebase auth state has stabilized after verification\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      try {\n        let userProfile = await getUserProfile(user.uid);\n        \n        // If profile doesn't exist, wait a bit and try again (profile creation might be in progress)\n        if (!userProfile) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          userProfile = await getUserProfile(user.uid);\n        }\n        \n        // If still no profile, this is unexpected\n        if (!userProfile) {\n          return;\n        }\n        \n        \n        // Navigate to onboarding page if user exists but hasn't completed profile setup\n        if (userProfile && !userProfile.profileCompleted) {\n          router.push('/onboarding');\n        }\n      } catch (error) {\n      } finally {\n        setCheckingProfile(false);\n      }\n    };\n\n    checkProfileStatus();\n  }, [user, loading]);\n\n\n  // Don't render welcome popup if still loading or checking\n  if (loading || checkingProfile) {\n    return children;\n  }\n\n  return children;\n}","size_bytes":1837},"src/data/countries.js":{"content":"// List of countries for dropdown selection\nexport const countries = [\n  { code: 'AF', name: 'Afghanistan' },\n  { code: 'AL', name: 'Albania' },\n  { code: 'DZ', name: 'Algeria' },\n  { code: 'AS', name: 'American Samoa' },\n  { code: 'AD', name: 'Andorra' },\n  { code: 'AO', name: 'Angola' },\n  { code: 'AI', name: 'Anguilla' },\n  { code: 'AQ', name: 'Antarctica' },\n  { code: 'AG', name: 'Antigua and Barbuda' },\n  { code: 'AR', name: 'Argentina' },\n  { code: 'AM', name: 'Armenia' },\n  { code: 'AW', name: 'Aruba' },\n  { code: 'AU', name: 'Australia' },\n  { code: 'AT', name: 'Austria' },\n  { code: 'AZ', name: 'Azerbaijan' },\n  { code: 'BS', name: 'Bahamas' },\n  { code: 'BH', name: 'Bahrain' },\n  { code: 'BD', name: 'Bangladesh' },\n  { code: 'BB', name: 'Barbados' },\n  { code: 'BY', name: 'Belarus' },\n  { code: 'BE', name: 'Belgium' },\n  { code: 'BZ', name: 'Belize' },\n  { code: 'BJ', name: 'Benin' },\n  { code: 'BM', name: 'Bermuda' },\n  { code: 'BT', name: 'Bhutan' },\n  { code: 'BO', name: 'Bolivia' },\n  { code: 'BA', name: 'Bosnia and Herzegovina' },\n  { code: 'BW', name: 'Botswana' },\n  { code: 'BV', name: 'Bouvet Island' },\n  { code: 'BR', name: 'Brazil' },\n  { code: 'IO', name: 'British Indian Ocean Territory' },\n  { code: 'BN', name: 'Brunei Darussalam' },\n  { code: 'BG', name: 'Bulgaria' },\n  { code: 'BF', name: 'Burkina Faso' },\n  { code: 'BI', name: 'Burundi' },\n  { code: 'KH', name: 'Cambodia' },\n  { code: 'CM', name: 'Cameroon' },\n  { code: 'CA', name: 'Canada' },\n  { code: 'CV', name: 'Cape Verde' },\n  { code: 'KY', name: 'Cayman Islands' },\n  { code: 'CF', name: 'Central African Republic' },\n  { code: 'TD', name: 'Chad' },\n  { code: 'CL', name: 'Chile' },\n  { code: 'CN', name: 'China' },\n  { code: 'CX', name: 'Christmas Island' },\n  { code: 'CC', name: 'Cocos (Keeling) Islands' },\n  { code: 'CO', name: 'Colombia' },\n  { code: 'KM', name: 'Comoros' },\n  { code: 'CG', name: 'Congo' },\n  { code: 'CD', name: 'Congo, Democratic Republic' },\n  { code: 'CK', name: 'Cook Islands' },\n  { code: 'CR', name: 'Costa Rica' },\n  { code: 'CI', name: 'Cote D\\'Ivoire' },\n  { code: 'HR', name: 'Croatia' },\n  { code: 'CU', name: 'Cuba' },\n  { code: 'CY', name: 'Cyprus' },\n  { code: 'CZ', name: 'Czech Republic' },\n  { code: 'DK', name: 'Denmark' },\n  { code: 'DJ', name: 'Djibouti' },\n  { code: 'DM', name: 'Dominica' },\n  { code: 'DO', name: 'Dominican Republic' },\n  { code: 'EC', name: 'Ecuador' },\n  { code: 'EG', name: 'Egypt' },\n  { code: 'SV', name: 'El Salvador' },\n  { code: 'GQ', name: 'Equatorial Guinea' },\n  { code: 'ER', name: 'Eritrea' },\n  { code: 'EE', name: 'Estonia' },\n  { code: 'ET', name: 'Ethiopia' },\n  { code: 'FK', name: 'Falkland Islands (Malvinas)' },\n  { code: 'FO', name: 'Faroe Islands' },\n  { code: 'FJ', name: 'Fiji' },\n  { code: 'FI', name: 'Finland' },\n  { code: 'FR', name: 'France' },\n  { code: 'GF', name: 'French Guiana' },\n  { code: 'PF', name: 'French Polynesia' },\n  { code: 'TF', name: 'French Southern Territories' },\n  { code: 'GA', name: 'Gabon' },\n  { code: 'GM', name: 'Gambia' },\n  { code: 'GE', name: 'Georgia' },\n  { code: 'DE', name: 'Germany' },\n  { code: 'GH', name: 'Ghana' },\n  { code: 'GI', name: 'Gibraltar' },\n  { code: 'GR', name: 'Greece' },\n  { code: 'GL', name: 'Greenland' },\n  { code: 'GD', name: 'Grenada' },\n  { code: 'GP', name: 'Guadeloupe' },\n  { code: 'GU', name: 'Guam' },\n  { code: 'GT', name: 'Guatemala' },\n  { code: 'GG', name: 'Guernsey' },\n  { code: 'GN', name: 'Guinea' },\n  { code: 'GW', name: 'Guinea-Bissau' },\n  { code: 'GY', name: 'Guyana' },\n  { code: 'HT', name: 'Haiti' },\n  { code: 'HM', name: 'Heard Island and Mcdonald Islands' },\n  { code: 'VA', name: 'Holy See (Vatican City State)' },\n  { code: 'HN', name: 'Honduras' },\n  { code: 'HK', name: 'Hong Kong' },\n  { code: 'HU', name: 'Hungary' },\n  { code: 'IS', name: 'Iceland' },\n  { code: 'IN', name: 'India' },\n  { code: 'ID', name: 'Indonesia' },\n  { code: 'IR', name: 'Iran, Islamic Republic Of' },\n  { code: 'IQ', name: 'Iraq' },\n  { code: 'IE', name: 'Ireland' },\n  { code: 'IM', name: 'Isle of Man' },\n  { code: 'IL', name: 'Israel' },\n  { code: 'IT', name: 'Italy' },\n  { code: 'JM', name: 'Jamaica' },\n  { code: 'JP', name: 'Japan' },\n  { code: 'JE', name: 'Jersey' },\n  { code: 'JO', name: 'Jordan' },\n  { code: 'KZ', name: 'Kazakhstan' },\n  { code: 'KE', name: 'Kenya' },\n  { code: 'KI', name: 'Kiribati' },\n  { code: 'KP', name: 'Korea, Democratic People\\'s Republic of' },\n  { code: 'KR', name: 'Korea, Republic of' },\n  { code: 'KW', name: 'Kuwait' },\n  { code: 'KG', name: 'Kyrgyzstan' },\n  { code: 'LA', name: 'Lao People\\'s Democratic Republic' },\n  { code: 'LV', name: 'Latvia' },\n  { code: 'LB', name: 'Lebanon' },\n  { code: 'LS', name: 'Lesotho' },\n  { code: 'LR', name: 'Liberia' },\n  { code: 'LY', name: 'Libyan Arab Jamahiriya' },\n  { code: 'LI', name: 'Liechtenstein' },\n  { code: 'LT', name: 'Lithuania' },\n  { code: 'LU', name: 'Luxembourg' },\n  { code: 'MO', name: 'Macao' },\n  { code: 'MK', name: 'Macedonia, The Former Yugoslav Republic of' },\n  { code: 'MG', name: 'Madagascar' },\n  { code: 'MW', name: 'Malawi' },\n  { code: 'MY', name: 'Malaysia' },\n  { code: 'MV', name: 'Maldives' },\n  { code: 'ML', name: 'Mali' },\n  { code: 'MT', name: 'Malta' },\n  { code: 'MH', name: 'Marshall Islands' },\n  { code: 'MQ', name: 'Martinique' },\n  { code: 'MR', name: 'Mauritania' },\n  { code: 'MU', name: 'Mauritius' },\n  { code: 'YT', name: 'Mayotte' },\n  { code: 'MX', name: 'Mexico' },\n  { code: 'FM', name: 'Micronesia, Federated States of' },\n  { code: 'MD', name: 'Moldova, Republic of' },\n  { code: 'MC', name: 'Monaco' },\n  { code: 'MN', name: 'Mongolia' },\n  { code: 'ME', name: 'Montenegro' },\n  { code: 'MS', name: 'Montserrat' },\n  { code: 'MA', name: 'Morocco' },\n  { code: 'MZ', name: 'Mozambique' },\n  { code: 'MM', name: 'Myanmar' },\n  { code: 'NA', name: 'Namibia' },\n  { code: 'NR', name: 'Nauru' },\n  { code: 'NP', name: 'Nepal' },\n  { code: 'NL', name: 'Netherlands' },\n  { code: 'AN', name: 'Netherlands Antilles' },\n  { code: 'NC', name: 'New Caledonia' },\n  { code: 'NZ', name: 'New Zealand' },\n  { code: 'NI', name: 'Nicaragua' },\n  { code: 'NE', name: 'Niger' },\n  { code: 'NG', name: 'Nigeria' },\n  { code: 'NU', name: 'Niue' },\n  { code: 'NF', name: 'Norfolk Island' },\n  { code: 'MP', name: 'Northern Mariana Islands' },\n  { code: 'NO', name: 'Norway' },\n  { code: 'OM', name: 'Oman' },\n  { code: 'PK', name: 'Pakistan' },\n  { code: 'PW', name: 'Palau' },\n  { code: 'PS', name: 'Palestinian Territory, Occupied' },\n  { code: 'PA', name: 'Panama' },\n  { code: 'PG', name: 'Papua New Guinea' },\n  { code: 'PY', name: 'Paraguay' },\n  { code: 'PE', name: 'Peru' },\n  { code: 'PH', name: 'Philippines' },\n  { code: 'PN', name: 'Pitcairn' },\n  { code: 'PL', name: 'Poland' },\n  { code: 'PT', name: 'Portugal' },\n  { code: 'PR', name: 'Puerto Rico' },\n  { code: 'QA', name: 'Qatar' },\n  { code: 'RE', name: 'Reunion' },\n  { code: 'RO', name: 'Romania' },\n  { code: 'RU', name: 'Russian Federation' },\n  { code: 'RW', name: 'Rwanda' },\n  { code: 'BL', name: 'Saint Barthelemy' },\n  { code: 'SH', name: 'Saint Helena' },\n  { code: 'KN', name: 'Saint Kitts and Nevis' },\n  { code: 'LC', name: 'Saint Lucia' },\n  { code: 'MF', name: 'Saint Martin' },\n  { code: 'PM', name: 'Saint Pierre and Miquelon' },\n  { code: 'VC', name: 'Saint Vincent and the Grenadines' },\n  { code: 'WS', name: 'Samoa' },\n  { code: 'SM', name: 'San Marino' },\n  { code: 'ST', name: 'Sao Tome and Principe' },\n  { code: 'SA', name: 'Saudi Arabia' },\n  { code: 'SN', name: 'Senegal' },\n  { code: 'RS', name: 'Serbia' },\n  { code: 'SC', name: 'Seychelles' },\n  { code: 'SL', name: 'Sierra Leone' },\n  { code: 'SG', name: 'Singapore' },\n  { code: 'SK', name: 'Slovakia' },\n  { code: 'SI', name: 'Slovenia' },\n  { code: 'SB', name: 'Solomon Islands' },\n  { code: 'SO', name: 'Somalia' },\n  { code: 'ZA', name: 'South Africa' },\n  { code: 'GS', name: 'South Georgia and the South Sandwich Islands' },\n  { code: 'ES', name: 'Spain' },\n  { code: 'LK', name: 'Sri Lanka' },\n  { code: 'SD', name: 'Sudan' },\n  { code: 'SR', name: 'Suriname' },\n  { code: 'SJ', name: 'Svalbard and Jan Mayen' },\n  { code: 'SZ', name: 'Swaziland' },\n  { code: 'SE', name: 'Sweden' },\n  { code: 'CH', name: 'Switzerland' },\n  { code: 'SY', name: 'Syrian Arab Republic' },\n  { code: 'TW', name: 'Taiwan' },\n  { code: 'TJ', name: 'Tajikistan' },\n  { code: 'TZ', name: 'Tanzania, United Republic of' },\n  { code: 'TH', name: 'Thailand' },\n  { code: 'TL', name: 'Timor-Leste' },\n  { code: 'TG', name: 'Togo' },\n  { code: 'TK', name: 'Tokelau' },\n  { code: 'TO', name: 'Tonga' },\n  { code: 'TT', name: 'Trinidad and Tobago' },\n  { code: 'TN', name: 'Tunisia' },\n  { code: 'TR', name: 'Turkey' },\n  { code: 'TM', name: 'Turkmenistan' },\n  { code: 'TC', name: 'Turks and Caicos Islands' },\n  { code: 'TV', name: 'Tuvalu' },\n  { code: 'UG', name: 'Uganda' },\n  { code: 'UA', name: 'Ukraine' },\n  { code: 'AE', name: 'United Arab Emirates' },\n  { code: 'GB', name: 'United Kingdom' },\n  { code: 'US', name: 'United States' },\n  { code: 'UM', name: 'United States Minor Outlying Islands' },\n  { code: 'UY', name: 'Uruguay' },\n  { code: 'UZ', name: 'Uzbekistan' },\n  { code: 'VU', name: 'Vanuatu' },\n  { code: 'VE', name: 'Venezuela' },\n  { code: 'VN', name: 'Viet Nam' },\n  { code: 'VG', name: 'Virgin Islands, British' },\n  { code: 'VI', name: 'Virgin Islands, U.S.' },\n  { code: 'WF', name: 'Wallis and Futuna' },\n  { code: 'EH', name: 'Western Sahara' },\n  { code: 'YE', name: 'Yemen' },\n  { code: 'ZM', name: 'Zambia' },\n  { code: 'ZW', name: 'Zimbabwe' }\n];","size_bytes":9599},"src/app/api/storage/delete/route.js":{"content":"import { NextResponse } from 'next/server'\nimport { verifyIdToken } from '../../../../lib/firebaseAdmin'\nimport { supabaseAdmin } from '../../../../lib/supabase-admin'\nimport { headers } from 'next/headers'\n\n// Force Node.js runtime for server-side operations\nexport const runtime = 'nodejs'\n\nexport async function DELETE(request) {\n  try {\n    // Get the authorization header\n    const headersList = headers()\n    const authorization = headersList.get('authorization')\n    \n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 })\n    }\n\n    const token = authorization.replace('Bearer ', '')\n    \n    // Verify Firebase ID token\n    let decodedToken\n    try {\n      decodedToken = await verifyIdToken(token)\n    } catch (error) {\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    const { path } = await request.json()\n    \n    if (!path) {\n      return NextResponse.json({ error: 'path is required' }, { status: 400 })\n    }\n\n    // Verify user owns this file - handle different folder structures\n    const allowedPrefixes = [\n      `uploads/${decodedToken.uid}/`,\n      `profile-images/${decodedToken.uid}/`,\n      `documents/${decodedToken.uid}/`,\n      `temp/${decodedToken.uid}/`\n    ]\n    \n    const hasValidPrefix = allowedPrefixes.some(prefix => path.startsWith(prefix))\n    if (!hasValidPrefix) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Delete the file\n    const { error } = await supabaseAdmin.storage\n      .from('uploads')\n      .remove([path])\n\n    if (error) {\n      console.error('Supabase error:', error)\n      return NextResponse.json({ error: 'Failed to delete file' }, { status: 500 })\n    }\n\n    return NextResponse.json({ success: true })\n\n  } catch (error) {\n    console.error('File deletion error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":2008},"src/app/api/storage/list/route.js":{"content":"import { NextResponse } from 'next/server'\nimport { verifyIdToken } from '../../../../lib/firebaseAdmin'\nimport { supabaseAdmin } from '../../../../lib/supabase-admin'\nimport { headers } from 'next/headers'\n\n// Force Node.js runtime for server-side operations\nexport const runtime = 'nodejs'\n\nexport async function GET(request) {\n  try {\n    // Get the authorization header\n    const headersList = headers()\n    const authorization = headersList.get('authorization')\n    \n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 })\n    }\n\n    const token = authorization.replace('Bearer ', '')\n    \n    // Verify Firebase ID token\n    let decodedToken\n    try {\n      decodedToken = await verifyIdToken(token)\n    } catch (error) {\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    const { searchParams } = new URL(request.url)\n    const folder = searchParams.get('folder') || 'uploads'\n    const limit = Math.min(parseInt(searchParams.get('limit')) || 100, 1000) // Cap at 1000\n    const offset = Math.max(parseInt(searchParams.get('offset')) || 0, 0) // Ensure non-negative\n    \n    // Validate folder\n    const allowedFolders = ['uploads', 'profile-images', 'documents', 'temp']\n    if (!allowedFolders.includes(folder)) {\n      return NextResponse.json({ error: 'Invalid folder' }, { status: 400 })\n    }\n\n    // List files in user's folder only\n    const userFolder = `${folder}/${decodedToken.uid}`\n    \n    const { data, error } = await supabaseAdmin.storage\n      .from('uploads')\n      .list(userFolder, {\n        limit,\n        offset,\n        sortBy: { column: 'name', order: 'desc' }\n      })\n\n    if (error) {\n      console.error('Supabase error:', error)\n      return NextResponse.json({ error: 'Failed to list files' }, { status: 500 })\n    }\n\n    // Add full paths to the response\n    const filesWithPaths = data.map(file => ({\n      ...file,\n      fullPath: `${userFolder}/${file.name}`\n    }))\n\n    return NextResponse.json({ files: filesWithPaths })\n\n  } catch (error) {\n    console.error('File listing error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":2262},"src/app/api/storage/signed-url/route.js":{"content":"import { NextResponse } from 'next/server'\nimport { verifyIdToken } from '../../../../lib/firebaseAdmin'\nimport { supabaseAdmin } from '../../../../lib/supabase-admin'\nimport { headers } from 'next/headers'\n\n// Force Node.js runtime for server-side operations\nexport const runtime = 'nodejs'\n\nexport async function POST(request) {\n  try {\n    // Get the authorization header\n    const headersList = headers()\n    const authorization = headersList.get('authorization')\n    \n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 })\n    }\n\n    const token = authorization.replace('Bearer ', '')\n    \n    // Verify Firebase ID token\n    let decodedToken\n    try {\n      decodedToken = await verifyIdToken(token)\n    } catch (error) {\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    const { path, expiresIn = 3600 } = await request.json()\n    \n    if (!path) {\n      return NextResponse.json({ error: 'path is required' }, { status: 400 })\n    }\n\n    // Verify user owns this file - handle different folder structures\n    const allowedPrefixes = [\n      `uploads/${decodedToken.uid}/`,\n      `profile-images/${decodedToken.uid}/`,\n      `documents/${decodedToken.uid}/`,\n      `temp/${decodedToken.uid}/`\n    ]\n    \n    const hasValidPrefix = allowedPrefixes.some(prefix => path.startsWith(prefix))\n    if (!hasValidPrefix) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Generate signed download URL\n    const { data, error } = await supabaseAdmin.storage\n      .from('uploads')\n      .createSignedUrl(path, expiresIn)\n\n    if (error) {\n      console.error('Supabase error:', error)\n      return NextResponse.json({ error: 'Failed to create signed URL' }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      signedUrl: data.signedUrl\n    })\n\n  } catch (error) {\n    console.error('Signed URL generation error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":2097},"src/app/api/storage/upload-url/route.js":{"content":"import { NextResponse } from 'next/server'\nimport { verifyIdToken } from '../../../../lib/firebaseAdmin'\nimport { supabaseAdmin } from '../../../../lib/supabase-admin'\nimport { headers } from 'next/headers'\n\n// Force Node.js runtime for server-side operations\nexport const runtime = 'nodejs'\n\nexport async function POST(request) {\n  try {\n    // Get the authorization header\n    const headersList = headers()\n    const authorization = headersList.get('authorization')\n    \n    if (!authorization || !authorization.startsWith('Bearer ')) {\n      return NextResponse.json({ error: 'No authorization token provided' }, { status: 401 })\n    }\n\n    const token = authorization.replace('Bearer ', '')\n    \n    // Verify Firebase ID token\n    let decodedToken\n    try {\n      decodedToken = await verifyIdToken(token)\n    } catch (error) {\n      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })\n    }\n\n    const { fileName, fileType, folder = 'uploads' } = await request.json()\n    \n    // Validate folder (whitelist allowed folders)\n    const allowedFolders = ['uploads', 'profile-images', 'documents', 'temp']\n    if (!allowedFolders.includes(folder)) {\n      return NextResponse.json({ error: 'Invalid folder' }, { status: 400 })\n    }\n    \n    if (!fileName) {\n      return NextResponse.json({ error: 'fileName is required' }, { status: 400 })\n    }\n\n    // Create user-specific path\n    const timestamp = Date.now()\n    const sanitizedFileName = fileName.replace(/[^a-zA-Z0-9.-]/g, '_')\n    const filePath = `${folder}/${decodedToken.uid}/${timestamp}-${sanitizedFileName}`\n\n    // Generate signed upload URL (valid for 1 hour)\n    const { data, error } = await supabaseAdmin.storage\n      .from('uploads')\n      .createSignedUploadUrl(filePath)\n\n    if (error) {\n      console.error('Supabase error:', error)\n      return NextResponse.json({ error: 'Failed to create upload URL' }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      uploadUrl: data.signedUrl,\n      path: filePath,\n      token: data.token\n    })\n\n  } catch (error) {\n    console.error('Upload URL generation error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":2208},"src/hooks/useSecureStorage.js":{"content":"// Custom hook for secure storage operations\nimport { useState, useCallback } from 'react'\nimport { uploadFile, uploadFileWithProgress, getSignedUrl, deleteFile, listFiles } from '../lib/supabase'\nimport { useAuth } from './useAuth'\n\nexport const useSecureStorage = () => {\n  const { user } = useAuth()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [progress, setProgress] = useState(0)\n\n  const handleError = useCallback((error) => {\n    console.error('Storage operation error:', error)\n    setError(error.message || 'An error occurred')\n    return null\n  }, [])\n\n  const upload = useCallback(async (file, folder = 'uploads', withProgress = false) => {\n    if (!user) {\n      throw new Error('User must be authenticated to upload files')\n    }\n\n    setLoading(true)\n    setError(null)\n    setProgress(0)\n\n    try {\n      let result\n      if (withProgress) {\n        result = await uploadFileWithProgress(file, folder, setProgress)\n      } else {\n        result = await uploadFile(file, folder)\n      }\n      \n      setProgress(100)\n      return result\n    } catch (error) {\n      return handleError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [user, handleError])\n\n  const getUrl = useCallback(async (path, expiresIn = 3600) => {\n    if (!user) {\n      throw new Error('User must be authenticated to access files')\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      return await getSignedUrl(path, expiresIn)\n    } catch (error) {\n      return handleError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [user, handleError])\n\n  const remove = useCallback(async (path) => {\n    if (!user) {\n      throw new Error('User must be authenticated to delete files')\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      return await deleteFile(path)\n    } catch (error) {\n      return handleError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [user, handleError])\n\n  const list = useCallback(async (folder = 'uploads', limit = 100, offset = 0) => {\n    if (!user) {\n      throw new Error('User must be authenticated to list files')\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      return await listFiles(folder, limit, offset)\n    } catch (error) {\n      return handleError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [user, handleError])\n\n  const clearError = useCallback(() => {\n    setError(null)\n  }, [])\n\n  return {\n    // State\n    loading,\n    error,\n    progress,\n    \n    // Actions\n    upload,\n    getUrl,\n    remove,\n    list,\n    clearError,\n    \n    // Utils\n    isAuthenticated: !!user\n  }\n}\n\nexport default useSecureStorage","size_bytes":2672},"src/lib/firebaseAdmin.js":{"content":"// Firebase Admin SDK for server-side authentication\nimport 'server-only'\nimport { initializeApp, getApps, cert } from 'firebase-admin/app'\nimport { getAuth } from 'firebase-admin/auth'\n\n// Check if Firebase Admin is already initialized\nlet adminApp = null\n\nif (getApps().length === 0) {\n  // Parse service account key from environment variable\n  let credential = null;\n  \n  if (process.env.FIREBASE_SERVICE_ACCOUNT_KEY) {\n    try {\n      const serviceAccountKey = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);\n      credential = cert(serviceAccountKey);\n    } catch (error) {\n      console.error('Error parsing Firebase service account key:', error);\n    }\n  }\n\n  try {\n    const config = {\n      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    };\n    \n    // Add credential if available\n    if (credential) {\n      config.credential = credential;\n    }\n    \n    adminApp = initializeApp(config);\n  } catch (error) {\n    console.error('Firebase Admin initialization error:', error);\n    // Fallback initialization for development\n    adminApp = initializeApp({\n      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n    });\n  }\n} else {\n  adminApp = getApps()[0]\n}\n\n// Get Auth instance\nexport const adminAuth = getAuth(adminApp)\n\n// Helper function to verify ID tokens\nexport const verifyIdToken = async (idToken) => {\n  try {\n    const decodedToken = await adminAuth.verifyIdToken(idToken)\n    return decodedToken\n  } catch (error) {\n    console.error('Token verification error:', error)\n    throw new Error('Invalid authentication token')\n  }\n}\n\nexport default adminApp","size_bytes":1600},"src/lib/supabase-admin.js":{"content":"// Server-side Supabase client with service role key\nimport 'server-only'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n\n// Create client or mock based on available configuration\nlet supabaseAdmin\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn('Missing Supabase configuration for admin client - using mock client for build')\n  }\n  \n  // Create a mock client that will work during build but fail at runtime\n  supabaseAdmin = {\n    storage: {\n      from: () => ({\n        list: () => Promise.reject(new Error('Supabase not configured')),\n        remove: () => Promise.reject(new Error('Supabase not configured')),\n        createSignedUrl: () => Promise.reject(new Error('Supabase not configured')),\n        getPublicUrl: () => ({ data: { publicUrl: '' } })\n      })\n    }\n  }\n} else {\n  // Create admin client with service role key (server-side only)\n  supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n}\n\nexport { supabaseAdmin }\nexport default supabaseAdmin","size_bytes":1244},"src/lib/supabase.js":{"content":"\"use client\";\n\n// Secure client-side storage utilities using server-side API\nimport { auth } from './firebase-optimized'\n\n// Helper function to get Firebase ID token\nconst getAuthToken = async () => {\n  if (!auth?.currentUser) {\n    throw new Error('User not authenticated')\n  }\n  return await auth.currentUser.getIdToken()\n}\n\n// Helper function to make authenticated API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = await getAuthToken()\n  \n  const response = await fetch(endpoint, {\n    ...options,\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n      ...options.headers\n    }\n  })\n\n  if (!response.ok) {\n    const error = await response.json()\n    throw new Error(error.error || 'Request failed')\n  }\n\n  return response.json()\n}\n\n// Secure file upload using signed URLs\nexport const uploadFile = async (file, folder = 'uploads') => {\n  try {\n    // Step 1: Get signed upload URL from server\n    const { uploadUrl, path, token } = await apiRequest('/api/storage/upload-url', {\n      method: 'POST',\n      body: JSON.stringify({\n        fileName: file.name,\n        fileType: file.type,\n        folder\n      })\n    })\n\n    // Step 2: Upload file directly to Supabase using signed URL and token\n    const uploadResponse = await fetch(uploadUrl, {\n      method: 'PUT',\n      body: file,\n      headers: {\n        'Content-Type': file.type,\n        'x-upsert': 'false'\n      }\n    })\n\n    if (!uploadResponse.ok) {\n      throw new Error(`Failed to upload file: ${uploadResponse.status} ${uploadResponse.statusText}`)\n    }\n\n    return {\n      path,\n      fullPath: path,\n      name: file.name,\n      size: file.size,\n      type: file.type\n    }\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error uploading file:', error);\n    }\n    throw error\n  }\n}\n\n// Get signed URL for private file access\nexport const getSignedUrl = async (path, expiresIn = 3600) => {\n  try {\n    const { signedUrl } = await apiRequest('/api/storage/signed-url', {\n      method: 'POST',\n      body: JSON.stringify({ path, expiresIn })\n    })\n\n    return signedUrl\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error getting signed URL:', error);\n    }\n    throw error\n  }\n}\n\n// Delete file securely\nexport const deleteFile = async (path) => {\n  try {\n    await apiRequest('/api/storage/delete', {\n      method: 'DELETE',\n      body: JSON.stringify({ path })\n    })\n\n    return true\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error deleting file:', error);\n    }\n    throw error\n  }\n}\n\n// List user's files\nexport const listFiles = async (folder = 'uploads', limit = 100, offset = 0) => {\n  try {\n    const params = new URLSearchParams({ folder, limit: limit.toString(), offset: offset.toString() })\n    const { files } = await apiRequest(`/api/storage/list?${params}`, {\n      method: 'GET'\n    })\n\n    return files\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error listing files:', error);\n    }\n    throw error\n  }\n}\n\n// Utility function for handling file uploads with progress\nexport const uploadFileWithProgress = async (file, folder = 'uploads', onProgress) => {\n  try {\n    // Get signed upload URL\n    const { uploadUrl, path } = await apiRequest('/api/storage/upload-url', {\n      method: 'POST',\n      body: JSON.stringify({\n        fileName: file.name,\n        fileType: file.type,\n        folder\n      })\n    })\n\n    // Upload with progress tracking\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable && onProgress) {\n          const progress = (event.loaded / event.total) * 100\n          onProgress(progress)\n        }\n      })\n\n      xhr.addEventListener('load', () => {\n        if (xhr.status === 200) {\n          resolve({\n            path,\n            fullPath: path,\n            name: file.name,\n            size: file.size,\n            type: file.type\n          })\n        } else {\n          reject(new Error('Upload failed'))\n        }\n      })\n\n      xhr.addEventListener('error', () => {\n        reject(new Error('Upload failed'))\n      })\n\n      xhr.open('PUT', uploadUrl)\n      xhr.setRequestHeader('Content-Type', file.type)\n      xhr.setRequestHeader('x-upsert', 'false')\n      xhr.send(file)\n    })\n  } catch (error) {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error uploading file with progress:', error);\n    }\n    throw error\n  }\n}\n\n// Note: No direct client export for security - use API endpoints instead","size_bytes":4735},"src/components/ProfilePageWrapper.js":{"content":"'use client';\n\nimport { useAuth } from '../hooks/useAuth';\nimport { useRouter } from 'next/navigation';\nimport ProfilePage from './ProfilePage';\n\nfunction ProfilePageWrapper({ isOwnProfile = false }) {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  \n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If it's supposed to be own profile but user is not authenticated\n  if (isOwnProfile && !user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"max-w-md mx-auto text-center px-6\">\n          <div className=\"mx-auto w-24 h-24 bg-emerald-100 rounded-full flex items-center justify-center mb-6\">\n            <svg className=\"w-12 h-12 text-emerald-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">You haven't created an account</h3>\n          <p className=\"text-gray-600 mb-6\">Create an account or sign in if you already have one to view and manage your profile.</p>\n          <div className=\"space-y-3\">\n            <button \n              onClick={() => router.push('/signup')}\n              className=\"btn-base btn-primary w-full px-6 py-3 font-medium\"\n            >\n              Create Account\n            </button>\n            <button \n              onClick={() => router.push('/signin')}\n              className=\"btn-base btn-secondary w-full px-6 py-3 font-medium\"\n            >\n              Sign In\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // User is authenticated or viewing someone else's profile\n  return <ProfilePage isOwnProfile={isOwnProfile} />;\n}\n\nProfilePageWrapper.displayName = 'ProfilePageWrapper';\nexport default ProfilePageWrapper;","size_bytes":2262},"src/components/FirestoreProvider.js":{"content":"\"use client\";\n\n// Provider component to make Firebase context available to Firestore operations\nimport { createContext, useContext } from 'react';\nimport { useFirebaseOptimized as useFirebase } from '../lib/firebase-optimized';\n\nconst FirestoreContext = createContext(null);\n\nexport function FirestoreProvider({ children }) {\n  const firebase = useFirebase();\n  \n  return (\n    <FirestoreContext.Provider value={firebase}>\n      {children}\n    </FirestoreContext.Provider>\n  );\n}\n\nexport const useFirestore = () => {\n  const context = useContext(FirestoreContext);\n  if (!context) {\n    throw new Error('useFirestore must be used within a FirestoreProvider');\n  }\n  return context;\n};","size_bytes":684},"src/lib/firebase-client.js":{"content":"\"use client\";\n\n// Client-only Firebase wrapper to prevent hydration issues\nimport { useState, useEffect } from 'react';\n\nlet firebaseApp = null;\nlet firebaseAuth = null;\nlet firebaseDb = null;\nlet isInitialized = false;\n\nexport const useFirebase = () => {\n  const [firebase, setFirebase] = useState({\n    app: null,\n    auth: null,\n    db: null,\n    isLoading: true,\n    isConfigured: false\n  });\n\n  useEffect(() => {\n    const startTime = performance.now();\n    if (process.env.NEXT_PUBLIC_DEBUG === '1') {\n      console.log('🔍 Firebase useEffect triggered - Route:', window.location.pathname, 'Time:', new Date().toISOString());\n      console.log('📊 Firebase initialization status:', { isInitialized, isConfigured: Boolean(firebaseApp) });\n    }\n    \n    // Only initialize once on the client\n    if (isInitialized) {\n      const cacheTime = performance.now() - startTime;\n      if (process.env.NEXT_PUBLIC_DEBUG === '1') {\n        console.log('✅ Firebase already initialized, returning cached values. Time taken:', cacheTime.toFixed(2) + 'ms');\n      }\n      setFirebase({\n        app: firebaseApp,\n        auth: firebaseAuth,\n        db: firebaseDb,\n        isLoading: false,\n        isConfigured: Boolean(firebaseApp)\n      });\n      return;\n    }\n\n    const initializeFirebase = async () => {\n      try {\n        const envCheckStart = performance.now();\n        if (process.env.NEXT_PUBLIC_DEBUG === '1') {\n          console.log('🔧 Starting Firebase initialization...', new Date().toISOString());\n        }\n        \n        // Check environment variables BEFORE importing anything\n        const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY;\n        const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID;\n        const appId = process.env.NEXT_PUBLIC_FIREBASE_APP_ID;\n\n        const envCheckTime = performance.now() - envCheckStart;\n        if (process.env.NEXT_PUBLIC_DEBUG === '1') {\n          console.log('⚙️ Environment check completed in:', envCheckTime.toFixed(2) + 'ms', {\n            hasApiKey: !!apiKey, \n            hasProjectId: !!projectId, \n            hasAppId: !!appId\n          });\n        }\n\n        if (!apiKey || !projectId || !appId) {\n          if (process.env.NEXT_PUBLIC_DEBUG === '1') {\n            console.log('❌ Firebase not configured - missing variables:', { \n              hasApiKey: !!apiKey, \n              hasProjectId: !!projectId, \n              hasAppId: !!appId,\n              route: window.location.pathname \n            });\n          }\n          setFirebase({\n            app: null,\n            auth: null,\n            db: null,\n            isLoading: false,\n            isConfigured: false\n          });\n          isInitialized = true; // Mark as initialized to prevent retries\n          return;\n        }\n\n        // Only import Firebase modules if properly configured\n        const importStart = performance.now();\n        console.log('📦 Starting Firebase module imports...', new Date().toISOString());\n        \n        const [\n          { initializeApp, getApps, getApp },\n          { getAuth },\n          { getFirestore }\n        ] = await Promise.all([\n          import('firebase/app'),\n          import('firebase/auth'),\n          import('firebase/firestore')\n        ]);\n\n        const importTime = performance.now() - importStart;\n        console.log('📦 Firebase modules imported in:', importTime.toFixed(2) + 'ms');\n\n        const configStart = performance.now();\n        const firebaseConfig = {\n          apiKey,\n          authDomain: `${projectId}.firebaseapp.com`,\n          projectId,\n          storageBucket: `${projectId}.appspot.com`,\n          appId,\n        };\n\n        const configTime = performance.now() - configStart;\n        console.log('⚙️ Firebase config created in:', configTime.toFixed(2) + 'ms');\n\n        // Initialize Firebase\n        const initStart = performance.now();\n        firebaseApp = getApps().length ? getApp() : initializeApp(firebaseConfig);\n        firebaseAuth = getAuth(firebaseApp);\n        firebaseDb = getFirestore(firebaseApp);\n        isInitialized = true;\n        const initTime = performance.now() - initStart;\n\n        const totalTime = performance.now() - startTime;\n        console.log('🔥 Firebase initialized successfully!', {\n          route: window.location.pathname,\n          projectId: projectId,\n          timestamp: new Date().toISOString(),\n          timing: {\n            envCheck: envCheckTime.toFixed(2) + 'ms',\n            imports: importTime.toFixed(2) + 'ms', \n            config: configTime.toFixed(2) + 'ms',\n            initialization: initTime.toFixed(2) + 'ms',\n            total: totalTime.toFixed(2) + 'ms'\n          }\n        });\n\n        setFirebase({\n          app: firebaseApp,\n          auth: firebaseAuth,\n          db: firebaseDb,\n          isLoading: false,\n          isConfigured: true\n        });\n      } catch (error) {\n        console.error('Firebase initialization failed:', error);\n        setFirebase({\n          app: null,\n          auth: null,\n          db: null,\n          isLoading: false,\n          isConfigured: false\n        });\n      }\n    };\n\n    initializeFirebase();\n  }, []);\n\n  return firebase;\n};","size_bytes":5191},"src/components/AuthenticatedLayout.js":{"content":"'use client';\n\nimport { useFirebaseOptimized as useFirebase } from '../lib/firebase-optimized';\nimport { AuthProvider } from '../hooks/useAuth';\nimport UserOnboardingWrapper from './UserOnboardingWrapper';\nimport { UserProfileProvider } from './UserProfileProvider';\n\nexport default function AuthenticatedLayout({ children }) {\n  const mountTime = typeof window !== 'undefined' ? performance.now() : 0;\n  \n  \n  const { isLoading, isConfigured } = useFirebase();\n  \n\n  // Only show loading state when Firebase is configured and initializing\n  // If Firebase is not configured, render children immediately without blocking\n  if (!isConfigured || isLoading) {\n    return children;\n  }\n\n  // Firebase is configured - provide user profile context and onboarding wrapper\n  return (\n    <UserProfileProvider>\n      <UserOnboardingWrapper>\n        {children}\n      </UserOnboardingWrapper>\n    </UserProfileProvider>\n  );\n}","size_bytes":915},"src/lib/firebase-optimized.js":{"content":"\"use client\";\n\n// Optimized Firebase configuration with static imports for better performance\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { useState, useEffect } from 'react';\n\nlet firebaseApp = null;\nlet firebaseAuth = null;\nlet firebaseDb = null;\nlet isInitialized = false;\n\nexport const useFirebaseOptimized = () => {\n  const [firebase, setFirebase] = useState({\n    app: null,\n    auth: null,\n    db: null,\n    isLoading: true,\n    isConfigured: false\n  });\n\n  useEffect(() => {\n    // Only initialize once on the client\n    if (isInitialized) {\n      setFirebase({\n        app: firebaseApp,\n        auth: firebaseAuth,\n        db: firebaseDb,\n        isLoading: false,\n        isConfigured: Boolean(firebaseApp)\n      });\n      return;\n    }\n\n    // Set timeout to prevent infinite loading\n    const timeoutId = setTimeout(() => {\n      if (!isInitialized) {\n        setFirebase({\n          app: null,\n          auth: null,\n          db: null,\n          isLoading: false,\n          isConfigured: false\n        });\n        isInitialized = true;\n      }\n    }, 2000);\n\n    const initializeFirebase = () => {\n      try {\n        // Check environment variables\n        const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY;\n        const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID;\n        const appId = process.env.NEXT_PUBLIC_FIREBASE_APP_ID;\n\n        // Check if Firebase should be disabled\n        if (!apiKey || !projectId || !appId || \n            apiKey === 'not needed' || projectId === 'not needed' || appId === 'not needed' ||\n            apiKey === '' || projectId === '' || appId === '') {\n          console.log('Firebase disabled - no valid configuration found');\n          setFirebase({\n            app: null,\n            auth: null,\n            db: null,\n            isLoading: false,\n            isConfigured: false\n          });\n          isInitialized = true;\n          clearTimeout(timeoutId);\n          return;\n        }\n\n        const firebaseConfig = {\n          apiKey,\n          authDomain: `${projectId}.firebaseapp.com`,\n          projectId,\n          storageBucket: `${projectId}.appspot.com`,\n          appId,\n        };\n\n        // Initialize Firebase - prevent duplicate initialization\n        firebaseApp = getApps().length ? getApp() : initializeApp(firebaseConfig);\n        firebaseAuth = getAuth(firebaseApp);\n        firebaseDb = getFirestore(firebaseApp);\n        isInitialized = true;\n\n        setFirebase({\n          app: firebaseApp,\n          auth: firebaseAuth,\n          db: firebaseDb,\n          isLoading: false,\n          isConfigured: true\n        });\n        clearTimeout(timeoutId);\n      } catch (error) {\n        console.error('Firebase initialization failed:', error);\n        setFirebase({\n          app: null,\n          auth: null,\n          db: null,\n          isLoading: false,\n          isConfigured: false\n        });\n        isInitialized = true;\n        clearTimeout(timeoutId);\n      }\n    };\n\n    // Initialize immediately without dynamic imports\n    initializeFirebase();\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return firebase;\n};\n\n// Export Firebase services\nexport { firebaseAuth as auth, firebaseDb as db };\nexport default firebaseApp;","size_bytes":3366},"src/polyfills.js":{"content":"// Polyfills for browser compatibility and to prevent hanging\n// Only run in browser environment\n\nif (typeof window !== 'undefined') {\n  // Add timeout to fetch requests to prevent hanging\n  const originalFetch = window.fetch;\n  window.fetch = function(url, options = {}) {\n    const timeout = options.timeout || 10000; // 10 second default timeout\n    \n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    \n    return originalFetch(url, {\n      ...options,\n      signal: controller.signal\n    }).finally(() => {\n      clearTimeout(timeoutId);\n    });\n  };\n\n  // Add error handling for unhandled promise rejections\n  window.addEventListener('unhandledrejection', function(event) {\n    console.warn('Unhandled promise rejection:', event.reason);\n    // Only prevent default in production to avoid masking dev errors\n    if (process.env.NODE_ENV === 'production') {\n      event.preventDefault();\n    }\n  });\n}","size_bytes":973},"src/components/ErrorBoundary.js":{"content":"'use client';\n\nimport React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center\">\n            <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Something went wrong</h1>\n            <p className=\"text-gray-600 mb-4\">\n              The application encountered an error. Please try refreshing the page.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\n            >\n              Refresh Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":1301},"src/components/TimeoutWrapper.js":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\n\nexport default function TimeoutWrapper({ children, timeout = 10000 }) {\n  const [isTimedOut, setIsTimedOut] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    // Set loaded state after a short delay to ensure components have rendered\n    const loadTimer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 100);\n\n    // Set timeout to prevent infinite loading\n    const timeoutTimer = setTimeout(() => {\n      if (!isLoaded) {\n        setIsTimedOut(true);\n      }\n    }, timeout);\n\n    return () => {\n      clearTimeout(loadTimer);\n      clearTimeout(timeoutTimer);\n    };\n  }, [timeout, isLoaded]);\n\n  // Mark as loaded when component mounts\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n\n  if (isTimedOut) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6 text-center\">\n          <div className=\"text-yellow-500 text-6xl mb-4\">⏱️</div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Loading timeout</h1>\n          <p className=\"text-gray-600 mb-4\">\n            The page is taking longer than expected to load. This might be due to a slow connection.\n          </p>\n          <button\n            onClick={() => window.location.reload()}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n}","size_bytes":1622},"src/components/UserProfileProvider.js":{"content":"\"use client\";\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { useOptionalAuth } from '../hooks/useAuth';\nimport { getUserProfile } from '../lib/firestore';\n\n// Create User Profile Context\nconst UserProfileContext = createContext(null);\n\nexport function UserProfileProvider({ children }) {\n  const { user, loading: authLoading } = useOptionalAuth() || { user: null, loading: false };\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch user profile data from Firestore when user changes\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!user) {\n        setUserProfile(null);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        const profile = await getUserProfile(user.uid);\n        setUserProfile(profile);\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error fetching user profile:', error);\n        }\n        setUserProfile(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (!authLoading) {\n      fetchUserProfile();\n    }\n  }, [user, authLoading]);\n\n  // Function to update the user profile in context (called after profile updates)\n  const updateUserProfile = (updatedProfile) => {\n    setUserProfile(updatedProfile);\n  };\n\n  // Function to refresh user profile from Firestore\n  const refreshUserProfile = async () => {\n    if (!user) return;\n    \n    try {\n      const profile = await getUserProfile(user.uid);\n      setUserProfile(profile);\n    } catch (error) {\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Error refreshing user profile:', error);\n      }\n    }\n  };\n\n  const value = {\n    userProfile,\n    loading: authLoading || loading,\n    updateUserProfile,\n    refreshUserProfile\n  };\n\n  return (\n    <UserProfileContext.Provider value={value}>\n      {children}\n    </UserProfileContext.Provider>\n  );\n}\n\nexport const useUserProfile = () => {\n  const context = useContext(UserProfileContext);\n  if (!context) {\n    throw new Error('useUserProfile must be used within a UserProfileProvider');\n  }\n  return context;\n};\n\n// Optional hook that doesn't crash if no provider\nexport const useOptionalUserProfile = () => {\n  const context = useContext(UserProfileContext);\n  return context;\n};","size_bytes":2377},"src/app/forgot-password/page.js":{"content":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { validateEmail, validateForm } from '../../utils/validation';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Caveat } from \"next/font/google\";\nimport Link from \"next/link\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function ForgotPasswordPage() {\n  const router = useRouter();\n  const { user, loading: authLoading, forgotPassword } = useAuth();\n  \n  const [validationErrors, setValidationErrors] = useState({});\n  const [fieldValidation, setFieldValidation] = useState({});\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  \n  // Refs for form validation scrolling\n  const emailRef = useRef();\n\n  // Redirect if already signed in\n  useEffect(() => {\n    if (user && !authLoading) {\n      router.push('/');\n    }\n  }, [user, authLoading, router]);\n\n  const scrollToField = (fieldName) => {\n    const fieldRefs = {\n      email: emailRef\n    };\n    \n    const fieldRef = fieldRefs[fieldName];\n    if (fieldRef?.current) {\n      fieldRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      // Focus the field after scrolling\n      setTimeout(() => {\n        fieldRef.current.focus();\n      }, 300);\n    }\n  };\n\n  const validateFormFields = (formData) => {\n    const validation = validateForm(formData, 'forgot-password');\n    \n    setValidationErrors(validation.errors);\n    \n    // If there are errors, scroll to the first error field\n    if (validation.firstErrorField) {\n      setTimeout(() => scrollToField(validation.firstErrorField), 100);\n    }\n    \n    return validation.isValid;\n  };\n\n  const handleInputChange = (field, value) => {\n    // Clear form validation errors when user starts typing\n    if (validationErrors[field]) {\n      setValidationErrors(prev => ({ ...prev, [field]: '' }));\n    }\n    \n    // Perform real-time validation\n    let validationError = null;\n    let isValid = false;\n    \n    if (field === 'email' && value.trim()) {\n      validationError = validateEmail(value);\n      isValid = !validationError;\n    }\n    \n    // Update field validation status\n    setFieldValidation(prev => ({\n      ...prev,\n      [field]: {\n        isValid,\n        error: validationError,\n        hasValue: value.trim().length > 0\n      }\n    }));\n  };\n\n  const handleForgotPassword = async (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    \n    if (!validateFormFields(formData)) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await forgotPassword(formData.get('email'));\n      if (result.success) {\n        setSuccess(true);\n      } else {\n        setError(result.error || 'Failed to send reset email');\n      }\n    } catch (err) {\n      setError('Failed to send reset email');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Don't show loading overlay during auth actions - keep form visible\n\n  // Show success message\n  if (success) {\n    return (\n      <div className=\"min-h-screen bg-white\">\n        {/* Frame Logo */}\n        <div className=\"absolute top-6 left-6 z-50 mb-8\">\n          <Link \n            href=\"/\" \n            className={`${caveat.className} text-2xl md:text-3xl font-bold text-emerald-700 hover:text-emerald-800 transition-all duration-300 hover:scale-110`}\n          >\n            Frame\n          </Link>\n        </div>\n        \n        <div className=\"min-h-screen flex\">\n          {/* Left Side - Success Message */}\n          <div className=\"flex-1 w-full flex flex-col justify-center py-8 px-4 sm:px-6 lg:px-16 xl:px-20 pt-20\">\n            <div className=\"mx-auto w-full max-w-sm lg:max-w-md\">\n              {/* Header with Yellow Background */}\n              <div className=\"text-center mb-6 bg-yellow-400 px-4 py-3 rounded-t-lg\">\n                <div className=\"mx-auto w-12 h-12 bg-emerald-100 rounded-full flex items-center justify-center mb-3\">\n                  <svg className=\"w-6 h-6 text-emerald-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                </div>\n                <h2 className=\"text-2xl font-bold text-emerald-700\">Check Your Email</h2>\n                <p className=\"mt-1 text-black text-sm\">Reset link sent successfully</p>\n              </div>\n              \n              {/* Content Card */}\n              <div className=\"bg-white rounded-b-lg border border-t-0 border-gray-200 px-6 py-6 shadow-sm\">\n                <p className=\"text-gray-600 text-sm mb-4 text-center\">\n                  We've sent a password reset link to your email address. Click the link to reset your password.\n                </p>\n                \n                <div className=\"text-xs text-gray-500 space-y-1 mb-6 bg-gray-50 p-3 rounded-lg\">\n                  <p>• Check your spam/promotions folder if you don't see it</p>\n                  <p>• The reset link will expire in 1 hour</p>\n                  <p>• If you don't receive an email, you may not have an account yet</p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <button \n                    onClick={() => router.push('/signin')}\n                    className=\"btn-base btn-primary w-full py-3 px-4 font-medium text-sm\"\n                  >\n                    Back to Sign In\n                  </button>\n                  \n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-500\">\n                      Didn't receive the email? \n                      <button \n                        onClick={() => setSuccess(false)}\n                        className=\"btn-base btn-link font-medium ml-1\"\n                      >\n                        Send another reset link\n                      </button>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white flex\">\n      {/* Frame Logo - Top Left */}\n      <div className=\"absolute top-6 left-6 z-10\">\n        <Link \n          href=\"/\" \n          className={`${caveat.className} text-2xl md:text-3xl font-bold text-emerald-700 hover:text-emerald-800 transition-all duration-300 hover:scale-110`}\n        >\n          Frame\n        </Link>\n      </div>\n\n      {/* Left Side - Form */}\n      <div className=\"flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"max-w-sm w-full space-y-6\">\n          {/* Header */}\n          <div className=\"text-center bg-yellow-400 px-4 py-3 rounded-t-lg\">\n            <h2 className=\"text-2xl font-bold text-emerald-700\">Reset Password</h2>\n            <p className=\"mt-1 text-black text-sm\">We'll send you a reset link</p>\n          </div>\n\n          {/* Content Card with Shadow Border */}\n          <div className=\"bg-white rounded-b-lg border border-t-0 border-gray-200 px-6 py-6 shadow-sm\">\n            {/* Forgot Password Form */}\n            <form className=\"space-y-4 mb-4\" onSubmit={handleForgotPassword} noValidate>\n              {error && (\n                <div \n                  className=\"text-sm p-3 rounded-lg border text-red-800 bg-red-50 border-red-200\"\n                  role=\"alert\"\n                >\n                  {error}\n                </div>\n              )}\n              <div>\n                <label htmlFor=\"forgot-password-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Email Address\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={emailRef}\n                    id=\"forgot-password-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email address\"\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.email ? 'border-red-300 bg-red-50' : \n                      fieldValidation.email?.isValid ? 'border-emerald-300 bg-emerald-50' :\n                      fieldValidation.email?.hasValue ? 'border-red-300 bg-red-50' :\n                      'border-gray-300'\n                    }`}\n                  />\n                  {/* Validation Icon */}\n                  {(validationErrors.email || (fieldValidation.email?.hasValue && !fieldValidation.email?.isValid)) && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {fieldValidation.email?.isValid && !validationErrors.email ? (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      ) : (\n                        <svg \n                          className=\"w-5 h-5 text-red-500\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {validationErrors.email && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.email}</p>\n                )}\n                <div className=\"text-xs text-gray-500 mt-2\">\n                  <p>We'll send a secure password reset link to this email address.</p>\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full btn-base btn-primary py-2 px-4 text-sm\"\n              >\n                {loading ? 'Sending...' : 'Send Reset Link'}\n              </button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">\n                Remember your password? \n                <button \n                  onClick={() => router.push('/signin')}\n                  className=\"btn-base btn-link font-medium ml-1\"\n                >\n                  Sign In\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}","size_bytes":10952},"src/app/signin/page.js":{"content":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { validateEmail, validatePassword, validateForm } from '../../utils/validation';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Caveat } from \"next/font/google\";\nimport Link from \"next/link\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function SignInPage() {\n  const router = useRouter();\n  const { user, loading: authLoading, signInWithGoogle, signInWithEmail } = useAuth();\n  \n  const [validationErrors, setValidationErrors] = useState({});\n  const [fieldValidation, setFieldValidation] = useState({});\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  \n  // Refs for form validation scrolling\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  // Redirect if already signed in\n  useEffect(() => {\n    if (user && !authLoading) {\n      router.replace(user.emailVerified ? '/' : '/verify-email');\n    }\n  }, [user, authLoading, router]);\n\n  const scrollToField = (fieldName) => {\n    const fieldRefs = {\n      email: emailRef,\n      password: passwordRef\n    };\n    \n    const fieldRef = fieldRefs[fieldName];\n    if (fieldRef?.current) {\n      fieldRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      // Focus the field after scrolling\n      setTimeout(() => {\n        fieldRef.current.focus();\n      }, 300);\n    }\n  };\n\n  const validateFormFields = (formData) => {\n    const validation = validateForm(formData, 'signin');\n    \n    setValidationErrors(validation.errors);\n    \n    // If there are errors, scroll to the first error field\n    if (validation.firstErrorField) {\n      setTimeout(() => scrollToField(validation.firstErrorField), 100);\n    }\n    \n    return validation.isValid;\n  };\n\n  const handleEmailSignIn = async (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    \n    if (!validateFormFields(formData)) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signInWithEmail(formData.get('email'), formData.get('password'));\n      if (result.success) {\n        // Will be handled by useEffect redirect based on email verification status\n      } else {\n        setError(result.error || 'Failed to sign in');\n      }\n    } catch (err) {\n      setError('Failed to sign in');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signInWithGoogle();\n      if (result.success) {\n        // Will be handled by useEffect redirect based on email verification status\n      } else {\n        setError(result.error || 'Failed to sign in with Google');\n      }\n    } catch (err) {\n      setError('Failed to sign in with Google');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    // Clear form validation errors when user starts typing\n    if (validationErrors[field]) {\n      setValidationErrors(prev => ({ ...prev, [field]: '' }));\n    }\n    \n    // Perform real-time validation\n    let validationError = null;\n    let isValid = false;\n    \n    if (field === 'email' && value.trim()) {\n      validationError = validateEmail(value);\n      isValid = !validationError;\n    } else if (field === 'password' && value.trim()) {\n      validationError = validatePassword(value, true);\n      isValid = !validationError;\n    }\n    \n    // Update field validation status\n    setFieldValidation(prev => ({\n      ...prev,\n      [field]: {\n        isValid,\n        error: validationError,\n        hasValue: value.trim().length > 0\n      }\n    }));\n  };\n\n  // Don't show loading overlay during auth actions - keep form visible\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Frame Logo */}\n      <div className=\"absolute top-6 left-6 z-50 mb-8\">\n        <Link \n          href=\"/\" \n          className={`${caveat.className} text-2xl md:text-3xl font-bold text-emerald-700 hover:text-emerald-800 transition-all duration-300 hover:scale-110`}\n        >\n          Frame\n        </Link>\n      </div>\n      \n      <div className=\"min-h-screen flex\">\n        {/* Left Side - Form */}\n        <div className=\"flex-1 w-full flex flex-col justify-center py-8 px-4 sm:px-6 lg:px-16 xl:px-20 pt-20\">\n          <div className=\"mx-auto w-full max-w-sm lg:max-w-md\">\n            <div className=\"text-center mb-6 bg-yellow-400 px-4 py-3 rounded-t-lg\">\n              <h2 className=\"text-2xl font-bold text-emerald-700\">Sign in to your account</h2>\n              <p className=\"mt-1 text-black text-sm\">Welcome back! Please enter your details.</p>\n            </div>\n            \n            {/* Content Card with Shadow Border */}\n            <div className=\"bg-white rounded-b-lg border border-t-0 border-gray-200 px-6 py-6 shadow-sm\">\n            {/* Email Sign In Form */}\n            <form className=\"space-y-3 mb-4\" onSubmit={handleEmailSignIn} noValidate>\n              {error && (\n                <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\" role=\"alert\">\n                  <div>{error}</div>\n                  {error.toLowerCase().includes('invalid') && (error.toLowerCase().includes('email') || error.toLowerCase().includes('password')) && (\n                    <div className=\"mt-2 text-gray-600\">\n                      <span className=\"text-xs\">\n                        Forgot your password? Click on \"\n                        <button\n                          type=\"button\"\n                          onClick={() => router.push('/forgot-password')}\n                          className=\"btn-link font-medium\"\n                        >\n                          Forgot Password?\n                        </button>\n                        \" to reset it.\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )}\n              <div>\n                <label htmlFor=\"signin-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Email\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={emailRef}\n                    id=\"signin-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email\"\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.email ? 'border-red-300 bg-red-50' : \n                      fieldValidation.email?.isValid ? 'border-emerald-300 bg-emerald-50' :\n                      fieldValidation.email?.hasValue ? 'border-red-300 bg-red-50' :\n                      'border-gray-300'\n                    }`}\n                  />\n                  {/* Validation Icon */}\n                  {(validationErrors.email || (fieldValidation.email?.hasValue && !fieldValidation.email?.isValid)) && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {fieldValidation.email?.isValid && !validationErrors.email ? (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      ) : (\n                        <svg \n                          className=\"w-5 h-5 text-red-500\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {validationErrors.email && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.email}</p>\n                )}\n              </div>\n              <div>\n                <label htmlFor=\"signin-password\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={passwordRef}\n                    id=\"signin-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    name=\"password\"\n                    required\n                    placeholder=\"Enter your password\"\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.password ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                    }`}\n                  />\n                  {/* Password visibility toggle */}\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50 rounded\"\n                    aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                    aria-pressed={showPassword}\n                    title={showPassword ? \"Hide password\" : \"Show password\"}\n                  >\n                    {showPassword ? (\n                      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                      </svg>\n                    ) : (\n                      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                      </svg>\n                    )}\n                  </button>\n                </div>\n                {validationErrors.password && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.password}</p>\n                )}\n                <div className=\"text-right mt-2\">\n                  <a\n                    href=\"/forgot-password\"\n                    className=\"btn-link text-sm font-medium\"\n                  >\n                    Forgot Password?\n                  </a>\n                </div>\n              </div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full btn-base btn-primary py-2 px-4 text-sm\"\n              >\n                {loading ? 'Signing In...' : 'Sign In'}\n              </button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative mb-4\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-200\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-white px-4 text-gray-500\">or</span>\n              </div>\n            </div>\n\n            {/* Google Sign In */}\n            <div className=\"text-center mb-4\">\n              <button\n                onClick={handleGoogleSignIn}\n                disabled={loading}\n                className=\"w-full btn-base btn-google py-2 px-4 gap-3 text-sm\"\n              >\n                <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                {loading ? 'Signing In...' : 'Continue with Google'}\n              </button>\n            </div>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">\n                Don't have an account? \n                <a \n                  href=\"/signup\"\n                  className=\"btn-link font-medium ml-1\"\n                >\n                  Sign Up\n                </a>\n              </p>\n            </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":13837},"src/app/signup/page.js":{"content":"\"use client\";\n\nimport { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { validateEmail, validatePassword, validateName, validateForm } from '../../utils/validation';\nimport { useAuth } from '../../hooks/useAuth';\nimport { Caveat } from \"next/font/google\";\nimport Link from \"next/link\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport default function SignUpPage() {\n  const router = useRouter();\n  const { user, loading: authLoading, signInWithGoogle, signUpWithEmail } = useAuth();\n  \n  const [validationErrors, setValidationErrors] = useState({});\n  const [fieldValidation, setFieldValidation] = useState({});\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  \n  // Refs for form validation scrolling\n  const nameRef = useRef();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  // Redirect if already signed in\n  useEffect(() => {\n    if (user && !authLoading) {\n      router.replace(user.emailVerified ? '/' : '/verify-email');\n    }\n  }, [user, authLoading, router]);\n\n  const scrollToField = (fieldName) => {\n    const fieldRefs = {\n      name: nameRef,\n      email: emailRef,\n      password: passwordRef\n    };\n    \n    const fieldRef = fieldRefs[fieldName];\n    if (fieldRef?.current) {\n      fieldRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      // Focus the field after scrolling\n      setTimeout(() => {\n        fieldRef.current.focus();\n      }, 300);\n    }\n  };\n\n  const validateFormFields = (formData) => {\n    const validation = validateForm(formData, 'signup');\n    \n    setValidationErrors(validation.errors);\n    \n    // If there are errors, scroll to the first error field\n    if (validation.firstErrorField) {\n      setTimeout(() => scrollToField(validation.firstErrorField), 100);\n    }\n    \n    return validation.isValid;\n  };\n\n  const handleEmailSignUp = async (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    \n    if (!validateFormFields(formData)) {\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signUpWithEmail(\n        formData.get('email'), \n        formData.get('password'), \n        formData.get('name')\n      );\n      if (result.success) {\n        router.replace('/verify-email');\n      } else {\n        setError(result.error || 'Failed to create account');\n      }\n    } catch (err) {\n      setError('Failed to create account');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setLoading(true);\n    setError('');\n\n    try {\n      const result = await signInWithGoogle();\n      if (result.success) {\n        router.push('/');\n      } else {\n        setError(result.error || 'Failed to sign up with Google');\n      }\n    } catch (err) {\n      setError('Failed to sign up with Google');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    // Clear form validation errors when user starts typing\n    if (validationErrors[field]) {\n      setValidationErrors(prev => ({ ...prev, [field]: '' }));\n    }\n    \n    // Perform real-time validation\n    let validationError = null;\n    let isValid = false;\n    \n    if (field === 'name' && value.trim()) {\n      validationError = validateName(value);\n      isValid = !validationError;\n    } else if (field === 'email' && value.trim()) {\n      validationError = validateEmail(value);\n      isValid = !validationError;\n    } else if (field === 'password' && value.trim()) {\n      validationError = validatePassword(value, true);\n      isValid = !validationError;\n    }\n    \n    // Update field validation status\n    setFieldValidation(prev => ({\n      ...prev,\n      [field]: {\n        isValid,\n        error: validationError,\n        hasValue: value.trim().length > 0\n      }\n    }));\n  };\n\n  // Don't show loading overlay during auth actions - keep form visible\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Frame Logo */}\n      <div className=\"absolute top-6 left-6 z-50 mb-8\">\n        <Link \n          href=\"/\" \n          className={`${caveat.className} text-2xl md:text-3xl font-bold text-emerald-700 hover:text-emerald-800 transition-all duration-300 hover:scale-110`}\n        >\n          Frame\n        </Link>\n      </div>\n      \n      <div className=\"min-h-screen flex\">\n        {/* Left Side - Form */}\n        <div className=\"flex-1 w-full flex flex-col justify-center py-8 px-4 sm:px-6 lg:px-16 xl:px-20 pt-20\">\n          <div className=\"mx-auto w-full max-w-sm lg:max-w-md\">\n            <div className=\"text-center mb-6 bg-yellow-400 px-4 py-3 rounded-t-lg\">\n              <h2 className=\"text-2xl font-bold text-emerald-700\">Create your account</h2>\n              <p className=\"mt-1 text-black text-sm\">Join the creative community and start building amazing frames.</p>\n            </div>\n            \n            {/* Content Card with Shadow Border */}\n            <div className=\"bg-white rounded-b-lg border border-t-0 border-gray-200 px-6 py-6 shadow-sm\">\n            {/* Email Sign Up Form */}\n            <form className=\"space-y-3 mb-4\" onSubmit={handleEmailSignUp} noValidate>\n              {error && (\n                <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\" role=\"alert\">\n                  {error}\n                </div>\n              )}\n              <div>\n                <label htmlFor=\"signup-name\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Name\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={nameRef}\n                    id=\"signup-name\"\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    placeholder=\"Enter your name\"\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.name ? 'border-red-300 bg-red-50' : \n                      fieldValidation.name?.isValid ? 'border-emerald-300 bg-emerald-50' :\n                      fieldValidation.name?.hasValue ? 'border-red-300 bg-red-50' :\n                      'border-gray-300'\n                    }`}\n                  />\n                  {/* Validation Icon */}\n                  {(validationErrors.name || (fieldValidation.name?.hasValue && !fieldValidation.name?.isValid)) && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {fieldValidation.name?.isValid && !validationErrors.name ? (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      ) : (\n                        <svg \n                          className=\"w-5 h-5 text-red-500\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {validationErrors.name && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.name}</p>\n                )}\n              </div>\n              <div>\n                <label htmlFor=\"signup-email\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Email\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={emailRef}\n                    id=\"signup-email\"\n                    type=\"email\"\n                    name=\"email\"\n                    required\n                    placeholder=\"Enter your email\"\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.email ? 'border-red-300 bg-red-50' : \n                      fieldValidation.email?.isValid ? 'border-emerald-300 bg-emerald-50' :\n                      fieldValidation.email?.hasValue ? 'border-red-300 bg-red-50' :\n                      'border-gray-300'\n                    }`}\n                  />\n                  {/* Validation Icon */}\n                  {(validationErrors.email || (fieldValidation.email?.hasValue && !fieldValidation.email?.isValid)) && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {fieldValidation.email?.isValid && !validationErrors.email ? (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      ) : (\n                        <svg \n                          className=\"w-5 h-5 text-red-500\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {validationErrors.email && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.email}</p>\n                )}\n              </div>\n              <div>\n                <label htmlFor=\"signup-password\" className=\"block text-sm font-medium text-gray-800 mb-1\">\n                  Password\n                </label>\n                <div className=\"relative\">\n                  <input\n                    ref={passwordRef}\n                    id=\"signup-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    name=\"password\"\n                    required\n                    placeholder=\"Create a password (min 8 characters)\"\n                    minLength={8}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    className={`w-full px-3 py-2 pr-16 border rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none transition-all duration-300 text-gray-900 placeholder-gray-500 text-sm ${\n                      validationErrors.password ? 'border-red-300 bg-red-50' : \n                      fieldValidation.password?.isValid ? 'border-emerald-300 bg-emerald-50' :\n                      fieldValidation.password?.hasValue ? 'border-red-300 bg-red-50' :\n                      'border-gray-300'\n                    }`}\n                  />\n                  {/* Password visibility toggle */}\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-8 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:ring-2 focus:ring-emerald-500 focus:ring-opacity-50 rounded\"\n                    aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                    aria-pressed={showPassword}\n                    title={showPassword ? \"Hide password\" : \"Show password\"}\n                  >\n                    {showPassword ? (\n                      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                      </svg>\n                    ) : (\n                      <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                      </svg>\n                    )}\n                  </button>\n                  {/* Validation Icon */}\n                  {(validationErrors.password || (fieldValidation.password?.hasValue && !fieldValidation.password?.isValid)) && (\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {fieldValidation.password?.isValid && !validationErrors.password ? (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      ) : (\n                        <svg \n                          className=\"w-5 h-5 text-red-500\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {validationErrors.password && (\n                  <p className=\"text-red-600 text-sm mt-1\">{validationErrors.password}</p>\n                )}\n              </div>\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full btn-base btn-primary py-2 px-4 text-sm\"\n              >\n                {loading ? 'Creating Account...' : 'Create Account'}\n              </button>\n            </form>\n\n            {/* Divider */}\n            <div className=\"relative mb-4\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-200\"></div>\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"bg-white px-4 text-gray-500\">or</span>\n              </div>\n            </div>\n\n            {/* Google Sign Up */}\n            <div className=\"text-center mb-4\">\n              <button\n                onClick={handleGoogleSignIn}\n                disabled={loading}\n                className=\"w-full btn-base btn-google py-2 px-4 gap-3 text-sm\"\n              >\n                <svg className=\"w-4 h-4 sm:w-5 sm:h-5\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                {loading ? 'Creating Account...' : 'Continue with Google'}\n              </button>\n            </div>\n\n            <div className=\"text-center mb-4\">\n              <p className=\"text-xs text-gray-500 leading-relaxed\">\n                By signing up, you agree to our{' '}\n                <a href=\"/terms\" className=\"btn-link\">\n                  Terms of Service\n                </a>{' '}\n                and{' '}\n                <a href=\"/privacy\" className=\"btn-link\">\n                  Privacy Policy\n                </a>\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-500\">\n                Already have an account? \n                <a \n                  href=\"/signin\"\n                  className=\"btn-link font-medium ml-1\"\n                >\n                  Sign In\n                </a>\n              </p>\n            </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":17235},"src/app/onboarding/page.js":{"content":"\"use client\";\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { countries } from '../../data/countries';\nimport { useAuth } from '../../hooks/useAuth';\nimport { getUserProfile, checkUsernameExists, completeUserProfile } from '../../lib/firestore';\nimport { useOptionalUserProfile } from '../../components/UserProfileProvider';\nimport ConfirmationModal from '../../components/ConfirmationModal';\n\nexport default function OnboardingPage() {\n  const router = useRouter();\n  const { user, loading: authLoading } = useAuth();\n  const profileContext = useOptionalUserProfile();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [usernameStatus, setUsernameStatus] = useState(null); // 'checking', 'available', 'taken', 'unchanged'\n  const [originalUsername, setOriginalUsername] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [confirmModal, setConfirmModal] = useState({ isOpen: false, field: null, previewField: null, imageType: '' });\n  const usernameCheckTimeoutRef = useRef(null);\n  const usernameRequestIdRef = useRef(0);\n  \n  // Form data state\n  const [formData, setFormData] = useState({\n    username: '',\n    displayName: user?.displayName || '',\n    country: '',\n    profilePic: null,\n    profilePicPreview: user?.photoURL || '',\n    profileBanner: null,\n    profileBannerPreview: '',\n    bio: ''\n  });\n\n  const profilePicRef = useRef();\n  const profileBannerRef = useRef();\n  \n  // Refs for form validation scrolling\n  const usernameRef = useRef();\n  const displayNameRef = useRef();\n  const countryRef = useRef();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      router.push('/signin');\n    }\n  }, [user, authLoading, router]);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (usernameCheckTimeoutRef.current) {\n        clearTimeout(usernameCheckTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Load user data when component mounts - same as profile/edit page\n  useEffect(() => {\n    const loadUserData = async () => {\n      if (!user) return;\n      \n      try {\n        const userProfile = await getUserProfile(user.uid);\n        if (userProfile) {\n          // User has existing profile data, prefill everything\n          setUserData(userProfile);\n          setFormData({\n            username: userProfile.username || '',\n            displayName: userProfile.displayName || user?.displayName || '',\n            country: userProfile.country || '',\n            profilePic: null,\n            profilePicPreview: userProfile.profileImage || user?.photoURL || '',\n            profileBanner: null,\n            profileBannerPreview: userProfile.bannerImage || '',\n            bio: userProfile.bio || ''\n          });\n          setOriginalUsername(userProfile.username || '');\n          setUsernameStatus('unchanged');\n        } else {\n          // No existing profile, use auth data as fallback\n          const initialUsername = user?.displayName?.toLowerCase().replace(/[^a-z0-9]/g, '') || \n                                user?.email?.split('@')[0]?.toLowerCase().replace(/[^a-z0-9]/g, '') || \n                                'user123';\n          setFormData({\n            username: initialUsername,\n            displayName: user?.displayName || '',\n            country: '',\n            profilePic: null,\n            profilePicPreview: user?.photoURL || '',\n            profileBanner: null,\n            profileBannerPreview: '',\n            bio: ''\n          });\n          // Check if this initial username is available\n          checkUsernameAvailability(initialUsername);\n        }\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error loading user data:', error);\n        }\n        // Fallback to auth data\n        const fallbackUsername = user?.displayName?.toLowerCase().replace(/[^a-z0-9]/g, '') || \n                                user?.email?.split('@')[0]?.toLowerCase().replace(/[^a-z0-9]/g, '') || \n                                'user123';\n        setFormData({\n          username: fallbackUsername,\n          displayName: user?.displayName || '',\n          country: '',\n          profilePic: null,\n          profilePicPreview: user?.photoURL || '',\n          profileBanner: null,\n          profileBannerPreview: '',\n          bio: ''\n        });\n        checkUsernameAvailability(fallbackUsername);\n      }\n    };\n\n    loadUserData();\n  }, [user]);\n\n  // Function to check username availability with debouncing\n  const checkUsernameAvailability = async (username) => {\n    if (!username || username.length < 3) {\n      setUsernameStatus(null);\n      return;\n    }\n\n    // If username is unchanged from original, mark as unchanged\n    if (username === originalUsername) {\n      setUsernameStatus('unchanged');\n      return;\n    }\n\n    // Clear existing timeout\n    if (usernameCheckTimeoutRef.current) {\n      clearTimeout(usernameCheckTimeoutRef.current);\n    }\n\n    setUsernameStatus('checking');\n    \n    // Increment request ID to handle race conditions\n    const currentRequestId = ++usernameRequestIdRef.current;\n\n    // Set new timeout for debouncing\n    usernameCheckTimeoutRef.current = setTimeout(async () => {\n      try {\n        const exists = await checkUsernameExists(username);\n        \n        // Only update if this is still the latest request\n        if (currentRequestId === usernameRequestIdRef.current) {\n          const newStatus = exists ? 'taken' : 'available';\n          setUsernameStatus(newStatus);\n        }\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error checking username:', error);\n        }\n        if (currentRequestId === usernameRequestIdRef.current) {\n          setUsernameStatus(null); // Show neutral state on error\n        }\n      }\n    }, 500); // 500ms debounce\n  };\n\n  // Check if form has changes compared to original data\n  const checkForChanges = (currentFormData) => {\n    if (!userData) {\n      // If no existing userData, check if any field has meaningful content\n      const hasContent = currentFormData.username.trim() || \n                        currentFormData.displayName.trim() || \n                        currentFormData.country || \n                        currentFormData.profilePicPreview !== (user?.photoURL || '') ||\n                        currentFormData.profileBannerPreview ||\n                        currentFormData.bio.trim();\n      setHasChanges(hasContent);\n      return;\n    }\n    \n    // Compare with existing userData\n    const hasChanged = currentFormData.username !== (userData.username || '') ||\n                      currentFormData.displayName !== (userData.displayName || user?.displayName || '') ||\n                      currentFormData.country !== (userData.country || '') ||\n                      currentFormData.profilePicPreview !== (userData.profileImage || user?.photoURL || '') ||\n                      currentFormData.profileBannerPreview !== (userData.bannerImage || '') ||\n                      currentFormData.bio !== (userData.bio || '');\n    \n    setHasChanges(hasChanged);\n  };\n\n  const handleInputChange = (field, value) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n    \n    // Check username availability in real-time\n    if (field === 'username') {\n      checkUsernameAvailability(value);\n    }\n    \n    // Check for changes\n    checkForChanges(newFormData);\n  };\n\n  const handleFileChange = (field, file, previewField) => {\n    if (!file) return;\n    \n    // Clear any previous file-related errors\n    const fileErrorKey = field === 'profilePic' ? 'profilePic' : 'profileBanner';\n    if (errors[fileErrorKey]) {\n      setErrors(prev => ({ ...prev, [fileErrorKey]: '' }));\n    }\n    \n    // File size validation (5MB limit)\n    const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n    if (file.size > maxSize) {\n      const fileName = field === 'profilePic' ? 'Profile picture' : 'Banner image';\n      setErrors(prev => ({\n        ...prev,\n        [fileErrorKey]: `${fileName} must be smaller than 5MB. Current size: ${(file.size / (1024 * 1024)).toFixed(1)}MB`\n      }));\n      return;\n    }\n    \n    // File type validation\n    if (!file.type.startsWith('image/')) {\n      const fileName = field === 'profilePic' ? 'Profile picture' : 'Banner image';\n      setErrors(prev => ({\n        ...prev,\n        [fileErrorKey]: `${fileName} must be an image file (JPG, PNG, GIF, etc.)`\n      }));\n      return;\n    }\n    \n    // File is valid, proceed with reading\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const newFormData = {\n        ...formData,\n        [field]: file,\n        [previewField]: e.target.result\n      };\n      setFormData(newFormData);\n      // Check for changes\n      checkForChanges(newFormData);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveImage = (field, previewField) => {\n    const imageType = field === 'profilePic' ? 'profile photo' : 'banner';\n    setConfirmModal({\n      isOpen: true,\n      field,\n      previewField,\n      imageType\n    });\n  };\n\n  const confirmRemoveImage = () => {\n    const { field, previewField } = confirmModal;\n    \n    const newFormData = {\n      ...formData,\n      [field]: null,\n      [previewField]: ''\n    };\n    setFormData(newFormData);\n    \n    // Clear the file input value to allow re-uploading the same file\n    const inputRef = field === 'profilePic' ? profilePicRef : profileBannerRef;\n    if (inputRef.current) {\n      inputRef.current.value = '';\n    }\n    \n    // Clear any file-related errors\n    const fileErrorKey = field === 'profilePic' ? 'profilePic' : 'profileBanner';\n    if (errors[fileErrorKey]) {\n      setErrors(prev => ({ ...prev, [fileErrorKey]: '' }));\n    }\n    \n    // Check for changes\n    checkForChanges(newFormData);\n  };\n\n  const scrollToField = (fieldName) => {\n    const fieldRefs = {\n      username: usernameRef,\n      displayName: displayNameRef,\n      country: countryRef\n    };\n    \n    const fieldRef = fieldRefs[fieldName];\n    if (fieldRef?.current) {\n      fieldRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      // Focus the field after scrolling\n      setTimeout(() => {\n        fieldRef.current.focus();\n      }, 300);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    let firstErrorField = null;\n\n    if (!formData.username.trim()) {\n      newErrors.username = 'Username is required';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (formData.username.length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (!/^[a-z0-9]+$/.test(formData.username)) {\n      newErrors.username = 'Username can only contain lowercase letters and numbers';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (usernameStatus === 'taken') {\n      newErrors.username = 'This username is already taken';\n      if (!firstErrorField) firstErrorField = 'username';\n    }\n\n    if (!formData.displayName.trim()) {\n      newErrors.displayName = 'Display name is required';\n      if (!firstErrorField) firstErrorField = 'displayName';\n    }\n\n    if (!formData.country) {\n      newErrors.country = 'Please select your country';\n      if (!firstErrorField) firstErrorField = 'country';\n    }\n\n    setErrors(newErrors);\n    \n    // If there are errors, scroll to the first error field\n    if (firstErrorField) {\n      setTimeout(() => scrollToField(firstErrorField), 100);\n    }\n    \n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleComplete = async () => {\n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      // Prepare profile data\n      const profileData = {\n        username: formData.username,\n        displayName: formData.displayName,\n        country: formData.country,\n        bio: formData.bio,\n      };\n\n      // Handle profile image (in a real app, you'd upload to storage service)\n      if (formData.profilePicPreview !== (userData?.profileImage || user?.photoURL || '')) {\n        // If preview is empty but user had image, user removed it\n        // If preview has content different from original, user changed it\n        profileData.profileImage = formData.profilePicPreview || null;\n      }\n\n      // Handle banner image\n      if (formData.profileBannerPreview !== userData?.bannerImage) {\n        // If preview is empty but user had banner, user removed it\n        // If preview has content different from original, user changed it\n        profileData.bannerImage = formData.profileBannerPreview || null;\n      }\n\n      const result = await completeUserProfile(user.uid, profileData);\n      \n      if (result.success) {\n        // Refresh the user profile context to update sidebar\n        if (profileContext?.refreshUserProfile) {\n          await profileContext.refreshUserProfile();\n        }\n        // Navigate to home page\n        router.push('/');\n      } else {\n        throw new Error(result.error || 'Failed to complete profile');\n      }\n    } catch (error) {\n      console.error('Error completing profile setup:', error);\n      setErrors({ general: 'Failed to update profile. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  // Show loading state while auth is loading\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-emerald-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Don't render if user is not authenticated (redirect will handle this)\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      \n      <div className=\"min-h-screen flex\">\n        {/* Main Content */}\n        <div className=\"flex-1 w-full flex flex-col justify-center py-8 px-4 sm:px-6 lg:px-16 xl:px-20 pt-20\">\n          <div className=\"mx-auto w-full max-w-4xl\">\n            {/* Header */}\n            <div className=\"text-center mb-8 bg-yellow-400 px-6 py-6 rounded-t-xl\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-emerald-700\">Welcome to Frame!</h1>\n              <p className=\"text-base sm:text-lg text-gray-700 mt-2\">Let's set up your profile to get started</p>\n            </div>\n            \n            {/* Content Card with Shadow Border */}\n            <div className=\"bg-white rounded-b-xl border border-t-0 border-gray-200 px-6 py-8 shadow-sm\">\n              {errors.general && (\n                <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\">\n                  {errors.general}\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Profile Banner - moved to top */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Profile Banner\n                  </label>\n                  <div className=\"space-y-3\">\n                    <div className=\"w-full h-48 sm:h-56 md:h-64 lg:h-80 rounded-lg overflow-hidden border-2 border-gray-200\">\n                      {formData.profileBannerPreview ? (\n                        <img\n                          src={formData.profileBannerPreview}\n                          alt=\"Banner preview\"\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-r from-emerald-400 to-emerald-600 flex flex-col items-center justify-center\">\n                          <svg className=\"w-12 h-12 text-white/70 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z\" />\n                          </svg>\n                          <p className=\"text-white/70 text-sm font-medium\">Recommended: 1500x500px</p>\n                        </div>\n                      )}\n                    </div>\n                    <input\n                      type=\"file\"\n                      ref={profileBannerRef}\n                      onChange={(e) => handleFileChange('profileBanner', e.target.files[0], 'profileBannerPreview')}\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                    />\n                    <div className=\"flex gap-3\">\n                      <button\n                        type=\"button\"\n                        onClick={() => profileBannerRef.current?.click()}\n                        className=\"btn-base btn-secondary px-4 py-2\"\n                      >\n                        {formData.profileBannerPreview ? 'Change Banner Photo' : 'Choose Banner Photo'}\n                      </button>\n                      {formData.profileBannerPreview && (\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveImage('profileBanner', 'profileBannerPreview')}\n                          className=\"btn-base btn-danger px-4 py-2\"\n                        >\n                          Remove Banner\n                        </button>\n                      )}\n                    </div>\n                    {errors.profileBanner && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.profileBanner}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Profile Picture */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Profile Picture\n                  </label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 rounded-full overflow-hidden border-2 border-gray-200\">\n                      {formData.profilePicPreview ? (\n                        <img\n                          src={formData.profilePicPreview}\n                          alt=\"Profile preview\"\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                          <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                          </svg>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <input\n                        type=\"file\"\n                        ref={profilePicRef}\n                        onChange={(e) => handleFileChange('profilePic', e.target.files[0], 'profilePicPreview')}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                      />\n                      <div className=\"flex gap-2 flex-col\">\n                        <button\n                          type=\"button\"\n                          onClick={() => profilePicRef.current?.click()}\n                          className=\"btn-base btn-secondary px-4 py-2\"\n                        >\n                          {formData.profilePicPreview ? 'Change Photo' : 'Choose Photo'}\n                        </button>\n                        {formData.profilePicPreview && (\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveImage('profilePic', 'profilePicPreview')}\n                            className=\"btn-base btn-danger px-4 py-2 text-sm\"\n                          >\n                            Remove Photo\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {errors.profilePic && (\n                    <p className=\"text-red-600 text-sm mt-1\">{errors.profilePic}</p>\n                  )}\n                </div>\n\n                {/* Display Name */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Display Name *\n                  </label>\n                  <input\n                    ref={displayNameRef}\n                    type=\"text\"\n                    value={formData.displayName}\n                    onChange={(e) => handleInputChange('displayName', e.target.value)}\n                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 placeholder:text-gray-400 ${\n                      errors.displayName ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter your name\"\n                  />\n                  <p className=\"text-sm text-gray-700 mt-1\">\n                    This appears as your profile name\n                  </p>\n                  {errors.displayName && <p className=\"text-red-600 text-sm mt-1\">{errors.displayName}</p>}\n                </div>\n\n                {/* Username */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Username *\n                  </label>\n                  <div className=\"relative\">\n                    <input\n                      ref={usernameRef}\n                      type=\"text\"\n                      value={formData.username}\n                      onChange={(e) => handleInputChange('username', e.target.value.toLowerCase().replace(/[^a-z0-9]/g, ''))}\n                      className={`w-full px-4 py-3 pr-12 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 placeholder:text-gray-400 ${\n                        errors.username ? 'border-red-300 bg-red-50' : \n                        usernameStatus === 'taken' ? 'border-red-300 bg-red-50' :\n                        usernameStatus === 'available' ? 'border-emerald-300 bg-emerald-50' :\n                        'border-gray-300'\n                      }`}\n                      placeholder=\"username\"\n                    />\n                    {/* Username status indicator */}\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {usernameStatus === 'checking' && (\n                        <div className=\"w-5 h-5 border-2 border-gray-300 border-t-emerald-500 rounded-full animate-spin\"></div>\n                      )}\n                      {(usernameStatus === 'available' || usernameStatus === 'unchanged') && (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      )}\n                      {usernameStatus === 'taken' && (\n                        <svg className=\"w-5 h-5 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mt-1\">\n                    Your profile URL: frame.com/u/{formData.username || 'username'}\n                  </p>\n                  {/* Username status message */}\n                  {usernameStatus === 'taken' && (\n                    <p className=\"text-red-600 text-sm mt-1\">This username is already taken</p>\n                  )}\n                  {usernameStatus === 'available' && formData.username.length >= 3 && (\n                    <p className=\"text-emerald-600 text-sm mt-1\">Username is available</p>\n                  )}\n                  {usernameStatus === 'unchanged' && (\n                    <p className=\"text-gray-600 text-sm mt-1\">Current username</p>\n                  )}\n                  {errors.username && <p className=\"text-red-600 text-sm mt-1\">{errors.username}</p>}\n                </div>\n\n                {/* Country */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Country *\n                  </label>\n                  <select\n                    ref={countryRef}\n                    value={formData.country}\n                    onChange={(e) => handleInputChange('country', e.target.value)}\n                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 cursor-pointer ${\n                      errors.country ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                    }`}\n                  >\n                    <option value=\"\">Select your country</option>\n                    {countries.map(country => (\n                      <option key={country.code} value={country.code}>\n                        {country.name}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.country && <p className=\"text-red-600 text-sm mt-1\">{errors.country}</p>}\n                </div>\n\n                {/* Bio */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Bio\n                  </label>\n                  <textarea\n                    value={formData.bio}\n                    onChange={(e) => handleInputChange('bio', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all resize-none text-gray-900 placeholder:text-gray-400\"\n                    rows=\"4\"\n                    placeholder=\"Tell others about yourself...\"\n                    maxLength=\"500\"\n                  />\n                  <div className=\"flex justify-end mt-1\">\n                    <span className=\"text-sm text-gray-400\">{formData.bio.length}/500</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-end mt-8 pt-6 border-t border-gray-200\">\n                <button\n                  type=\"button\"\n                  onClick={handleComplete}\n                  disabled={loading || usernameStatus === 'checking' || !hasChanges}\n                  className={`btn-base px-8 py-3 ${\n                    !hasChanges \n                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed' \n                      : loading || usernameStatus === 'checking'\n                        ? 'bg-emerald-600 text-white opacity-50 cursor-not-allowed'\n                        : 'btn-primary'\n                  }`}\n                >\n                  {loading ? 'Setting up...' : usernameStatus === 'checking' ? 'Checking username...' : 'Complete Setup'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Confirmation Modal */}\n      <ConfirmationModal\n        isOpen={confirmModal.isOpen}\n        onClose={() => setConfirmModal({ isOpen: false, field: null, previewField: null, imageType: '' })}\n        onConfirm={confirmRemoveImage}\n        title=\"Remove Image\"\n        message={`Are you sure you want to remove your ${confirmModal.imageType}?`}\n        confirmText=\"Remove\"\n        cancelText=\"Cancel\"\n        type=\"danger\"\n      />\n    </div>\n  );\n}","size_bytes":28567},"src/utils/networkUtils.js":{"content":"// Network connectivity and error detection utilities\n\n/**\n * Check if the current error is likely due to network connectivity issues\n * @param {Error|Object} error - The error object from Firebase or other sources\n * @returns {boolean} - True if error appears to be network-related\n */\nexport const isNetworkError = (error) => {\n  if (!error) return false;\n  \n  // Check Firebase specific network error codes\n  const networkErrorCodes = [\n    'auth/network-request-failed',\n    'auth/timeout',\n    'auth/internal-error',\n    'auth/cors-unsupported'\n  ];\n  \n  if (error.code && networkErrorCodes.includes(error.code)) {\n    return true;\n  }\n  \n  // Check error message patterns that indicate network issues\n  const networkErrorPatterns = [\n    /network/i,\n    /connection/i,\n    /timeout/i,\n    /fetch/i,\n    /cors/i,\n    /offline/i,\n    /no internet/i,\n    /failed to fetch/i\n  ];\n  \n  const errorMessage = error.message || error.toString() || '';\n  return networkErrorPatterns.some(pattern => pattern.test(errorMessage));\n};\n\n/**\n * Check if the browser is currently online\n * @returns {boolean} - True if browser reports being online\n */\nexport const isOnline = () => {\n  return typeof navigator !== 'undefined' ? navigator.onLine : true;\n};\n\n/**\n * Test actual network connectivity by making a lightweight request\n * @returns {Promise<boolean>} - True if network is accessible\n */\nexport const testNetworkConnectivity = async () => {\n  if (!isOnline()) {\n    return false;\n  }\n  \n  try {\n    // Use a lightweight request to test connectivity\n    // We'll try to fetch a tiny resource from a reliable CDN\n    const response = await fetch('https://www.google.com/favicon.ico', {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-cache',\n      signal: AbortSignal.timeout(5000) // 5 second timeout\n    });\n    return true;\n  } catch (error) {\n    // If the fetch fails, we're likely offline or have connectivity issues\n    return false;\n  }\n};\n\n/**\n * Get appropriate error message based on network connectivity and error type\n * @param {Error|Object} error - The original error\n * @param {string} fallbackMessage - Message to show if not a network error\n * @returns {Promise<string>} - Appropriate error message for the user\n */\nexport const getContextualErrorMessage = async (error, fallbackMessage) => {\n  // First check if it's obviously a network error\n  if (isNetworkError(error)) {\n    return 'Unable to connect to our services. Please check your internet connection and try again.';\n  }\n  \n  // Check if browser reports being offline\n  if (!isOnline()) {\n    return 'You appear to be offline. Please check your internet connection and try again.';\n  }\n  \n  // Test actual connectivity for ambiguous errors\n  try {\n    const hasConnectivity = await testNetworkConnectivity();\n    if (!hasConnectivity) {\n      return 'Unable to connect to our services. Please check your internet connection and try again.';\n    }\n  } catch (connectivityError) {\n    // If we can't test connectivity, assume it's a network issue\n    return 'Unable to connect to our services. Please check your internet connection and try again.';\n  }\n  \n  // If we reach here, it's likely not a network error\n  return fallbackMessage;\n};\n\n/**\n * Check if an authentication error should be treated as a network error\n * This is more conservative and used for authentication flows where security matters\n * @param {Error|Object} error - The error object\n * @returns {Promise<boolean>} - True if this should be treated as a network error\n */\nexport const isLikelyNetworkError = async (error) => {\n  // More strict checking for auth errors\n  if (isNetworkError(error) || !isOnline()) {\n    return true;\n  }\n  \n  // For authentication, only check connectivity for certain ambiguous error types\n  const ambiguousErrors = [\n    'auth/internal-error',\n    'auth/timeout',\n    'auth/invalid-credential' // This can sometimes be network-related\n  ];\n  \n  if (error.code && ambiguousErrors.includes(error.code)) {\n    try {\n      const hasConnectivity = await testNetworkConnectivity();\n      return !hasConnectivity;\n    } catch {\n      return true; // Assume network error if we can't test\n    }\n  }\n  \n  return false;\n};\n\n/**\n * Setup network status monitoring\n * @param {Function} onOnline - Callback when network comes online\n * @param {Function} onOffline - Callback when network goes offline\n * @returns {Function} - Cleanup function to remove listeners\n */\nexport const setupNetworkMonitoring = (onOnline, onOffline) => {\n  if (typeof window === 'undefined') {\n    // Return no-op cleanup function for server-side\n    return () => {};\n  }\n  \n  const handleOnline = () => onOnline && onOnline();\n  const handleOffline = () => onOffline && onOffline();\n  \n  window.addEventListener('online', handleOnline);\n  window.addEventListener('offline', handleOffline);\n  \n  // Return cleanup function\n  return () => {\n    window.removeEventListener('online', handleOnline);\n    window.removeEventListener('offline', handleOffline);\n  };\n};","size_bytes":5012},"src/app/loading.js":{"content":"import PageLoader from \"../components/PageLoader\";\n\nexport default function Loading() {\n  return <PageLoader message=\"Loading...\" />;\n}","size_bytes":135},"src/components/LoadingSpinner.js":{"content":"'use client';\n\nexport default function LoadingSpinner({ size = 'md', className = '' }) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8', \n    lg: 'w-12 h-12',\n    xl: 'w-16 h-16'\n  };\n\n  return (\n    <div className={`border-2 border-emerald-500 border-t-transparent rounded-full animate-spin ${sizeClasses[size]} ${className}`}></div>\n  );\n}","size_bytes":355},"src/components/PageLoader.js":{"content":"'use client';\n\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default function PageLoader({ message = 'Loading...', className = '' }) {\n  return (\n    <div className={`min-h-screen bg-white flex items-center justify-center ${className}`}>\n      <div className=\"text-center\">\n        <LoadingSpinner size=\"lg\" className=\"mx-auto mb-4\" />\n        <p className=\"text-gray-600 text-lg\">{message}</p>\n      </div>\n    </div>\n  );\n}","size_bytes":434},"src/utils/firebaseErrorHandler.js":{"content":"import { isLikelyNetworkError, getContextualErrorMessage } from './networkUtils';\n\n/**\n * Centralized Firebase Authentication Error Handler\n * Based on latest Firebase v9+ documentation and modern security practices\n */\n\n/**\n * Modern Firebase error codes mapping to simple, user-friendly messages\n * Updated for Firebase v9+ behavior where specific error codes are replaced with generic ones for security\n */\nconst ERROR_MESSAGES = {\n  // Authentication Errors (Core)\n  'auth/invalid-credential': 'Invalid email or password. Please check your credentials and try again.',\n  'auth/user-disabled': 'Your account has been disabled. Please contact support for assistance.',\n  'auth/invalid-email': 'Please enter a valid email address.',\n  'auth/operation-not-allowed': 'This sign-in method is not available. Please contact support.',\n  'auth/too-many-requests': 'Too many failed attempts. Please wait a few minutes before trying again.',\n  \n  // Legacy errors (may still occur in some Firebase configurations)\n  'auth/user-not-found': 'Invalid email or password. Please check your credentials and try again.',\n  'auth/wrong-password': 'Invalid email or password. Please check your credentials and try again.',\n  \n  // Account Creation Errors\n  'auth/email-already-in-use': 'An account with this email already exists. Try signing in instead.',\n  'auth/weak-password': 'Please choose a stronger password (at least 6 characters).',\n  \n  // Session & Token Errors\n  'auth/invalid-user-token': 'Your session has expired. Please sign in again.',\n  'auth/user-token-expired': 'Your session has expired. Please sign in again.',\n  'auth/requires-recent-login': 'For security, please sign in again to continue.',\n  \n  // Network & Connection Errors\n  'auth/network-request-failed': 'Connection failed. Please check your internet and try again.',\n  'auth/timeout': 'Request timed out. Please check your connection and try again.',\n  \n  // Email Verification Errors\n  'auth/invalid-verification-code': 'Invalid verification code. Please check and try again.',\n  'auth/invalid-verification-id': 'Verification failed. Please try again.',\n  'auth/code-expired': 'Verification code has expired. Please request a new one.',\n  'auth/missing-verification-code': 'Please enter the verification code.',\n  \n  // Password Reset Errors\n  'auth/invalid-action-code': 'This reset link is invalid or has expired. Please request a new one.',\n  'auth/expired-action-code': 'This reset link has expired. Please request a new one.',\n  \n  // Google Sign-in Errors\n  'auth/popup-closed-by-user': 'Sign-in was cancelled. Please try again.',\n  'auth/popup-blocked': 'Sign-in popup was blocked. Please allow popups and try again.',\n  'auth/account-exists-with-different-credential': 'An account with this email exists. Try signing in with a different method.',\n  \n  // Configuration & API Errors\n  'auth/invalid-api-key': 'Configuration error. Please contact support.',\n  'auth/app-not-authorized': 'App configuration error. Please contact support.',\n  'auth/invalid-continue-uri': 'Invalid redirect URL. Please contact support.',\n  'auth/unauthorized-continue-uri': 'Unauthorized redirect URL. Please contact support.',\n  \n  // Rate Limiting\n  'auth/quota-exceeded': 'Service temporarily unavailable. Please try again later.',\n  \n  // Multi-factor Authentication\n  'auth/multi-factor-auth-required': 'Additional verification required. Please follow the prompts.',\n  'auth/maximum-second-factor-count-exceeded': 'Too many verification methods. Please contact support.',\n  \n  // Generic fallback\n  'default': 'Something went wrong. Please try again.'\n};\n\n/**\n * Security vs Verbose mode messages\n * In security mode, we provide generic messages to prevent user enumeration attacks\n */\nconst SECURITY_MODE_MESSAGES = {\n  // Generic authentication failure (prevents user enumeration)\n  'auth-failure': 'Invalid email or password. Please check your credentials and try again.',\n  'password-reset-sent': 'If this email is associated with an account, we\\'ve sent a password reset link.',\n  'verification-sent': 'If this email is associated with an account, we\\'ve sent a verification email.',\n};\n\n/**\n * Check if verbose error messages are enabled\n * Always returns false to use security mode for better maintainability\n */\nconst isVerboseModeEnabled = () => {\n  // Always use security mode for better maintainability and consistent behavior\n  return false;\n};\n\n/**\n * Get appropriate error message based on error code and context\n * @param {string} errorCode - Firebase error code\n * @param {string} context - Context of the error (signin, signup, password-reset, etc.)\n * @param {boolean} useVerboseMode - Whether to use verbose or security mode\n * @returns {string} User-friendly error message\n */\nconst getErrorMessage = (errorCode, context = 'default', useVerboseMode = null) => {\n  const verboseMode = useVerboseMode !== null ? useVerboseMode : isVerboseModeEnabled();\n  \n  // Handle security mode for sensitive operations\n  if (!verboseMode) {\n    switch (context) {\n      case 'signin':\n        // In security mode, always return generic message for auth failures\n        if (['auth/invalid-credential', 'auth/user-not-found', 'auth/wrong-password'].includes(errorCode)) {\n          return SECURITY_MODE_MESSAGES['auth-failure'];\n        }\n        break;\n      case 'password-reset':\n        // In security mode, always return success message for password reset\n        if (['auth/user-not-found'].includes(errorCode)) {\n          return SECURITY_MODE_MESSAGES['password-reset-sent'];\n        }\n        break;\n    }\n  }\n  \n  // Return specific error message or default\n  return ERROR_MESSAGES[errorCode] || ERROR_MESSAGES['default'];\n};\n\n/**\n * Main Firebase error handler\n * @param {Error|Object} error - Firebase error object\n * @param {string} context - Context of the operation (signin, signup, password-reset, etc.)\n * @param {Object} options - Additional options\n * @returns {Promise<Object>} Standardized error response\n */\nexport const handleFirebaseError = async (error, context = 'default', options = {}) => {\n  const { \n    useVerboseMode = null,\n    returnType = 'object', // 'object' or 'string'\n    includeType = false // Include type field for certain contexts\n  } = options;\n  \n  // Log error in development for debugging\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Firebase ${context} error:`, error.code || error.message);\n  }\n  \n  // Check for network connectivity issues first\n  if (await isLikelyNetworkError(error)) {\n    const networkMessage = await getContextualErrorMessage(\n      error, \n      'Connection failed. Please check your internet and try again.'\n    );\n    \n    return returnType === 'string' ? networkMessage : {\n      success: false,\n      error: networkMessage,\n      ...(includeType && { type: 'error' })\n    };\n  }\n  \n  // Get appropriate error message\n  const errorMessage = getErrorMessage(error.code, context, useVerboseMode);\n  \n  // Return formatted response\n  if (returnType === 'string') {\n    return errorMessage;\n  }\n  \n  return {\n    success: false,\n    error: errorMessage,\n    ...(includeType && { type: 'error' })\n  };\n};\n\n/**\n * Specialized handlers for different Firebase operations\n */\n\n/**\n * Handle sign-in errors with context-specific logic\n */\nexport const handleSignInError = async (error, options = {}) => {\n  return handleFirebaseError(error, 'signin', options);\n};\n\n/**\n * Handle sign-up errors with context-specific logic\n */\nexport const handleSignUpError = async (error, options = {}) => {\n  return handleFirebaseError(error, 'signup', options);\n};\n\n/**\n * Handle password reset errors with context-specific logic\n * In security mode, this may return success even for non-existent users\n */\nexport const handlePasswordResetError = async (error, options = {}) => {\n  const verboseMode = options.useVerboseMode !== null ? options.useVerboseMode : isVerboseModeEnabled();\n  \n  // In security mode, treat user-not-found as success to prevent enumeration\n  if (!verboseMode && error.code === 'auth/user-not-found') {\n    return {\n      success: true,\n      type: 'success',\n      message: SECURITY_MODE_MESSAGES['password-reset-sent']\n    };\n  }\n  \n  return handleFirebaseError(error, 'password-reset', { \n    ...options, \n    includeType: true \n  });\n};\n\n/**\n * Handle email verification errors\n */\nexport const handleEmailVerificationError = async (error, options = {}) => {\n  return handleFirebaseError(error, 'email-verification', options);\n};\n\n/**\n * Handle Google sign-in specific errors\n */\nexport const handleGoogleSignInError = async (error, options = {}) => {\n  return handleFirebaseError(error, 'google-signin', options);\n};\n\n/**\n * Handle password reset success (for consistency)\n */\nexport const getPasswordResetSuccessMessage = (verboseMode = null) => {\n  const verbose = verboseMode !== null ? verboseMode : isVerboseModeEnabled();\n  \n  if (verbose) {\n    return 'Password reset link sent! Check your email and spam folder.';\n  } else {\n    return SECURITY_MODE_MESSAGES['password-reset-sent'];\n  }\n};\n\n/**\n * Utility function to check if an error should be treated as success in security mode\n */\nexport const shouldTreatAsSuccessInSecurityMode = (error, context) => {\n  const verboseMode = isVerboseModeEnabled();\n  if (verboseMode) return false;\n  \n  // In security mode, treat certain errors as success to prevent enumeration\n  if (context === 'password-reset' && error.code === 'auth/user-not-found') {\n    return true;\n  }\n  \n  return false;\n};\n\n// Export constants for testing and consistency\nexport { ERROR_MESSAGES, SECURITY_MODE_MESSAGES, isVerboseModeEnabled };","size_bytes":9635},"src/app/verify-email/page.js":{"content":"'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '../../hooks/useAuth';\nimport EmailVerification from '../../components/EmailVerification';\nimport PageLoader from '../../components/PageLoader';\n\nexport default function VerifyEmailPage() {\n  const router = useRouter();\n  const { user, loading, pendingSignupUserId, logoutInProgress } = useAuth();\n  const safetyTimeoutRef = useRef(null);\n\n  useEffect(() => {\n    // Redirect to homepage if user is verified\n    if (user && !loading && user.emailVerified) {\n      router.replace('/');\n      return;\n    }\n    \n    // Clear any existing safety timeout\n    if (safetyTimeoutRef.current) {\n      clearTimeout(safetyTimeoutRef.current);\n      safetyTimeoutRef.current = null;\n    }\n    \n    // Only redirect to signin if auth is done loading, there's no user, no pending signup,\n    // AND logout is not in progress (prevents redirect override on intentional logout)\n    if (!loading && !user && !pendingSignupUserId && !logoutInProgress) {\n      // Add safety fallback with debounce to avoid stuck loader state\n      safetyTimeoutRef.current = setTimeout(() => {\n        router.replace('/signin');\n      }, 500);\n    }\n  }, [user, loading, pendingSignupUserId, logoutInProgress, router]);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (safetyTimeoutRef.current) {\n        clearTimeout(safetyTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Show loader while auth is loading\n  if (loading) {\n    return <PageLoader message=\"Loading...\" />;\n  }\n\n  // Show loader while pending signup (waiting for auth state to update)\n  if (pendingSignupUserId) {\n    return <PageLoader message=\"Setting up your account...\" />;\n  }\n\n  // Show loader while redirecting if no user\n  if (!user) {\n    return <PageLoader message=\"Redirecting...\" />;\n  }\n\n  // Show email verification if user exists but is not verified\n  if (user && !user.emailVerified) {\n    return <EmailVerification />;\n  }\n\n  // Fallback - shouldn't reach here but just in case\n  return <PageLoader message=\"Redirecting...\" />;\n}","size_bytes":2140},"src/app/not-found.js":{"content":"export default function NotFound() {\n  return (\n    <div style={{\n      minHeight: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontFamily: 'system-ui, -apple-system, Arial, sans-serif',\n      padding: '20px',\n      backgroundColor: 'white'\n    }}>\n      <div style={{ \n        textAlign: 'center',\n        maxWidth: '400px',\n        padding: '40px 20px'\n      }}>\n        <p style={{\n          fontSize: '72px',\n          color: '#047857',\n          margin: '0 0 20px 0',\n          fontWeight: 'bold',\n          lineHeight: '1'\n        }}>\n          404\n        </p>\n        <p style={{\n          fontSize: '18px',\n          color: '#000',\n          margin: '0 0 8px 0',\n          fontWeight: '500'\n        }}>\n          Page not found\n        </p>\n        <p style={{\n          fontSize: '14px',\n          color: '#000',\n          margin: '0 0 30px 0',\n          lineHeight: '1.4',\n          opacity: '0.8'\n        }}>\n          The page you're looking for doesn't exist.\n        </p>\n        <a \n          href=\"/\" \n          className=\"btn-base btn-secondary border-2 border-emerald-700 text-emerald-700 px-5 py-2 text-sm font-semibold rounded-full\"\n        >\n          Go to homepage\n        </a>\n      </div>\n    </div>\n  );\n}","size_bytes":1285},"src/components/ConfirmationModal.js":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\n\nexport default function ConfirmationModal({ \n  isOpen, \n  onClose, \n  onConfirm, \n  title = \"Confirm Action\", \n  message = \"Are you sure you want to proceed?\",\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  type = \"danger\" // \"danger\" or \"warning\"\n}) {\n  // Close modal on Escape key\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      // Prevent body scroll when modal is open\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  const handleBackdropClick = (e) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n      onClick={handleBackdropClick}\n    >\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-md w-full mx-4 transform transition-all\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center gap-3\">\n            {type === \"danger\" ? (\n              <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                <svg className=\"w-5 h-5 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                </svg>\n              </div>\n            ) : (\n              <div className=\"w-10 h-10 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                <svg className=\"w-5 h-5 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                </svg>\n              </div>\n            )}\n            <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          </div>\n        </div>\n        \n        {/* Body */}\n        <div className=\"px-6 py-4\">\n          <p className=\"text-gray-700 text-sm leading-relaxed\">{message}</p>\n        </div>\n        \n        {/* Footer */}\n        <div className=\"px-6 py-4 bg-gray-50 rounded-b-xl flex gap-3 justify-end\">\n          <button\n            onClick={onClose}\n            className=\"btn-base btn-secondary px-4 py-2 text-sm\"\n          >\n            {cancelText}\n          </button>\n          <button\n            onClick={handleConfirm}\n            className={`btn-base px-4 py-2 text-sm ${\n              type === \"danger\" \n                ? \"btn-danger\" \n                : \"btn-warning\"\n            }`}\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3345},"src/components/ConditionalLayout.js":{"content":"\"use client\";\n\nimport { usePathname } from 'next/navigation';\nimport { useState } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport MobileMenu from './MobileMenu';\nimport { useLayoutVisibility } from './LayoutVisibilityContext';\n\n// Pages where header/footer should NOT be shown\nconst EXCLUDED_PAGES = [\n  '/signin',\n  '/signup',\n  '/forgot-password',\n  '/onboarding',\n  '/verify-email'\n];\n\nexport default function ConditionalLayout({ children }) {\n  const pathname = usePathname();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { hideChrome } = useLayoutVisibility();\n  \n  // Check if current page should exclude header/footer\n  const shouldExcludeLayout = hideChrome || EXCLUDED_PAGES.includes(pathname);\n  \n  // If layout should be excluded, just return children\n  if (shouldExcludeLayout) {\n    return children;\n  }\n  \n  // Show header/footer for all other pages\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      {/* Main Content with blur effect */}\n      <div className={`min-h-screen flex flex-col transition-all duration-300 ${\n        isMenuOpen ? 'blur-sm' : ''\n      }`}>\n        <Header isMenuOpen={isMenuOpen} setIsMenuOpen={setIsMenuOpen} />\n        <main className=\"flex-1\">\n          {children}\n        </main>\n        <Footer />\n      </div>\n\n      {/* Mobile Menu Component */}\n      <MobileMenu \n        isMenuOpen={isMenuOpen}\n        setIsMenuOpen={setIsMenuOpen}\n      />\n    </div>\n  );\n}","size_bytes":1486},"src/app/(chrome)/layout.js":{"content":"import ConditionalLayout from \"../../components/ConditionalLayout\";\n\nexport default function ChromeLayout({ children }) {\n  return (\n    <ConditionalLayout>\n      {children}\n    </ConditionalLayout>\n  );\n}","size_bytes":205},"src/app/(chrome)/page.js":{"content":"// Server Component - renders instantly!\nimport Hero from \"../../components/Hero\";\n\nexport default function Home() {\n  return <Hero />;\n}\n","size_bytes":138},"src/app/(chrome)/privacy/page.js":{"content":"import { Caveat } from \"next/font/google\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport const metadata = {\n  title: \"Privacy Policy - Frame\",\n  description: \"Privacy Policy for Frame - Twibbonize App\",\n};\n\nexport default function PrivacyPolicyPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"bg-white rounded-lg shadow-sm p-8\">\n          <h1 className={`${caveat.className} text-4xl font-bold text-emerald-700 mb-8`}>\n            Privacy Policy\n          </h1>\n          \n          <div className=\"prose max-w-none\">\n            <p className=\"text-gray-600 mb-6\">\n              <strong>Last updated:</strong> {new Date().toLocaleDateString()}\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Introduction</h2>\n              <p className=\"text-gray-700 leading-relaxed mb-4\">\n                Welcome to Frame (\"we,\" \"our,\" or \"us\"). We are committed to protecting your personal information and your right to privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our Frame application and services.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Information We Collect</h2>\n              \n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Personal Information</h3>\n              <ul className=\"list-disc list-inside text-gray-700 mb-4 space-y-2\">\n                <li>Account information (email address, username, display name)</li>\n                <li>Profile information (bio, country, profile pictures)</li>\n                <li>Authentication data when using Google Sign-In</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Usage Information</h3>\n              <ul className=\"list-disc list-inside text-gray-700 mb-4 space-y-2\">\n                <li>Frame creation and usage analytics</li>\n                <li>App interaction data</li>\n                <li>Device and browser information</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Content</h3>\n              <ul className=\"list-disc list-inside text-gray-700 mb-4 space-y-2\">\n                <li>Images and frames you upload or create</li>\n                <li>Public frame data and analytics</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">How We Use Your Information</h2>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>Provide and maintain our frame creation services</li>\n                <li>Process your account registration and authentication</li>\n                <li>Display public frame analytics and statistics</li>\n                <li>Improve our services and user experience</li>\n                <li>Communicate with you about service updates</li>\n                <li>Ensure platform security and prevent abuse</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Information Sharing</h2>\n              <p className=\"text-gray-700 mb-4\">\n                We believe in transparency and making frame analytics publicly accessible. Here's what we share:\n              </p>\n              \n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Public Information</h3>\n              <ul className=\"list-disc list-inside text-gray-700 mb-4 space-y-2\">\n                <li>Frame usage statistics and popularity metrics</li>\n                <li>Creator profiles and public frame galleries</li>\n                <li>Trending frames and top creator rankings</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Service Providers</h3>\n              <p className=\"text-gray-700 mb-4\">\n                We may share information with trusted service providers who help us operate our platform, including Firebase (Google) for authentication and database services, and Supabase for file storage.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Data Security</h2>\n              <p className=\"text-gray-700 mb-4\">\n                We implement appropriate technical and organizational security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Your Rights</h2>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>Access and review your personal information</li>\n                <li>Update or correct your profile data</li>\n                <li>Delete your account and associated data</li>\n                <li>Opt out of certain communications</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Children's Privacy</h2>\n              <p className=\"text-gray-700 mb-4\">\n                Our service is not intended for children under 13 years of age. We do not knowingly collect personal information from children under 13.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Changes to This Policy</h2>\n              <p className=\"text-gray-700 mb-4\">\n                We may update this Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page and updating the \"Last updated\" date.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Contact Us</h2>\n              <p className=\"text-gray-700 mb-4\">\n                If you have any questions about this Privacy Policy, please contact us through our support channels within the application.\n              </p>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6542},"src/app/(chrome)/terms/page.js":{"content":"import { Caveat } from \"next/font/google\";\n\nconst caveat = Caveat({ subsets: [\"latin\"], weight: [\"700\"] });\n\nexport const metadata = {\n  title: \"Terms & Conditions - Frame\",\n  description: \"Terms & Conditions for Frame - Twibbonize App\",\n};\n\nexport default function TermsPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"bg-white rounded-lg shadow-sm p-8\">\n          <h1 className={`${caveat.className} text-4xl font-bold text-emerald-700 mb-8`}>\n            Terms & Conditions\n          </h1>\n          \n          <div className=\"prose max-w-none\">\n            <p className=\"text-gray-600 mb-6\">\n              <strong>Last updated:</strong> {new Date().toLocaleDateString()}\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Agreement to Terms</h2>\n              <p className=\"text-gray-700 leading-relaxed mb-4\">\n                By accessing and using Frame (\"the Service\"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Use License</h2>\n              <p className=\"text-gray-700 mb-4\">\n                Permission is granted to temporarily use Frame for personal, non-commercial transitory viewing only. This is the grant of a license, not a transfer of title, and under this license you may not:\n              </p>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>Use the service for any commercial purpose without written consent</li>\n                <li>Attempt to reverse engineer or hack the service</li>\n                <li>Upload harmful, offensive, or illegal content</li>\n                <li>Violate any applicable local, state, national or international law</li>\n                <li>Impersonate other users or provide false identity information</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">User Accounts</h2>\n              <p className=\"text-gray-700 mb-4\">\n                Frame operates on an accessibility-first model:\n              </p>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li><strong>Visitors:</strong> Can browse, use frames, and download results without creating an account</li>\n                <li><strong>Creators:</strong> Must create an account only to upload custom frames</li>\n                <li>You are responsible for maintaining the confidentiality of your account information</li>\n                <li>You agree to accept responsibility for all activities under your account</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Content and Intellectual Property</h2>\n              \n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Your Content</h3>\n              <ul className=\"list-disc list-inside text-gray-700 mb-4 space-y-2\">\n                <li>You retain ownership of content you upload</li>\n                <li>By uploading frames, you grant us a license to display and distribute them publicly</li>\n                <li>You must have rights to all content you upload</li>\n                <li>You are responsible for ensuring your content doesn't infringe on others' rights</li>\n              </ul>\n\n              <h3 className=\"text-xl font-medium text-gray-900 mb-3\">Public Analytics</h3>\n              <p className=\"text-gray-700 mb-4\">\n                All frame usage statistics, popularity metrics, and creator rankings are made publicly available as part of our transparency commitment. By using the service, you consent to this public analytics approach.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Prohibited Uses</h2>\n              <p className=\"text-gray-700 mb-4\">You may not use Frame:</p>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>For any unlawful purpose or to solicit others to perform unlawful acts</li>\n                <li>To violate any international, federal, provincial, or state regulations, rules, laws, or local ordinances</li>\n                <li>To infringe upon or violate our intellectual property rights or the intellectual property rights of others</li>\n                <li>To harass, abuse, insult, harm, defame, slander, disparage, intimidate, or discriminate</li>\n                <li>To submit false or misleading information</li>\n                <li>To upload or transmit viruses or any other type of malicious code</li>\n                <li>To spam, phish, pharm, pretext, spider, crawl, or scrape</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Service Availability</h2>\n              <p className=\"text-gray-700 mb-4\">\n                We strive to maintain service availability but cannot guarantee uninterrupted access. We reserve the right to:\n              </p>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>Modify or discontinue the service with reasonable notice</li>\n                <li>Remove content that violates these terms</li>\n                <li>Suspend or terminate accounts for violations</li>\n                <li>Update these terms as needed</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Privacy and Data</h2>\n              <p className=\"text-gray-700 mb-4\">\n                Your privacy is important to us. Please review our Privacy Policy, which also governs your use of the Service, to understand our practices.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Disclaimer</h2>\n              <p className=\"text-gray-700 mb-4\">\n                The information on this service is provided on an \"as is\" basis. To the fullest extent permitted by law, this Company:\n              </p>\n              <ul className=\"list-disc list-inside text-gray-700 space-y-2\">\n                <li>Excludes all representations and warranties relating to this service and its contents</li>\n                <li>Does not guarantee the accuracy, completeness, or reliability of user-generated content</li>\n                <li>Will not be liable for any loss or damage arising from use of the service</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Limitations</h2>\n              <p className=\"text-gray-700 mb-4\">\n                In no event shall Frame or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use Frame, even if Frame or an authorized representative has been notified orally or in writing of the possibility of such damage.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Governing Law</h2>\n              <p className=\"text-gray-700 mb-4\">\n                These terms and conditions are governed by and construed in accordance with applicable law and you irrevocably submit to the exclusive jurisdiction of the courts in that location.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Changes to Terms</h2>\n              <p className=\"text-gray-700 mb-4\">\n                We reserve the right to update these Terms & Conditions at any time. Changes will be effective immediately upon posting. Your continued use of Frame after any changes constitutes acceptance of those changes.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Contact Information</h2>\n              <p className=\"text-gray-700 mb-4\">\n                If you have any questions about these Terms & Conditions, please contact us through our support channels within the application.\n              </p>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8933},"src/components/LayoutVisibilityContext.js":{"content":"\"use client\";\n\nimport React, { createContext, useContext } from 'react';\n\nconst LayoutVisibilityContext = createContext({ hideChrome: false });\n\nexport const useLayoutVisibility = () => {\n  const context = useContext(LayoutVisibilityContext);\n  // Return default values if context is not available\n  return context || { hideChrome: false };\n};\n\nexport const LayoutVisibilityProvider = ({ children, hideChrome = false }) => {\n  return (\n    <LayoutVisibilityContext.Provider value={{ hideChrome }}>\n      {children}\n    </LayoutVisibilityContext.Provider>\n  );\n};","size_bytes":562},"src/app/(chrome)/profile/edit/page.js":{"content":"\"use client\";\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { countries } from '../../../../data/countries';\nimport { useAuth } from '../../../../hooks/useAuth';\nimport { getUserProfile, checkUsernameExists, updateUserProfile } from '../../../../lib/firestore';\nimport { useOptionalUserProfile } from '../../../../components/UserProfileProvider';\nimport ConfirmationModal from '../../../../components/ConfirmationModal';\n\nexport default function ProfileEditPage() {\n  const router = useRouter();\n  const { user, loading: authLoading } = useAuth();\n  const profileContext = useOptionalUserProfile();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [usernameStatus, setUsernameStatus] = useState(null); // 'checking', 'available', 'taken', 'unchanged'\n  const [originalUsername, setOriginalUsername] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [confirmModal, setConfirmModal] = useState({ isOpen: false, field: null, previewField: null, imageType: '' });\n  const usernameCheckTimeoutRef = useRef(null);\n  const usernameRequestIdRef = useRef(0);\n  \n  // Form data state\n  const [formData, setFormData] = useState({\n    username: '',\n    displayName: '',\n    country: '',\n    profilePic: null,\n    profilePicPreview: '',\n    profileBanner: null,\n    profileBannerPreview: '',\n    bio: ''\n  });\n\n  const profilePicRef = useRef();\n  const profileBannerRef = useRef();\n  \n  // Refs for form validation scrolling\n  const usernameRef = useRef();\n  const displayNameRef = useRef();\n  const countryRef = useRef();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      router.push('/signin');\n    }\n  }, [user, authLoading, router]);\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (usernameCheckTimeoutRef.current) {\n        clearTimeout(usernameCheckTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Load user data when component mounts\n  useEffect(() => {\n    const loadUserData = async () => {\n      if (!user) return;\n      \n      try {\n        const userProfile = await getUserProfile(user.uid);\n        if (userProfile) {\n          setUserData(userProfile);\n          setFormData({\n            username: userProfile.username || '',\n            displayName: userProfile.displayName || '',\n            country: userProfile.country || '',\n            profilePic: null,\n            profilePicPreview: userProfile.profileImage || '',\n            profileBanner: null,\n            profileBannerPreview: userProfile.bannerImage || '',\n            bio: userProfile.bio || ''\n          });\n          setOriginalUsername(userProfile.username || '');\n          setUsernameStatus('unchanged');\n        }\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error loading user data:', error);\n        }\n        setErrors({ general: 'Failed to load profile data. Please try again.' });\n      }\n    };\n\n    loadUserData();\n  }, [user]);\n\n  // Function to check username availability with debouncing\n  const checkUsernameAvailability = async (username) => {\n    if (!username || username.length < 3) {\n      setUsernameStatus(null);\n      return;\n    }\n\n    // If username is unchanged from original, mark as unchanged\n    if (username === originalUsername) {\n      setUsernameStatus('unchanged');\n      return;\n    }\n\n    // Clear existing timeout\n    if (usernameCheckTimeoutRef.current) {\n      clearTimeout(usernameCheckTimeoutRef.current);\n    }\n\n    setUsernameStatus('checking');\n    \n    // Increment request ID to handle race conditions\n    const currentRequestId = ++usernameRequestIdRef.current;\n\n    // Set new timeout for debouncing\n    usernameCheckTimeoutRef.current = setTimeout(async () => {\n      try {\n        const exists = await checkUsernameExists(username);\n        \n        // Only update if this is still the latest request\n        if (currentRequestId === usernameRequestIdRef.current) {\n          const newStatus = exists ? 'taken' : 'available';\n          setUsernameStatus(newStatus);\n        }\n      } catch (error) {\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error checking username:', error);\n        }\n        if (currentRequestId === usernameRequestIdRef.current) {\n          setUsernameStatus(null); // Show neutral state on error\n        }\n      }\n    }, 500); // 500ms debounce\n  };\n\n  // Check if form has changes compared to original data\n  const checkForChanges = (currentFormData) => {\n    if (!userData) {\n      setHasChanges(false);\n      return;\n    }\n    \n    // Compare with existing userData\n    const hasChanged = currentFormData.username !== (userData.username || '') ||\n                      currentFormData.displayName !== (userData.displayName || '') ||\n                      currentFormData.country !== (userData.country || '') ||\n                      currentFormData.profilePicPreview !== (userData.profileImage || '') ||\n                      currentFormData.profileBannerPreview !== (userData.bannerImage || '') ||\n                      currentFormData.bio !== (userData.bio || '');\n    \n    setHasChanges(hasChanged);\n  };\n\n  const handleInputChange = (field, value) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n    \n    // Check username availability in real-time\n    if (field === 'username') {\n      checkUsernameAvailability(value);\n    }\n    \n    // Check for changes\n    checkForChanges(newFormData);\n  };\n\n  const handleFileChange = (field, file, previewField) => {\n    if (!file) return;\n    \n    // Clear any previous file-related errors\n    const fileErrorKey = field === 'profilePic' ? 'profilePic' : 'profileBanner';\n    if (errors[fileErrorKey]) {\n      setErrors(prev => ({ ...prev, [fileErrorKey]: '' }));\n    }\n    \n    // File size validation (5MB limit)\n    const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n    if (file.size > maxSize) {\n      const fileName = field === 'profilePic' ? 'Profile picture' : 'Banner image';\n      setErrors(prev => ({\n        ...prev,\n        [fileErrorKey]: `${fileName} must be smaller than 5MB. Current size: ${(file.size / (1024 * 1024)).toFixed(1)}MB`\n      }));\n      return;\n    }\n    \n    // File type validation\n    if (!file.type.startsWith('image/')) {\n      const fileName = field === 'profilePic' ? 'Profile picture' : 'Banner image';\n      setErrors(prev => ({\n        ...prev,\n        [fileErrorKey]: `${fileName} must be an image file (JPG, PNG, GIF, etc.)`\n      }));\n      return;\n    }\n    \n    // File is valid, proceed with reading\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const newFormData = {\n        ...formData,\n        [field]: file,\n        [previewField]: e.target.result\n      };\n      setFormData(newFormData);\n      // Check for changes\n      checkForChanges(newFormData);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleRemoveImage = (field, previewField) => {\n    const imageType = field === 'profilePic' ? 'profile photo' : 'banner';\n    setConfirmModal({\n      isOpen: true,\n      field,\n      previewField,\n      imageType\n    });\n  };\n\n  const confirmRemoveImage = () => {\n    const { field, previewField } = confirmModal;\n    \n    const newFormData = {\n      ...formData,\n      [field]: null,\n      [previewField]: ''\n    };\n    setFormData(newFormData);\n    \n    // Clear the file input value to allow re-uploading the same file\n    const inputRef = field === 'profilePic' ? profilePicRef : profileBannerRef;\n    if (inputRef.current) {\n      inputRef.current.value = '';\n    }\n    \n    // Clear any file-related errors\n    const fileErrorKey = field === 'profilePic' ? 'profilePic' : 'profileBanner';\n    if (errors[fileErrorKey]) {\n      setErrors(prev => ({ ...prev, [fileErrorKey]: '' }));\n    }\n    \n    // Check for changes\n    checkForChanges(newFormData);\n  };\n\n  const scrollToField = (fieldName) => {\n    const fieldRefs = {\n      username: usernameRef,\n      displayName: displayNameRef,\n      country: countryRef\n    };\n    \n    const fieldRef = fieldRefs[fieldName];\n    if (fieldRef?.current) {\n      fieldRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n      // Focus the field after scrolling\n      setTimeout(() => {\n        fieldRef.current.focus();\n      }, 300);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    let firstErrorField = null;\n\n    if (!formData.username.trim()) {\n      newErrors.username = 'Username is required';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (formData.username.length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (!/^[a-z0-9]+$/.test(formData.username)) {\n      newErrors.username = 'Username can only contain lowercase letters and numbers';\n      if (!firstErrorField) firstErrorField = 'username';\n    } else if (usernameStatus === 'taken') {\n      newErrors.username = 'This username is already taken';\n      if (!firstErrorField) firstErrorField = 'username';\n    }\n\n    if (!formData.displayName.trim()) {\n      newErrors.displayName = 'Display name is required';\n      if (!firstErrorField) firstErrorField = 'displayName';\n    }\n\n    if (!formData.country) {\n      newErrors.country = 'Please select your country';\n      if (!firstErrorField) firstErrorField = 'country';\n    }\n\n    setErrors(newErrors);\n    \n    // If there are errors, scroll to the first error field\n    if (firstErrorField) {\n      setTimeout(() => scrollToField(firstErrorField), 100);\n    }\n    \n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSave = async () => {\n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      // Prepare profile data\n      const profileData = {\n        username: formData.username,\n        displayName: formData.displayName,\n        country: formData.country,\n        bio: formData.bio,\n      };\n\n      // Handle profile image (in a real app, you'd upload to storage service)\n      if (formData.profilePicPreview !== userData?.profileImage) {\n        // If preview is empty but userData has image, user removed it\n        // If preview has content different from userData, user changed it\n        profileData.profileImage = formData.profilePicPreview || null;\n      }\n\n      // Handle banner image\n      if (formData.profileBannerPreview !== userData?.bannerImage) {\n        // If preview is empty but userData has image, user removed it\n        // If preview has content different from userData, user changed it\n        profileData.bannerImage = formData.profileBannerPreview || null;\n      }\n\n      const result = await updateUserProfile(userData.id, profileData);\n      \n      if (result.success) {\n        // Refresh the user profile context to update sidebar\n        if (profileContext?.refreshUserProfile) {\n          await profileContext.refreshUserProfile();\n        }\n        // Navigate back to profile page\n        router.push('/profile');\n      } else {\n        throw new Error(result.error || 'Failed to update profile');\n      }\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      setErrors({ general: 'Failed to update profile. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Show loading state while auth is loading\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-emerald-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Don't render if user is not authenticated (redirect will handle this)\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      \n      <div className=\"min-h-screen flex\">\n        {/* Main Content */}\n        <div className=\"flex-1 w-full flex flex-col justify-center py-8 px-4 sm:px-6 lg:px-16 xl:px-20 pt-20\">\n          <div className=\"mx-auto w-full max-w-4xl\">\n            {/* Header */}\n            <div className=\"text-center mb-8 bg-yellow-400 px-6 py-6 rounded-t-xl\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-emerald-700\">Edit Profile</h1>\n              <p className=\"text-base sm:text-lg text-gray-700 mt-2\">Update your profile information</p>\n            </div>\n            \n            {/* Content Card with Shadow Border */}\n            <div className=\"bg-white rounded-b-xl border border-t-0 border-gray-200 px-6 py-8 shadow-sm\">\n              {errors.general && (\n                <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\">\n                  {errors.general}\n                </div>\n              )}\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Profile Banner - moved to top */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Profile Banner\n                  </label>\n                  <div className=\"space-y-3\">\n                    <div className=\"w-full h-48 sm:h-56 md:h-64 lg:h-80 rounded-lg overflow-hidden border-2 border-gray-200\">\n                      {formData.profileBannerPreview ? (\n                        <img\n                          src={formData.profileBannerPreview}\n                          alt=\"Banner preview\"\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gradient-to-r from-emerald-400 to-emerald-600 flex flex-col items-center justify-center\">\n                          <svg className=\"w-12 h-12 text-white/70 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2v12a2 2 0 002 2z\" />\n                          </svg>\n                          <p className=\"text-white/70 text-sm font-medium\">Recommended: 1500x500px</p>\n                        </div>\n                      )}\n                    </div>\n                    <input\n                      type=\"file\"\n                      ref={profileBannerRef}\n                      onChange={(e) => handleFileChange('profileBanner', e.target.files[0], 'profileBannerPreview')}\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                    />\n                    <div className=\"flex gap-3\">\n                      <button\n                        type=\"button\"\n                        onClick={() => profileBannerRef.current?.click()}\n                        className=\"btn-base btn-secondary px-4 py-2\"\n                      >\n                        {formData.profileBannerPreview ? 'Change Banner Photo' : 'Choose Banner Photo'}\n                      </button>\n                      {formData.profileBannerPreview && (\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveImage('profileBanner', 'profileBannerPreview')}\n                          className=\"btn-base btn-danger px-4 py-2\"\n                        >\n                          Remove Banner\n                        </button>\n                      )}\n                    </div>\n                    {errors.profileBanner && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.profileBanner}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Profile Picture */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Profile Picture\n                  </label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 rounded-full overflow-hidden border-2 border-gray-200\">\n                      {formData.profilePicPreview ? (\n                        <img\n                          src={formData.profilePicPreview}\n                          alt=\"Profile preview\"\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                          <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                          </svg>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <input\n                        type=\"file\"\n                        ref={profilePicRef}\n                        onChange={(e) => handleFileChange('profilePic', e.target.files[0], 'profilePicPreview')}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                      />\n                      <div className=\"flex gap-2 flex-col\">\n                        <button\n                          type=\"button\"\n                          onClick={() => profilePicRef.current?.click()}\n                          className=\"btn-base btn-secondary px-4 py-2\"\n                        >\n                          {formData.profilePicPreview ? 'Change Photo' : 'Choose Photo'}\n                        </button>\n                        {formData.profilePicPreview && (\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveImage('profilePic', 'profilePicPreview')}\n                            className=\"btn-base btn-danger px-4 py-2 text-sm\"\n                          >\n                            Remove Photo\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  {errors.profilePic && (\n                    <p className=\"text-red-600 text-sm mt-1\">{errors.profilePic}</p>\n                  )}\n                </div>\n\n                {/* Display Name */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Display Name *\n                  </label>\n                  <input\n                    ref={displayNameRef}\n                    type=\"text\"\n                    value={formData.displayName}\n                    onChange={(e) => handleInputChange('displayName', e.target.value)}\n                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 placeholder:text-gray-400 ${\n                      errors.displayName ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                    }`}\n                    placeholder=\"Enter your name\"\n                  />\n                  <p className=\"text-sm text-gray-700 mt-1\">\n                    This appears as your profile name\n                  </p>\n                  {errors.displayName && <p className=\"text-red-600 text-sm mt-1\">{errors.displayName}</p>}\n                </div>\n\n                {/* Username */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Username *\n                  </label>\n                  <div className=\"relative\">\n                    <input\n                      ref={usernameRef}\n                      type=\"text\"\n                      value={formData.username}\n                      onChange={(e) => handleInputChange('username', e.target.value.toLowerCase().replace(/[^a-z0-9]/g, ''))}\n                      className={`w-full px-4 py-3 pr-12 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 placeholder:text-gray-400 ${\n                        errors.username ? 'border-red-300 bg-red-50' : \n                        usernameStatus === 'taken' ? 'border-red-300 bg-red-50' :\n                        usernameStatus === 'available' ? 'border-emerald-300 bg-emerald-50' :\n                        'border-gray-300'\n                      }`}\n                      placeholder=\"username\"\n                    />\n                    {/* Username status indicator */}\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                      {usernameStatus === 'checking' && (\n                        <div className=\"w-5 h-5 border-2 border-gray-300 border-t-emerald-500 rounded-full animate-spin\"></div>\n                      )}\n                      {(usernameStatus === 'available' || usernameStatus === 'unchanged') && (\n                        <svg className=\"w-5 h-5 text-emerald-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                      )}\n                      {usernameStatus === 'taken' && (\n                        <svg className=\"w-5 h-5 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mt-1\">\n                    Your profile URL: frame.com/u/{formData.username || 'username'}\n                  </p>\n                  {/* Username status message */}\n                  {usernameStatus === 'taken' && (\n                    <p className=\"text-red-600 text-sm mt-1\">This username is already taken</p>\n                  )}\n                  {usernameStatus === 'available' && formData.username.length >= 3 && (\n                    <p className=\"text-emerald-600 text-sm mt-1\">Username is available</p>\n                  )}\n                  {usernameStatus === 'unchanged' && (\n                    <p className=\"text-gray-600 text-sm mt-1\">Current username</p>\n                  )}\n                  {errors.username && <p className=\"text-red-600 text-sm mt-1\">{errors.username}</p>}\n                </div>\n\n                {/* Country */}\n                <div className=\"md:col-span-1\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Country *\n                  </label>\n                  <select\n                    ref={countryRef}\n                    value={formData.country}\n                    onChange={(e) => handleInputChange('country', e.target.value)}\n                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all text-gray-900 cursor-pointer ${\n                      errors.country ? 'border-red-300 bg-red-50' : 'border-gray-300'\n                    }`}\n                  >\n                    <option value=\"\">Select your country</option>\n                    {countries.map(country => (\n                      <option key={country.code} value={country.code}>\n                        {country.name}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.country && <p className=\"text-red-600 text-sm mt-1\">{errors.country}</p>}\n                </div>\n\n                {/* Bio */}\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-gray-800 mb-2\">\n                    Bio\n                  </label>\n                  <textarea\n                    value={formData.bio}\n                    onChange={(e) => handleInputChange('bio', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent outline-none transition-all resize-none text-gray-900 placeholder:text-gray-400\"\n                    rows=\"4\"\n                    placeholder=\"Tell others about yourself...\"\n                    maxLength=\"500\"\n                  />\n                  <div className=\"flex justify-end mt-1\">\n                    <span className=\"text-sm text-gray-400\">{formData.bio.length}/500</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-between mt-8 pt-6 border-t border-gray-200\">\n                <button\n                  type=\"button\"\n                  onClick={() => router.back()}\n                  className=\"text-gray-600 px-6 py-3 rounded-lg hover:bg-gray-100 transition-colors font-medium cursor-pointer\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={handleSave}\n                  disabled={loading || usernameStatus === 'checking' || !hasChanges}\n                  className={`btn-base px-8 py-3 ${\n                    !hasChanges \n                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed' \n                      : loading || usernameStatus === 'checking'\n                        ? 'bg-emerald-600 text-white opacity-50 cursor-not-allowed'\n                        : 'btn-primary'\n                  }`}\n                >\n                  {loading ? 'Saving...' : usernameStatus === 'checking' ? 'Checking username...' : 'Save Changes'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Confirmation Modal */}\n      <ConfirmationModal\n        isOpen={confirmModal.isOpen}\n        onClose={() => setConfirmModal({ isOpen: false, field: null, previewField: null, imageType: '' })}\n        onConfirm={confirmRemoveImage}\n        title=\"Remove Image\"\n        message={`Are you sure you want to remove your ${confirmModal.imageType}?`}\n        confirmText=\"Remove\"\n        cancelText=\"Cancel\"\n        type=\"danger\"\n      />\n    </div>\n  );\n}","size_bytes":26877},"src/app/(chrome)/profile/page.js":{"content":"// Profile page for the authenticated user\nimport ProfilePageWrapper from \"../../../components/ProfilePageWrapper\";\n\nexport const metadata = {\n  title: \"Profile - Frame Your Voice\",\n  description: \"Manage your profile and view your campaigns\",\n};\n\nexport default function Profile() {\n  return <ProfilePageWrapper isOwnProfile={true} />;\n}","size_bytes":338},"src/app/(chrome)/u/[username]/page.js":{"content":"// User profile route with /u/ prefix to avoid conflicts\nimport ProfilePage from \"../../../../components/ProfilePage\";\n\nexport async function generateMetadata({ params }) {\n  const { username } = await params;\n  return {\n    title: `@${username} - Frame Your Voice`,\n    description: `View ${username}'s profile and campaigns`,\n  };\n}\n\nexport default async function UserProfile({ params }) {\n  const { username } = await params;\n  \n  return (\n    <ProfilePage isOwnProfile={false} username={username} />\n  );\n}","size_bytes":510}},"version":1}